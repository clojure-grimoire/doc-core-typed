{:type :fn, :src "(defn abstract-type [ids keys t]\n  {:pre [(every? symbol? ids)\n         (every? integer? keys)\n         (r/AnyType? t)]\n   :post [(r/AnyType? %)]}\n  ;(prn \"abstract type\" ids keys t)\n  (letfn [(sb-t [t] (abstract-type ids keys t))\n          (sb-f [f] (abo ids keys f))\n          (sb-o [o] (abstract-object ids keys o))]\n    (fold/fold-rhs ::abo\n       {:type-rec sb-t\n        :filter-rec sb-f\n        :object-rec sb-o}\n      t)))", :ns "clojure.core.typed.abo", :name "abstract-type", :file "clojure/core/typed/abo.clj", :column 1, :line 14, :arglists ([ids keys t])}