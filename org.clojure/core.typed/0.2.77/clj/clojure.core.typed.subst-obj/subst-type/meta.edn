{:type :fn, :src "(defn subst-type [t k o polarity]\n  {:pre [(r/AnyType? t)\n         (fl/name-ref? k)\n         (obj/RObject? o)\n         (con/boolean? polarity)]\n   :post [(r/AnyType? %)]}\n  ;(prn \"subst-type\" (prs/unparse-type t))\n  (letfn [(st [t*]\n            (subst-type t* k o polarity))\n          (sf [fs] \n            {:pre [((some-fn fl/FilterSet? r/FlowSet?) fs)] \n             :post [((some-fn fl/FilterSet? r/FlowSet?) %)]}\n            ((if (fl/FilterSet? fs) subst-filter-set subst-flow-set) \n             fs k o polarity))]\n    (fold/fold-rhs ::subst-type\n      {:type-rec st\n       :filter-rec sf\n       :object-rec (fn [f] (subst-object f k o polarity))\n       :locals {:st st\n                :k k\n                :o o\n                :polarity polarity}}\n      t)))", :ns "clojure.core.typed.subst-obj", :name "subst-type", :file "clojure/core/typed/subst_obj.clj", :column 1, :line 152, :arglists ([t k o polarity])}