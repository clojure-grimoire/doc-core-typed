{:type :fn, :src "(defn subst-filter [f k o polarity]\n  {:pre [(fl/Filter? f)\n         (fl/name-ref? k)\n         (obj/RObject? o)\n         (con/boolean? polarity)]\n   :post [(fl/Filter? %)]}\n  (letfn [(ap [f] (subst-filter f k o polarity))\n          (tf-matcher [t p i k o polarity maker]\n            {:pre [(r/Type? t)\n                   ((some-fn obj/EmptyObject? obj/NoObject? obj/Path?) o)]\n             :post [(fl/Filter? %)]}\n            (cond\n              ((some-fn obj/EmptyObject? obj/NoObject?)\n               o)\n              (cond \n                (= i k) (if polarity fl/-top fl/-bot)\n                (free-in/index-free-in? k t) (if polarity fl/-top fl/-bot)\n                :else f)\n\n              (obj/Path? o) (let [{p* :path i* :id} o]\n                              (cond\n                                (= i k) (maker \n                                          (subst-type t k o polarity)\n                                          i*\n                                          (concat p p*))\n                                (free-in/index-free-in? k t) (if polarity fl/-top fl/-bot)\n                                :else f))\n              :else (err/int-error (str \"what is this? \" o))))]\n    (cond\n      (fl/ImpFilter? f) (let [{ant :a consq :c} f]\n                          (fo/-imp (subst-filter ant k o (not polarity)) (ap consq)))\n      (fl/AndFilter? f) (let [fs (:fs f)] \n                          (apply fo/-and (map ap fs)))\n      (fl/OrFilter? f) (let [fs (:fs f)]\n                         (apply fo/-or (map ap fs)))\n      (fl/BotFilter? f) fl/-bot\n      (fl/TopFilter? f) fl/-top\n\n      (fl/TypeFilter? f) \n      (let [{t :type p :path i :id} f]\n        (tf-matcher t p i k o polarity fo/-filter))\n\n      (fl/NotTypeFilter? f) \n      (let [{t :type p :path i :id} f]\n        (tf-matcher t p i k o polarity fo/-not-filter))\n      (fl/NoFilter? f) f)))", :ns "clojure.core.typed.subst-obj", :name "subst-filter", :file "clojure/core/typed/subst_obj.clj", :column 1, :line 15, :arglists ([f k o polarity])}