{:type :fn, :src "(deftest or-filter-simplify-test\n  ;(| (is T  a)\n  ;   (is T' a))\n  ; simplifies to\n  ;(is (U T T') a)\n  (is-clj \n    (= (-or (-filter (RClass-of clojure.lang.Symbol) 'id)\n            (-filter (RClass-of String) 'id))\n       (-filter (Un (RClass-of clojure.lang.Symbol)\n                    (RClass-of String))\n                'id)))\n\n  ;(| (is T  a pth)\n  ;   (is T' a pth))\n  ; simplifies to\n  ;(is (U T T') a pth)\n  (is-clj \n    (= (-or (-filter (RClass-of clojure.lang.Symbol) 'id [(-kpe :a)])\n            (-filter (RClass-of String) 'id [(-kpe :a)]))\n       (-filter (Un (RClass-of clojure.lang.Symbol)\n                    (RClass-of String))\n                'id [(-kpe :a)])))\n  \n  ;(& (is T a pth)\n  ;   (when (is T a pth)\n  ;     (is T' 'b)))\n  ;  simplifies to \n  ;(& (is T a pth)\n  ;   (is T' 'b))\n  ;  FIXME\n;  (is-clj \n;    (= (-and (-filter (RClass-of clojure.lang.Symbol) 'id [(-kpe :a)])\n;             (-imp (-filter (RClass-of clojure.lang.Symbol) 'id [(-kpe :a)])\n;               (-filter (RClass-of String) 'id2 [(-kpe :a) (-kpe :b)])))\n;       (-and (-filter (RClass-of clojure.lang.Symbol) 'id [(-kpe :a)])\n;             (-filter (RClass-of String) 'id2 [(-kpe :a) (-kpe :b)]))))\n  )", :ns "clojure.core.typed.test.core", :name "or-filter-simplify-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 1316, :test #<core$fn__27603 clojure.core.typed.test.core$fn__27603@7f72b53c>}