{:type :fn, :src "(deftest heterogeneous-ds-test\n  (is-clj \n    (not (subtype? (parse-type `(HMap :mandatory {:a (Value 1)}))\n                   (RClass-of ISeq [-any]))))\n  (is-clj \n    (not (subtype? (parse-type `(HVec [(Value 1) (Value 2)]))\n                   (RClass-of ISeq [-any]))))\n  (is-clj\n    (subtype? (parse-type `(HSeq [(Value 1) (Value 2)]))\n              (RClass-of ISeq [-any])))\n  (is-clj \n    (subtype? (parse-type `(~'List* (Value 1) (Value 2)))\n              (RClass-of ISeq [-any])))\n  (is-clj (= (tc-t [1 2])\n             (ret (-hvec [(-val 1) (-val 2)]) (-true-filter) -empty)))\n  (is-clj (= (tc-t '(1 2))\n         (ret (HeterogeneousList-maker [(-val 1) (-val 2)]) (-true-filter) -empty)))\n  (is-clj (= (tc-t {:a 1})\n         (ret (-complete-hmap {(-val :a) (-val 1)}) (-true-filter) -empty)))\n  (is-clj (= (tc-t {})\n         (ret (-complete-hmap {}) (-true-filter) -empty)))\n  (is-clj (= (tc-t [])\n         (ret (-hvec []) (-true-filter) -empty)))\n  (is-clj (= (tc-t '())\n         (ret (HeterogeneousList-maker []) (-true-filter) -empty)))\n  (is-cf '(a b) (List* clojure.lang.Symbol clojure.lang.Symbol)))", :ns "clojure.core.typed.test.core", :name "heterogeneous-ds-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 348, :test #<core$fn__25394 clojure.core.typed.test.core$fn__25394@108f1be6>}