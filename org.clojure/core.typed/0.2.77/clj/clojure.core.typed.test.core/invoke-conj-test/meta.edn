{:type :fn, :src "(deftest invoke-conj-test\n  \n  ; need to manually build hvec to match filters/objects\n  (equal-types-noparse (conj nil nil)\n                       (-hvec [-nil]\n                              :filters [(-false-filter)]\n                              :objects [-empty]))\n  \n  (equal-types-noparse (conj [1] 2 3)\n                       (-hvec [(-val 1) (-val 2) (-val 3)]\n                              :filters [(-FS -top -top)\n                                        (-true-filter)\n                                        (-true-filter)]\n                              :objects [-empty -empty -empty]))\n  (equal-types-noparse (conj [1]\n                             (ann-form nil (U nil '2))\n                             3)\n                       (-hvec [(-val 1) (Un -nil (-val 2)) (-val 3)]\n                              :filters [(-FS -top -top) ; embedded literals dont get any\n                                                        ; filter information (yet)?\n                                        (-FS -top -top)\n                                        (-true-filter)]\n                              :objects [-empty -empty -empty]))\n  \n  (equal-types (conj (ann-form nil (U nil '['1]))\n                     (ann-form nil (U nil '2)))\n               (U '[(U nil '2)]\n                  '['1 (U nil '2)]))\n  \n  (equal-types (conj {:a 1} [:b 2])\n               (HMap :mandatory {:a '1 :b '2} :complete? true))\n  \n  (equal-types (conj {:a 1}\n                     (clojure.core.typed/ann-form nil (U nil '[':b '2])))\n               (U (HMap :mandatory {:a '1} :complete? true)\n                  (HMap :mandatory {:a '1 :b '2} :complete? true)))\n  \n  (equal-types (conj (clojure.core.typed/ann-form nil (U nil (HMap :mandatory {:a '1} :complete? true)))\n                     (clojure.core.typed/ann-form nil (U nil '[':b '2])))\n               (U '[(U nil '[':b '2])]\n                  (HMap :mandatory {:a '1} :complete? true)\n                  (HMap :mandatory {:a '1 :b '2} :complete? true)))\n  \n  (equal-types (conj #{5} 6 7)\n               (clojure.lang.IPersistentSet (U '5 '6 '7)))\n  \n  )", :ns "clojure.core.typed.test.core", :name "invoke-conj-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 2248, :test #<core$fn__29508 clojure.core.typed.test.core$fn__29508@48aa8a97>}