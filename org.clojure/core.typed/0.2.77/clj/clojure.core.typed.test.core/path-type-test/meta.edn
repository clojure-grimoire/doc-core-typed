{:type :fn, :src "(deftest path-type-test\n  (is-clj (= (path-type -any nil)\n             -any))\n  (is-clj (= (path-type -nil nil)\n             -nil))\n  (is-clj (= (path-type -nil [(-kpe :a)])\n             -nil))\n  (is-clj (= (path-type (-complete-hmap {(-val :a) (-val :b)}) [(-kpe :a)])\n             (-val :b)))\n  (is-clj (= (path-type (-partial-hmap {(-val :a) (-val :b)}) [(-kpe :a)])\n             (-val :b)))\n  (is-clj (= (path-type (make-HMap :optional {(-val :a) (-val :b)}) [(-kpe :a)])\n             (Un -nil (-val :b))))\n  (is-clj (= (path-type (make-HMap :optional {(-val :a) (-val :b)}\n                                   :complete? true) \n                        [(-kpe :a)])\n             (Un -nil (-val :b))))\n  (is-clj (= (path-type (make-HMap :optional {(-val :a) (-val :b)}\n                                   :complete? true) \n                        [(-kpe :a)])\n             (Un -nil (-val :b))))\n  (is-clj (= (path-type (make-HMap :complete? true)\n                        [(-kpe :a)])\n             -nil))\n  (is-clj (= (path-type (make-HMap :complete? false)\n                        [(-kpe :a)])\n             -any))\n  (is-clj (= (path-type (make-HMap :absent-keys #{(-val :a)})\n                        [(-kpe :a)])\n             -nil))\n  (is-clj (= (path-type -nil\n                        [(-kpe :a)])\n             -nil))\n  (is-clj (= (path-type -any\n                        [(-kpe :a)])\n             -any))\n  (is-clj (= (path-type (-val :b)\n                        [(-kpe :a)])\n             -any))\n  ; um CountPE just returning Int will probably do\n  (is-clj (both-subtype? \n            (path-type (-val :b)\n                       [(CountPE-maker)])\n            (Name-maker `Int)))\n  (is-clj (both-subtype? (clj (path-type (parse-clj `(Vec Int))\n                                         [(CountPE-maker)]))\n                         (Name-maker `Int)))\n  (is-clj (= (path-type (-hvec [(-val :a) (-val :b) (-val :c)])\n                        [(NthPE-maker 0)])\n             (-val :a)))\n  (is-clj (= (path-type (-hvec [(-val :a) (-val :b) (-val :c)])\n                        [(NthPE-maker 1)])\n             (-val :b)))\n  (is-clj (= (path-type (-hvec [(-val :a) (-val :b) (-val :c)])\n                        [(NthPE-maker 2)])\n             (-val :c)))\n  (is-clj (= (path-type (-hvec [(-val :a) (-val :b) (-val :c)])\n                        [(NthPE-maker 3)])\n             -any))\n  (is-clj (= (path-type (Un (-hvec [(-val :b)])\n                            (-hvec [(-val :a) (-val :b) (-val :c)]))\n                        [(NthPE-maker 0)])\n             (Un (-val :a) (-val :b))))\n  )", :ns "clojure.core.typed.test.core", :name "path-type-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 4370, :test #<core$fn__37129 clojure.core.typed.test.core$fn__37129@4d357a79>}