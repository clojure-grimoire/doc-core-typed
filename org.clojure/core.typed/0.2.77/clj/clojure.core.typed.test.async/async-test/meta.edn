{:type :fn, :src "(deftest async-test\n  (is-tc-e \n    #(let [c (chan :- t/Str)]\n       (go (a/>! c \"hello\"))\n       (prn (a/<!! (go :- Str (a/<! c))))\n       (a/close! c))\n    :requires [[clojure.core.async :as a]\n               [clojure.core.typed.async :refer [go chan]]])\n  (is-tc-e \n    #(let [c1 (chan :- t/Str)\n           c2 (chan :- t/Str)]\n       (a/thread (while true\n                   (let [[v ch] (a/alts!! [c1 c2])]\n                     (println \"Read\" v \"from\" ch))))\n       (a/>!! c1 \"hi\")\n       (a/>!! c2 \"there\"))\n    :requires [[clojure.core.async :as a]\n               [clojure.core.typed.async :as ta :refer [go chan]]])\n  (is-tc-e \n    #(a/alts!! [(a/chan) (a/chan)] :priority true)\n    :requires [[clojure.core.async :as a]\n               [clojure.core.typed.async]])\n  (is-tc-e\n    (do\n      (ann lift-chan (All [x y] [[x -> y] -> [(Chan x) -> (Chan y)]]))\n      (defn lift-chan [function]\n        (fn [in :- (Chan x)]\n          (let [out (chan :- y)]\n            (go\n              (loop []\n                (let [rcv (<! in)]\n                  (when rcv\n                    (>! out (function rcv))))))\n            out)))\n\n      (ann upper-case [Str -> Str])\n      (defn upper-case [s] s)\n\n      (ann upcase [(Chan Str) -> (Chan Str)])\n      (def upcase (lift-chan upper-case))\n      (upcase (chan :- Str)))\n    :requires [[clojure.core.async :as a :refer [<! >!]]\n               [clojure.core.typed.async :refer [chan go Chan]]]))", :ns "clojure.core.typed.test.async", :name "async-test", :file "clojure/core/typed/test/async.clj", :column 1, :line 10, :test #<async$fn__38174 clojure.core.typed.test.async$fn__38174@67e9c0b4>}