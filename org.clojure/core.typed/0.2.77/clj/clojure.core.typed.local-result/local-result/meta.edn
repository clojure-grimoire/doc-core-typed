{:type :fn, :src "(defn local-result [expr sym expected]\n  {:pre [(con/local-sym? sym)\n         ((some-fn nil? r/TCResult?) expected)]\n   :post [(r/TCResult? %)]}\n  (binding [vs/*current-expr* expr]\n    (let [; see if sym is an alias for an object\n          ; if not (-id-path sym) is returned\n          obj (lex/lookup-alias sym)\n          [alias-path alias-id] (cond\n                                  (obj/Path? obj) [(:path obj) (:id obj)]\n                                  (obj/EmptyObject? obj) [nil sym]\n                                  :else (assert \"Internal error: unreachable\"))\n          _ (assert (pr/path-elems? alias-path))\n          _ (assert (fr/name-ref? alias-id))\n          t (path-type/path-type (var-env/type-of alias-id) alias-path)]\n      (prs/with-unparse-ns (cu/expr-ns expr)\n        (below/maybe-check-below\n          (r/ret t \n                 (if (c/overlap t (c/Un r/-nil r/-false))\n                   (fo/-FS (fo/-not-filter-at (c/Un r/-nil r/-false) obj)\n                           (fo/-filter-at (c/Un r/-nil r/-false) obj))\n                   (fo/-true-filter))\n                 obj)\n          expected)))))", :ns "clojure.core.typed.local-result", :name "local-result", :file "clojure/core/typed/local_result.clj", :column 1, :line 18, :arglists ([expr sym expected])}