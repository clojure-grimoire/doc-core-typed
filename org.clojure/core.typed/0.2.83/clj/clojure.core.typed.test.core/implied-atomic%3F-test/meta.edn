{:type :fn, :src "(deftest implied-atomic?-test\n  (is-clj (implied-atomic? -top -bot))\n  (is-clj (not (implied-atomic? -bot -top)))\n  (is-clj (implied-atomic? -top\n                           (-filter (RClass-of Long) 0)))\n  (is-clj (not\n            (implied-atomic? (-filter (RClass-of Long) 0)\n                           -top)))\n  (is-clj (implied-atomic? (-filter (RClass-of Long) 0)\n                           (-filter (RClass-of Long) 0)))\n  (is-clj (implied-atomic? (-filter (RClass-of Long) 'a__#0)\n                           (-filter (RClass-of Long) 'a__#0)))\n  (is-clj (implied-atomic? (-not-filter (Name-maker `Long) 'a__#0)\n                           (-not-filter (RClass-of Long) 'a__#0)))\n  (is-clj (implied-atomic? (-not-filter (RClass-of Long) 'a__#0)\n                           (-not-filter (Name-maker `Long) 'a__#0)))\n  (is-clj (implied-atomic? (-not-filter -false 'a)(-not-filter (Un -nil -false) 'a)))\n  (is-clj (implied-atomic?\n            (clj\n              (parse-filter\n                '(| (! ':Red   tmap [(Key :right) (Key :left) (Key :tree)]) \n                    (! ':Black tmap [(Key :tree)]) \n                    (! ':Red   tmap [(Key :right) (Key :tree)]) \n                    (! ':Red   tmap [(Key :left)  (Key :tree)]))))\n            (clj \n              (parse-filter\n                '(| (! ':Red   tmap [(Key :right) (Key :left) (Key :tree)]) \n                    (! ':Black tmap [(Key :tree)]) \n                    (! ':Red   tmap [(Key :right) (Key :tree)])) ))\n            ))\n\n  (is-clj \n    (let [f1 (clj \n               (parse-filter\n                 '(| (! ':Red   tmap [(Key :right) (Key :left) (Key :tree)]) \n                     (! ':Black tmap [(Key :tree)]) \n                     (! ':Red   tmap [(Key :right) (Key :tree)]))))\n          f2 (clj\n               (parse-filter\n                 '(| (! ':Red   tmap [(Key :right) (Key :left) (Key :tree)]) \n                     (! ':Black tmap [(Key :tree)]) \n                     (! ':Red   tmap [(Key :right) (Key :tree)]) \n                     (! ':Red   tmap [(Key :left)  (Key :tree)]))))]\n      (= (-and f1 f2)\n         (-and f2 f1)\n         f1)))\n  (is-clj \n    (not (implied-atomic?\n           (parse-filter\n             '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                 (! ':Black tmap [(Key :tree)]) \n                 (! ':Red   tmap [(Key :right) (Key :tree)])))\n           (parse-filter\n             '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                 (! ':Black tmap [(Key :tree)]) \n                 (! ':Red   tmap [(Key :right) (Key :tree)])\n                 (! ':Red   tmap [(Key :left)  (Key :tree)]))))))\n  (is-clj (implied-atomic?\n                 (parse-filter\n                   '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                       (! ':Black tmap [(Key :tree)]) \n                       (! ':Red   tmap [(Key :right) (Key :tree)]) \n                       (! ':Red   tmap [(Key :left)  (Key :tree)])))\n                 (parse-filter\n                   '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                       (! ':Black tmap [(Key :tree)]) \n                       (! ':Red   tmap [(Key :right) (Key :tree)])))))\n  (is-clj (= (clj\n               (-and\n                 (clj\n                   (parse-filter\n                     '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                         (! ':Black tmap [(Key :tree)]) \n                         (! ':Red   tmap [(Key :right) (Key :tree)]))))\n                 (clj\n                   (parse-filter\n                     '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                         (! ':Black tmap [(Key :tree)]) \n                         (! ':Red   tmap [(Key :right) (Key :tree)]) \n                         (! ':Red   tmap [(Key :left)  (Key :tree)]))))))\n             (clj\n               (-and\n                 (clj\n                   (parse-filter\n                     '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                         (! ':Black tmap [(Key :tree)]) \n                         (! ':Red   tmap [(Key :right) (Key :tree)]) \n                         (! ':Red   tmap [(Key :left)  (Key :tree)]))))\n                 (clj\n                   (parse-filter\n                     '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                         (! ':Black tmap [(Key :tree)]) \n                         (! ':Red   tmap [(Key :right) (Key :tree)]))))))\n             (parse-filter\n               '(| (! ':Red   tmap [(Key :right) (Key :right) (Key :tree)]) \n                   (! ':Black tmap [(Key :tree)]) \n                   (! ':Red   tmap [(Key :right) (Key :tree)])))))\n  )", :ns "clojure.core.typed.test.core", :name "implied-atomic?-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 376, :test #<core$fn__25280 clojure.core.typed.test.core$fn__25280@21bdd71a>}