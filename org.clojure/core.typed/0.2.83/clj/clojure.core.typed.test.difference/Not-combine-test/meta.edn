{:type :fn, :src "(deftest Not-combine-test\n  (is-clj (= (In -nil (NotType-maker -nil))\n             (Un)))\n  (is-clj (clj\n            (= (In (RClass-of Integer) (NotType-maker (RClass-of Number)))\n               (Un))))\n\n  (is-clj (not (overlap (RClass-of Integer) (NotType-maker (RClass-of Number)))))\n  (is-clj (clj (overlap (RClass-of Number) (NotType-maker -nil))))\n\n  (is-clj (overlap (NotType-maker (RClass-of Number))\n                   (NotType-maker (RClass-of Integer))))\n\n  (is-clj (not (overlap (NotType-maker (RClass-of Number)) \n                        (RClass-of Integer))))\n\n  (is-clj (= (In (RClass-of Number) (NotType-maker -nil))\n             (RClass-of Number)))\n\n  (is-clj (= (In (Un (RClass-of Number) -nil) -nil)\n             -nil))\n  (is-clj (= (In (Un (RClass-of Number) -nil) (NotType-maker -nil))\n             (RClass-of Number)))\n  (is-clj (= (In (RClass-of Number) (NotType-maker -nil))\n             (RClass-of Number)))\n\n  (is-clj (clj (= (In (Un -nil (RClass-of Number)) (NotType-maker (Un -false -nil)))\n                  (RClass-of Number))))\n\n  (is-clj (overlap (Un -nil (RClass-of Number)) (NotType-maker (Un -false -nil))))\n\n  (is-clj (= (In (Un -nil (RClass-of Number)) (NotType-maker -nil))\n             (RClass-of Number)))\n  (is-clj (= (Un (In -nil (NotType-maker -nil))\n                 (In (RClass-of Number) (NotType-maker -nil)))\n             (RClass-of Number)))\n\n  (is-clj (= (In (NotType-maker (RClass-of Number))\n                 (NotType-maker (RClass-of Integer)))\n             (NotType-maker (RClass-of Number))))\n\n  (is-clj (subtype? (RClass-of Number) (NotType-maker -nil)))\n  (is-clj (subtype? (RClass-of Number) (NotType-maker (RClass-of Integer))))\n  (is-clj (not (subtype? (RClass-of Integer) (NotType-maker (RClass-of Number)))))\n  (is-clj (not (subtype? (NotType-maker -nil) (RClass-of Number))))\n\n  (is-clj (= (let [i (subst-all {'x (->t-subst (Un (RClass-of Number) -nil) no-bounds) \n                                 'y (->t-subst -nil no-bounds)} \n                                (In (make-F 'x) (NotType-maker (make-F 'y))))\n                   _ (assert (Intersection? i))]\n               (apply In (:types i)))\n             (RClass-of Number)))\n\n  (is-clj (overlap (make-F 'x)\n                   (NotType-maker (make-F 'y))))\n  (is-clj (overlap (B-maker 0)\n                   (NotType-maker (B-maker 1))))\n  (is-clj (not (subtype? (B-maker 0)\n                         (NotType-maker (B-maker 1)))))\n  (is-clj (not= (In (make-F 'x)\n                    (NotType-maker (make-F 'y)))\n                (Un))))", :ns "clojure.core.typed.test.difference", :name "Not-combine-test", :file "clojure/core/typed/test/difference.clj", :column 1, :line 19, :test #<difference$fn__38250 clojure.core.typed.test.difference$fn__38250@40b11b92>}