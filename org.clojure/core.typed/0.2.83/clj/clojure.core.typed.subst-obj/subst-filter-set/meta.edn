{:type :fn, :src "(defn subst-filter-set [fs k o polarity & [t]]\n  {:pre [((some-fn fl/FilterSet? fl/NoFilter?) fs)\n         (fl/name-ref? k)\n         (obj/RObject? o)\n         ((some-fn false? nil? r/Type?) t)]\n   :post [(fl/FilterSet? %)]}\n  ;  (prn \"subst-filter-set\")\n  ;  (prn \"fs\" (prs/unparse-filter-set fs))\n  ;  (prn \"k\" k) \n  ;  (prn \"o\" o)\n  ;  (prn \"polarity\" polarity) \n  ;  (prn \"t\" (when t (prs/unparse-type t)))\n  (cond\n    (fl/FilterSet? fs) (fo/-FS (subst-filter (add-extra-filter (:then fs) k t) k o polarity)\n                               (subst-filter (add-extra-filter (:else fs) k t) k o polarity))\n    :else (fo/-FS fl/-top fl/-top)))", :ns "clojure.core.typed.subst-obj", :name "subst-filter-set", :file "clojure/core/typed/subst_obj.clj", :column 1, :line 89, :arglists ([fs k o polarity & [t]])}