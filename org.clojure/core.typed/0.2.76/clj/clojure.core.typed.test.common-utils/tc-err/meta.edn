{:ns "clojure.core.typed.test.common-utils", :name "tc-err", :file "clojure/core/typed/test/common_utils.clj", :type :fn, :src "(defn tc-err [tc-common* frm & opts]\n  (let [[opts t has-t?] (if (and opts (not (keyword? (first opts))))\n                          [(rest opts) (first opts) true]\n                          [opts])\n        _ (assert (even? (count opts))\n                  \"Uneven arguments to tc-e\")\n        {:as opts} opts\n        _ (assert (not (and has-t? (contains? opts :expected)))\n                  \"Can't provide both implicit expected type and :expected kw to tc-err\")\n        has-t? (or has-t? (contains? opts :expected))\n        t (or t (:expected opts))\n        has-ret? (contains? opts :ret)\n        _ (assert (not (and has-t? (contains? opts :expected-ret)))\n                  \"Can't provide both expected type and expected ret\")\n        actual-ret (gensym 'ret)]\n    `(err/with-ex-info-handlers\n       [err/tc-error? (constantly true)]\n       (let [{~actual-ret :ret delayed-errors# :delayed-errors} \n             ~(tc-common* frm \n                          (assoc \n                            opts\n                            :expected-syntax {:provided? has-t?\n                                              :syn t}))]\n         ~(when has-ret?\n            `(assert (= ~actual-ret ~(:ret opts))))\n         (boolean\n           (seq delayed-errors#))))))", :column 1, :line 50, :arglists ([tc-common* frm & opts])}