{:type :fn, :src "(defn check-fni [exp mthods\n                 {:keys [recur-target-fn\n                         validate-expected-fn\n                         self-name]\n                  :as opt}]\n  {:pre [(function-type? exp)\n         (methods? mthods)\n         (opt-map? opt)]\n   :post [(methods? %)]}\n  ;(prn \"check-fni\" exp)\n  (let [; unwrap polymorphic expected types\n        [fin inst-frees bnds poly?] (cu/unwrap-poly exp)\n        ; this should never fail due to function-type? check\n        _ (assert (r/FnIntersection? fin))\n        _ (when validate-expected-fn\n            (validate-expected-fn fin))\n        ;collect all inferred Functions\n        cmethods\n        (lex/with-locals (when-let [name self-name] ;self calls\n                           {name exp})\n          ;scope type variables from polymorphic type in body\n          (free-ops/with-free-mappings (case poly?\n                                         :Poly (zipmap (map r/F-original-name inst-frees)\n                                                       (map #(hash-map :F %1 :bnds %2) inst-frees bnds))\n                                         :PolyDots (zipmap (map r/F-original-name (next inst-frees))\n                                                           (map #(hash-map :F %1 :bnds %2) (next inst-frees) (next bnds)))\n                                         {})\n            (dvar-env/with-dotted-mappings (case poly?\n                                             :PolyDots {(-> inst-frees last r/F-original-name) (last inst-frees)}\n                                             {})\n              (vec\n                (mapcat (fn [f]\n                          {:pre [(r/Function? f)]\n                           ;returns a collection of fn-method's\n                           :post [(methods? %)]}\n                          (check-Function\n                            mthods\n                            f\n                            {:recur-target-fn recur-target-fn}))\n                        (:types fin))))))]\n    cmethods))", :ns "clojure.core.typed.check.fn-methods", :name "check-fni", :file "clojure/core/typed/check/fn_methods.clj", :column 1, :line 99, :arglists ([exp mthods {:keys [recur-target-fn validate-expected-fn self-name], :as opt}])}