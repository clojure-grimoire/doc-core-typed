{:type :fn, :src "(deftest nth-test\n  (is-tc-err\n    (fn []\n      (nth #{1 2} 0)))\n  (is-tc-err\n    (fn []\n      (nth (ann-form #{1 2} (Seqable clojure.core.typed/Any)) \n           0)))\n  (is-tc-err\n    (fn []\n      (nth (ann-form [1 2] (Seqable clojure.core.typed/Any)) \n           0)))\n  (is-tc-err\n    (fn [] (nth {1 0} 0)))\n  (is-tc-e (nth [1] 0))\n  (is-tc-e (nth '(1) 0))\n  (is-tc-e (nth \"a\" 0))\n  (is-tc-e (let [nth (ann-form nth \n                               (clojure.core.typed/All [x y] \n                                 [(U (clojure.lang.Indexed x) \n                                     (I clojure.lang.Sequential (Seqable x))) \n                                  Int -> clojure.core.typed/Any]))]\n             (nth \"a\" 0)))\n  (is-clj (do\n            (dotimes [_ 100]\n              (cs-gen #{'x} {'x no-bounds} {}\n                      (-val \"a\")\n                      (Un (RClass-of clojure.lang.Indexed [(make-F 'x)])\n                          (In (RClass-of clojure.lang.Sequential) \n                              (RClass-of clojure.lang.Seqable [(make-F 'x)])))))\n            true))\n  (is-clj (some\n            #{(RClass-of clojure.lang.Indexed [-any])}\n             (mapv fully-resolve-type (RClass-supers* (RClass-of 'java.util.ArrayList)))))\n  (is (sub?-q `java.util.ArrayList \n              `(clojure.lang.Indexed Any)))\n  (is-tc-e (nth (ann-form (java.util.ArrayList. [1 2 3]) (java.util.RandomAccess clojure.core.typed/Any)) 0))\n  (is-tc-e (nth (java.util.ArrayList. [1 2 3]) 0))\n  ; this used to fail randomly\n  (is (do (dotimes [n 20]\n            (tc-e (let [nth (ann-form \n                              nth (clojure.core.typed/All [x y] \n                                       [(U (clojure.lang.Indexed x) \n                                           (I clojure.lang.Sequential (Seqable x))) \n                                        Int -> clojure.core.typed/Any]))]\n                    (nth \"a\" 0))))\n          true))\n  (is (apply = (for [n (range 20)]\n                 (clj\n                   (cs-gen #{}\n                           {'x no-bounds\n                            'y no-bounds}\n                           {}\n                           (parse-clj `(Value \"a\") )\n                           (with-bounded-frees {(make-F 'x) no-bounds}\n                             (parse-clj `(U (I clojure.lang.Sequential (clojure.lang.Seqable ~'x)) (clojure.lang.Indexed ~'x))))))))))", :ns "clojure.core.typed.test.core", :name "nth-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 3014, :test #<core$fn__31798 clojure.core.typed.test.core$fn__31798@7d023b17>}