{:type :fn, :src "(defn make-RClass-syn [the-class frees-syn opts]\n  (let [replacements-syn (gensym 'replacements-syn)\n        fs (gensym 'fs)]\n    `(impl/with-clojure-impl\n       (let [{~replacements-syn :replace\n              unchecked-ancestors-syn# :unchecked-ancestors} (apply hash-map ~opts)\n             {variances# :variances\n              nmes# :nmes\n              bnds# :bnds}\n             (when-let [fs# (seq ~frees-syn)]\n               ; don't bound frees because mutually dependent bounds are problematic\n               (let [b# (free-ops/with-free-symbols (mapv (fn [s#]\n                                                            {:pre [(vector? s#)]\n                                                             :post [(symbol? ~'%)]}\n                                                            (first s#))\n                                                          fs#)\n                          (mapv prs/parse-tfn-binder fs#))]\n                 {:variances (map :variance b#)\n                  :nmes (map :nme b#)\n                  :bnds (map :bound b#)}))\n             frees# (map r/make-F nmes#)\n             csym# ~(resolve-class-symbol the-class)\n             frees-and-bnds# (zipmap frees# bnds#)]\n         (assert ((con/hash-c? r/F? r/Bounds?) frees-and-bnds#) frees-and-bnds#)\n         (c/RClass* nmes# variances# frees# csym#\n                    (free-ops/with-bounded-frees frees-and-bnds#\n                      ~(build-replacement-syntax replacements-syn))\n                    (free-ops/with-bounded-frees frees-and-bnds#\n                      (set (map prs/parse-type unchecked-ancestors-syn#)))\n                    bnds#)))))", :ns "clojure.core.typed.base-env-helper", :name "make-RClass-syn", :file "clojure/core/typed/base_env_helper.clj", :column 1, :line 138, :arglists ([the-class frees-syn opts])}