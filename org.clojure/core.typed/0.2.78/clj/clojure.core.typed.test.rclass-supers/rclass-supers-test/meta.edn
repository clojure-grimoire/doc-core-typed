{:type :fn, :src "(deftest rclass-supers-test\n  (is-clj \n    (let [num (RClass-of Number)\n          nnum (Un num -nil)]\n        (doseq [[t r] {(RClass-of Seqable [num]) (Un -nil num)\n                       (RClass-of IPersistentVector [num]) (Un -nil num)\n                       (RClass-of APersistentVector [num]) (Un -nil num)\n                       (RClass-of PersistentVector [num]) (Un -nil num)\n                       (RClass-of IPersistentList [num]) (Un -nil num)\n                       (RClass-of PersistentList [num]) (Un -nil num)\n                       (RClass-of ISeq [num]) (Un -nil num)\n                       (RClass-of ASeq [num]) (Un -nil num)\n                       (RClass-of clojure.lang.Cons [num]) (Un -nil num)\n                       (RClass-of clojure.lang.LazySeq [num]) (Un -nil num)\n                       (RClass-of IPersistentCollection [num]) (Un -nil num)\n                       (RClass-of IPersistentSet [num]) (Un -nil num)\n                       (RClass-of APersistentSet [num]) (Un -nil num)\n                       (RClass-of PersistentTreeSet [num]) (Un -nil num)\n                       (RClass-of PersistentHashSet [num]) (Un -nil num)\n                       (RClass-of Associative [num num]) -any\n                       (RClass-of IPersistentStack [num]) (Un -nil num)\n                       (RClass-of String) (Un -nil (RClass-of Character))\n                       (RClass-of CharSequence) (Un -nil (RClass-of Character))\n                       ; only supports key/val\n                       ;(RClass-of clojure.lang.IMapEntry [num num]) num\n                       (RClass-of clojure.lang.AMapEntry [num num]) num\n                       (RClass-of clojure.lang.MapEntry [num num]) num\n                       (RClass-of IPersistentMap [num num]) (Un -nil (-hvec [num num]))\n                       (RClass-of APersistentMap [num num]) (Un -nil (-hvec [num num]))\n                       (RClass-of PersistentHashMap [num num]) (Un -nil (-hvec [num num]))\n                       (RClass-of PersistentTreeMap [num num]) (Un -nil (-hvec [num num]))}]\n          (t/check-form* '(fn [a] (first a))\n                         (unparse-type\n                           (make-FnIntersection\n                             (make-Function [t] r)))))\n        true)))", :ns "clojure.core.typed.test.rclass-supers", :name "rclass-supers-test", :file "clojure/core/typed/test/rclass_supers.clj", :column 1, :line 16, :test #<rclass_supers$fn__12723 clojure.core.typed.test.rclass_supers$fn__12723@3b7e080>}