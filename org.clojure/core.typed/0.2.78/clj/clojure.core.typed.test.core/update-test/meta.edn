{:type :fn, :src "(deftest update-test\n  (is-clj (= (update (Un (make-HMap :mandatory {(-val :type) (-val :Map1)})\n                         (make-HMap :mandatory {(-val :type) (-val :Map2)}))\n                     (-filter (-val :Map1) 'tmap [(-kpe :type)]))\n             (make-HMap :mandatory {(-val :type) (-val :Map1)})))\n  ;test that update resolves Names properly\n  (is-with-aliases (= (update (Name-maker 'clojure.core.typed.test.util-aliases/MapStruct2)\n                              (-filter (-val :MapStruct1) 'tmap [(-kpe :type)]))\n                      (Un)))\n  ;test that update resolves Names properly\n  ; here we refine the type of tmap with the equivalent of following the then branch \n  ; with test (= :MapStruct1 (:type tmap))\n  (is-with-aliases (= (update (Name-maker 'clojure.core.typed.test.util-aliases/UnionName)\n                              (-filter (-val :MapStruct1) 'tmap [(-kpe :type)]))\n                      (make-HMap :mandatory {(-val :type) (-val :MapStruct1) \n                              (-val :a) (Name-maker 'clojure.core.typed.test.util-aliases/MyName)})))\n  (is-with-aliases (= (update (Name-maker 'clojure.core.typed.test.util-aliases/UnionName)\n                              (-not-filter (-val :MapStruct1) 'tmap [(-kpe :type)]))\n                      (make-HMap :mandatory {(-val :type) (-val :MapStruct2) \n                              (-val :b) (Name-maker 'clojure.core.typed.test.util-aliases/MyName)})))\n  (is-clj (= (update (Un -true -false) (-filter (Un -false -nil) 'a nil)) \n             -false)))", :ns "clojure.core.typed.test.core", :name "update-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 762, :test #<core$fn__25921 clojure.core.typed.test.core$fn__25921@48659e2e>}