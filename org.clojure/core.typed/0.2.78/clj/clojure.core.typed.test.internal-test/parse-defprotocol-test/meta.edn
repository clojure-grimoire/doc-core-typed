{:type :fn, :src "(deftest parse-defprotocol-test\n  ;cannot shadow tvars\n  (is (thrown? AssertionError\n               (internal/parse-defprotocol*\n                 '([[x :variance :covariant]] Name ([x] m1 [this t])))))\n  ;unannotated\n  (is (= (internal/parse-defprotocol*\n           '(Name (m1 [this t])\n                  (m2 [this t] [this t y])))\n         {:defprotocol '(clojure.core/defprotocol Name\n                          (m1 [this t])\n                          (m2 [this t] [this t y]))\n          :ann-protocol '(clojure.core.typed/ann-protocol Name\n                           m1\n                           (clojure.core.typed/IFn [Name clojure.core.typed/Any -> clojure.core.typed/Any])\n                           m2\n                           (clojure.core.typed/IFn [Name clojure.core.typed/Any -> clojure.core.typed/Any]\n                               [Name clojure.core.typed/Any clojure.core.typed/Any -> clojure.core.typed/Any]))}))\n  ; fully annotated, no poly\n  (is (= (internal/parse-defprotocol*\n           '(Name (m1 [this t :- Foo] :- Bar)\n                  (m2 [this t :- Number] :- Baz\n                      [this t :- Number, y :- Blah] :- Bar)))\n         {:defprotocol '(clojure.core/defprotocol Name\n                          (m1 [this t])\n                          (m2 [this t] [this t y]))\n          :ann-protocol '(clojure.core.typed/ann-protocol Name\n                           m1\n                           (clojure.core.typed/IFn [Name Foo -> Bar])\n                           m2\n                           (clojure.core.typed/IFn [Name Number -> Baz]\n                               [Name Number Blah -> Bar]))}))\n  ; method intersections\n  (is (= (internal/parse-defprotocol*\n           '(Name (m1 [this t :- Foo] :- Bar\n                      [this t :- Foo1] :- Bar1\n                      [this e :- Foo2] :- Bar2)))\n         {:defprotocol '(clojure.core/defprotocol Name\n                          (m1 [this t]))\n          :ann-protocol '(clojure.core.typed/ann-protocol Name\n                           m1\n                           (clojure.core.typed/IFn [Name Foo -> Bar]\n                               [Name Foo1 -> Bar1]\n                               [Name Foo2 -> Bar2]))}))\n  ;polymorphic protocols with doc\n  (is (= (internal/parse-defprotocol*\n           '([[x :variance :covariant]]\n             Name (m1 [this t :- Foo] :- Bar\n                      [this t :- Foo1] :- Bar1\n                      [this e :- Foo2] :- Bar2\n                      \"Doc\")))\n         {:defprotocol '(clojure.core/defprotocol Name\n                          (m1 [this t] \"Doc\"))\n          :ann-protocol '(clojure.core.typed/ann-protocol \n                           [[x :variance :covariant]]\n                           Name\n                           m1\n                           (clojure.core.typed/IFn [(Name x) Foo -> Bar]\n                               [(Name x) Foo1 -> Bar1]\n                               [(Name x) Foo2 -> Bar2]))}))\n  ; polymorphic method\n  (is (= (internal/parse-defprotocol*\n           '([[x :variance :covariant]]\n             Name ([y] \n                   m1 \n                   [this t :- Foo] :- Bar\n                   [this t :- Foo1] :- Bar1\n                   [this e :- Foo2] :- Bar2)))\n         {:defprotocol '(clojure.core/defprotocol Name\n                          (m1 [this t]))\n          :ann-protocol '(clojure.core.typed/ann-protocol \n                           [[x :variance :covariant]]\n                           Name\n                           m1\n                           (clojure.core.typed/All [y]\n                                (clojure.core.typed/IFn\n                                  [(Name x) Foo -> Bar]\n                                  [(Name x) Foo1 -> Bar1]\n                                  [(Name x) Foo2 -> Bar2])))}))\n  (is (= (-> (internal/parse-defprotocol*\n               '([[x :variance :covariant]]\n                 Name ([y] \n                       m1 \n                       ^long [this t :- Foo] :- Bar)))\n             :defprotocol next next first second meta)\n         '{:tag long}))\n  )", :ns "clojure.core.typed.test.internal-test", :name "parse-defprotocol-test", :file "clojure/core/typed/test/internal_test.clj", :column 1, :line 85, :test #<internal_test$fn__37815 clojure.core.typed.test.internal_test$fn__37815@140e18a2>}