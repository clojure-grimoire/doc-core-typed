{:ns "clojure.core.typed.test.rbt", :name "restore-right", :file "clojure/core/typed/test/rbt.clj", :type :fn, :src "(defn restore-right [tmap]\n  (cond\n    (and (-> tmap :tree #{:Black})\n         (-> tmap :left :tree #{:Red})\n         (-> tmap :right :tree #{:Red})\n         (-> tmap :right :left :tree #{:Red}))\n    (let [{lt :left rt :right e :entry} tmap]\n      ;re-color\n      {:tree :Red\n       :entry e\n       :left (assoc lt\n                    :tree :Black)\n       :right (assoc rt\n                     :tree :Black)})\n\n    (and (-> tmap :tree #{:Black})\n         (-> tmap :left :tree #{:Red})\n         (-> tmap :right :tree #{:Red})\n         (-> tmap :right :right :tree #{:Red}))\n    (let [{lt :left rt :right e :entry} tmap]\n      ;re-color\n      {:tree :Red\n       :entry e\n       :left (assoc lt\n                    :tree :Black)\n       :right (assoc rt\n                     :tree :Black)})\n\n    (and (-> tmap :tree #{:Black})\n         (-> tmap :right :tree #{:Red})\n         (-> tmap :right :left :tree #{:Red}))\n    (let [{e :entry\n           l :left\n           {re :entry\n            {rle :entry\n             rll :left\n             rlr :right}\n            :left\n            rr :right}\n           :right} tmap]\n      ;l is black, deep rotate\n      {:tree :Black\n       :entry rle\n       :left {:tree :Red\n              :entry e\n              :left l\n              :right rll}\n       :right {:tree :Red\n               :entry re\n               :left rlr\n               :right rr}})\n\n    (and (-> tmap :tree #{:Black})\n         (-> tmap :right :tree #{:Red})\n         (-> tmap :right :right :tree #{:Red}))\n    (let [{e :entry\n           l :left\n           {re :entry\n            rl :left\n            rr :right} \n           :right} tmap]\n      ;l is black, shallow rotate\n      {:tree :Black\n       :entry re\n       :left {:tree :Red\n              :entry e\n              :left l\n              :right rl}\n       :right rr})\n\n    :else tmap))", :column 1, :line 106, :arglists ([tmap])}