{:type :macro, :src "(defmacro alters [& args]\n  (let [fields (gensym 'fields)\n        opts (gensym 'opts)\n        s (gensym 's)]\n    `(impl/with-clojure-impl\n       (let [ts# (partition 2 '~args)]\n         (into {}\n               (doall\n                 (for [[~s [~fields & ~opts]] ts#]\n                   (let [sym# ~(resolve-class-symbol s)\n                         decl-kind# (declared-kind-for-rclass ~fields)\n                         _# (when (r/TypeFn? decl-kind#)\n                              (decl-env/add-declared-kind sym# decl-kind#))\n                         rcls# ~(make-RClass-syn s fields opts)]\n                     ;accumulate altered classes in initial env\n                     (rcls/alter-class* sym# rcls#)\n                     (decl-env/remove-declared-kind sym#)\n                     [sym# rcls#]))))))))", :macro true, :ns "clojure.core.typed.base-env-helper", :name "alters", :file "clojure/core/typed/base_env_helper.clj", :column 1, :line 175, :arglists ([& args])}