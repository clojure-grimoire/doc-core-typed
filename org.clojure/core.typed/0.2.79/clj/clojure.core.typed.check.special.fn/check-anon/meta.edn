{:type :fn, :src "(defn check-anon [{:keys [methods] :as expr} {:keys [doms rngs rests drests]}\n                  {:keys [frees-with-bnds dvar]}]\n  {:pre [(#{:fn} (:op expr))]}\n  (assert (apply = (map count [doms rngs rests drests rngs methods]))\n          (mapv count [doms rngs rests drests rngs methods]))\n  (let [cmethod-specs\n        (mapv\n          (fn [method dom rng rest drest ret]\n            (fn-method-one/check-fn-method1 \n              method \n              (r/make-Function dom (or (when (r/Result? rng)\n                                         (r/Result-type* rng))\n                                       r/-any) rest drest\n                               :filter (when (r/Result? rng)\n                                         (r/Result-filter* rng))\n                               :object (when (r/Result? rng)\n                                         (r/Result-object* rng))\n                               :flow (when (r/Result? rng)\n                                       (r/Result-flow* rng)))\n              :ignore-rng (not rng)))\n          methods doms rngs rests drests rngs)\n\n        [fs cmethods] ((juxt #(map :ftype %)\n                             #(map :cmethod %))\n                       cmethod-specs)\n        _ (assert (seq fs) fs)\n        _ (assert (every? r/Function? fs) fs)\n        ret-type (r/ret (wrap-poly (apply r/make-FnIntersection fs) frees-with-bnds dvar)\n                        (fo/-FS fl/-top fl/-bot))]\n    (assoc expr\n           ::t/cmethods cmethods\n           u/expr-type ret-type)))", :ns "clojure.core.typed.check.special.fn", :name "check-anon", :file "clojure/core/typed/check/special/fn.clj", :column 1, :line 25, :arglists ([{:keys [methods], :as expr} {:keys [doms rngs rests drests]} {:keys [frees-with-bnds dvar]}])}