{:type :fn, :src "(deftest simple-env+\n  (testing \"updating empty env with tt\"\n    (is (with-validator v\n          (prop-sub? (env+ (-PropEnv {} #{}) [-top] v)\n                      (-PropEnv {} #{})))))\n  (testing \"updating non-empty env with tt\"\n    (is (let [l {'x -nil}]\n          (with-validator v\n            (prop-sub? (env+ (-PropEnv l #{})\n                             [-top] v)\n                       (-PropEnv l #{}))))))\n  (testing \"updating a typical `and` conjunction\n\n           (let [v (get-vector)\n                 s (seq v)]\n             (when s\n               ...))\"\n    (is-clj \n      (let [l {'v (parse-clj `(t/Vec t/Num))\n               's (parse-clj `(t/NilableNonEmptySeq t/Num))}]\n        (with-validator v\n          (prop-sub?\n            (env+ (-PropEnv l #{(-imp (-not-filter (Un -nil -false) 's)\n                                      (-filter (make-CountRange 1) 'v))})\n                  [(-not-filter (Un -nil -false) 's)]\n                  v)\n            (-PropEnv {'v (parse-clj `(t/NonEmptyVec t/Num))\n                       's (parse-clj `(t/NonEmptySeq t/Num))}\n                      #{(-not-filter (Un -nil -false) 's)\n                        (-filter (make-CountRange 1) 'v)})))))))", :ns "clojure.core.typed.test.update", :name "simple-env+", :file "clojure/core/typed/test/update.clj", :column 1, :line 32, :test #<update$fn__20271 clojure.core.typed.test.update$fn__20271@74e7eca3>}