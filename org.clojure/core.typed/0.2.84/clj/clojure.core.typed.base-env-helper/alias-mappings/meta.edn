{:type :macro, :src "(defmacro alias-mappings [& args]\n  `(impl/with-clojure-impl\n     (let [ts# (qualify-in-cct '~args)]\n       (into {}\n             (doall\n               (for [[s# t#] ts#]\n                 (let [meta# (-> s# meta)\n                       desc# (:doc meta#)\n                       doc# (str #_\"Type Alias\\n\\n\"\n                                 (when desc#\n                                   (str desc# \"\\n\\n\")) \n                                 (with-out-str (pprint/pprint t#)))\n                       _# (assert (and (symbol? s#)\n                                       (namespace s#))\n                                  \"Need fully qualified symbol\")\n                       v# (intern (find-ns (symbol (namespace s#))) (symbol (name s#)))\n                       _# (alter-meta! v# merge (assoc meta# :doc doc#))]\n                   [(with-meta s# nil) (prs/parse-type t#)])))))))", :macro true, :ns "clojure.core.typed.base-env-helper", :name "alias-mappings", :file "clojure/core/typed/base_env_helper.clj", :column 1, :line 25, :arglists ([& args])}