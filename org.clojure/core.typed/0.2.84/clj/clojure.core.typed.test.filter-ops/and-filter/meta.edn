{:type :fn, :src "(deftest and-filter\n  (is (= (-and -top)\n         -top))\n  (is (= (-and -top -top)\n         -top))\n  (is (= (-and -bot -bot)\n         -bot))\n  (is (= (-and -top -bot)\n         -bot))\n  (clj\n    (let [f (-filter (parse-type `t/Num) 'x)]\n      (is (= (-and f)\n             f))\n      (is (= (-and f -top)\n             f))))\n  (is-clj \n    (let [pf (-filter (parse-type `t/NonEmptyCount) 0)\n          nf (-not-filter (parse-type nil) 0)]\n      (= (-and pf nf)\n         (make-AndFilter pf nf))))\n  (is-clj\n    (subtype-type-filter? (-and (-filter (parse-type `(t/U nil (t/NonEmptyVec t/Num))) 0)\n                                (-filter (parse-type `(t/U nil t/EmptyCount)) 0))\n                          (-filter (parse-type `nil) 0))))", :ns "clojure.core.typed.test.filter-ops", :name "and-filter", :file "clojure/core/typed/test/filter_ops.clj", :column 1, :line 16, :test #<filter_ops$fn__18019 clojure.core.typed.test.filter_ops$fn__18019@7382a6e9>}