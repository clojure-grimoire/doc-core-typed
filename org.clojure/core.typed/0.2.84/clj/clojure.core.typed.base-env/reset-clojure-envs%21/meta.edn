{:type :fn, :src "(defn reset-clojure-envs! []\n  (impl/with-clojure-impl\n    (reset-alias-env!)\n    ((v 'clojure.core.typed.var-env/reset-var-type-env!)\n     (init-var-env) \n     (init-var-nochecks))\n    ((v 'clojure.core.typed.method-return-nilables/reset-nonnilable-method-return-env!) \n     (init-method-nonnilable-return-env))\n    ((v 'clojure.core.typed.method-param-nilables/reset-method-nilable-param-env!)\n     (init-method-nilable-param-env))\n    ((v 'clojure.core.typed.method-override-env/reset-method-override-env!)\n     (init-method-override-env))\n    ((v 'clojure.core.typed.ctor-override-env/reset-constructor-override-env!) \n     (init-ctor-override-env))\n    ((v 'clojure.core.typed.protocol-env/reset-protocol-env!) \n     (init-protocol-env))\n    (base-rclass/reset-rclass-env!)\n    ((v 'clojure.core.typed.declared-kind-env/reset-declared-kinds!) \n     (init-declared-kinds))\n    ((v 'clojure.core.typed.datatype-env/reset-datatype-env!) \n     (init-datatype-env))\n    ((v 'clojure.core.typed.datatype-ancestor-env/reset-datatype-ancestors!)\n     (init-datatype-ancestor-env)))\n  nil)", :ns "clojure.core.typed.base-env", :name "reset-clojure-envs!", :file "clojure/core/typed/base_env.clj", :column 1, :line 1810, :arglists ([])}