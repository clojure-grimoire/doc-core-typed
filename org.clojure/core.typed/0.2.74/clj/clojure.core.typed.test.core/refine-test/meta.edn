{:type :fn, :src "(deftest refine-test\n  (is-clj (= (tc-t \n           (clojure.core.typed/fn [a :- (U (HMap :mandatory {:op (Value :if)})\n                                            (HMap :mandatory {:op (Value :var)}))]\n                           (when (= (:op a) :if) \n                             a)))\n         (ret (make-FnIntersection\n                (Function-maker\n                    [(Un (make-HMap :mandatory {(-val :op) (-val :if)})\n                         (make-HMap :mandatory {(-val :op) (-val :var)}))]\n                    (make-Result (Un -nil (make-HMap :mandatory {(-val :op) (-val :if)}))\n                                 (-FS (-and (-filter (-val :if) 0 [(-kpe :op)])\n                                            (-not-filter (Un -false -nil) 0)\n                                            (-filter (make-HMap :mandatory {(-val :op) (-val :if)}) 0))\n                                           ; what are these filters doing here?\n                                      (-or (-and (-filter (-val :if) 0 [(-kpe :op)])\n                                                 (-filter (Un -false -nil) 0))\n                                           (-not-filter (-val :if) 0 [(-kpe :op)])))\n                                 -empty)\n                    nil nil nil))\n              (-FS -top -bot)\n              -empty))))", :ns "clojure.core.typed.test.core", :name "refine-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 310, :test #<core$fn__25248 clojure.core.typed.test.core$fn__25248@35d0a41c>}