{:type :fn, :src "(deftest keys-vals-update-test\n  (is-clj (both-subtype? \n            (update (RClass-of IPersistentMap [-any -any])\n                    (-filter (RClass-of Seqable [(RClass-of Number)])\n                             'a [(KeysPE-maker)]))\n            (RClass-of IPersistentMap [(RClass-of Number) -any])))\n  ; test with = instead of subtype to catch erroneous downcast to (IPersistentMap clojure.core.typed/Nothing clojure.core.typed/Any)\n  (is-clj (both-subtype?\n            (-> \n              (tc-t (let [m (clojure.core.typed/ann-form {} (clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any))]\n                      (assert (every? number? (keys m)))\n                      m))\n              ret-t)\n            (parse-type `(clojure.lang.IPersistentMap Number Any))))\n  (is-clj (both-subtype? \n            (-> (tc-t (let [m (clojure.core.typed/ann-form {} (clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any))]\n                        (assert (every? number? (keys m)))\n                        (assert (every? number? (vals m)))\n                        m))\n                ret-t)\n            (parse-type `(clojure.lang.IPersistentMap Number Number))))\n  (is-cf (fn [m]\n            {:pre [(every? number? (vals m))]}\n            m)\n          [(clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any) -> (clojure.lang.IPersistentMap clojure.core.typed/Any Number)])\n  (is-cf (fn [m]\n            {:pre [(every? symbol? (keys m))\n                   (every? number? (vals m))]}\n            m)\n          [(clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any) -> (clojure.lang.IPersistentMap clojure.lang.Symbol Number)]))", :ns "clojure.core.typed.test.core", :name "keys-vals-update-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 1436, :test #<core$fn__27855 clojure.core.typed.test.core$fn__27855@683c535d>}