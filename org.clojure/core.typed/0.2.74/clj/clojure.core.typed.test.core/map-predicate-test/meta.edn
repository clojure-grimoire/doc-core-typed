{:type :fn, :src "(deftest map-predicate-test\n  (is-tc-e (fn [a] (number? (:k a)))\n           (Pred (HMap :mandatory {:k Number})))\n  ; integer check is not sufficient\n  (is-tc-err (fn [a] (integer? (:k a)))\n             (Pred (HMap :mandatory {:k Number})))\n  ; wrong key\n  (is-tc-err (fn [a] (number? (:wrong-key a)))\n             (Pred (HMap :mandatory {:k Number})))\n  (is \n    (sub?-q\n      `(IFn [Any :-> Boolean \n             :filters {:then (~'is Number 0 [(~'Key :k)]), \n                       :else (~'! Number 0 [(~'Key :k)])}])\n      `(Pred (HMap :mandatory {:k Number}))))\n\n  (is\n    (not\n      (sub?-q\n        `(IFn [Any :-> Boolean \n               :filters {:then (~'is Long 0 [(~'Key :k)]), \n                         :else (~'! Long 0 [(~'Key :k)])}])\n        `(Pred (HMap :mandatory {:k Number})))))\n\n  (is-clj \n    (sub/subtype-type-filter?\n      (parse-filter `(~'is Number 0 [(~'Key :k)]))\n      (parse-filter `(~'is (HMap :mandatory {:k Number}) 0))))\n\n  (is-clj \n    (sub/subtype-not-type-filter?\n      (parse-filter `(~'! Number 0 [(~'Key :k)]))\n      (parse-filter `(~'! (HMap :mandatory {:k Number}) 0)))))", :ns "clojure.core.typed.test.core", :name "map-predicate-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 2597, :test #<core$fn__30707 clojure.core.typed.test.core$fn__30707@19757394>}