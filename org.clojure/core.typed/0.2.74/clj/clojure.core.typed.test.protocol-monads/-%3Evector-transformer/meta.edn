{:type :fn, :src "(deftype vector-transformer [m v]\n  clojure.lang.IDeref\n  (deref [_]\n    v)\n\n  Monad\n  (do-result [_ v]\n    (vector-transformer. m (m (vector v))))\n  (bind [mv f]\n    (let [v (deref mv)]\n      (vector-transformer. m (bind v (fn [xs]\n                                       (if (clojure.core/seq xs)\n                                         (->> xs\n                                              (map (comp deref f))\n                                              (fmap (partial apply lazy-concat)))\n                                         (m [])))))))\n\n  MonadZero\n  (zero [_]\n    (vector-transformer. m (m [])))\n  (plus-step [mv mvs]\n    (vector-transformer.\n     m (reduce (lift (comp vec concat))\n               (m [])\n               (clojure.core/map deref (cons mv mvs))))))", :ns "clojure.core.typed.test.protocol-monads", :name "->vector-transformer", :file "clojure/core/typed/test/protocol_monads.clj", :column 1, :line 527, :arglists ([m v]), :doc "Positional factory function for class clojure.core.typed.test.protocol_monads.vector-transformer."}