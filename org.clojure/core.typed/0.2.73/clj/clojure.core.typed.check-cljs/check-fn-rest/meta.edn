{:type :fn, :src "(defn check-fn-rest [rest drest kws]\n  {:pre [(or (r/Type? rest)\n             (r/DottedPretype? drest)\n             (r/KwArgs? kws))\n         (#{1} (count (filter identity [rest drest kws])))]\n   :post [(r/Type? %)]}\n  ;(prn \"rest\" rest)\n  ;(prn \"drest\" drest)\n  ;(prn \"kws\" kws)\n  (cond\n    (or rest drest)\n    (c/Un r/-nil \n          ; only difference to Clojure impl\n          (r/TApp-maker (r/Name-maker 'cljs.core.typed/NonEmptySeq)\n                        [(or rest (:pre-type drest))]))\n    :else (c/KwArgs->Type kws)))", :ns "clojure.core.typed.check-cljs", :name "check-fn-rest", :file "clojure/core/typed/check_cljs.clj", :column 1, :line 236, :arglists ([rest drest kws])}