{:type :fn, :src "(defn check-monitor\n  \"monitor-enter and monitor-exit both take any object and return nil\"\n  [check {:keys [target] :as expr} expected]\n  {:pre [(or (nil? expected) (r/TCResult? expected))]}\n  ; We're going to return nil\n  (let [t (r/ret r/-nil)]\n    ; We need to verify that returning nil is OK; e.g. we expect nil.\n    (when (r/TCResult? expected)\n      (when-not (sub/subtype? t (r/ret-t expected))\n        (cu/expected-error t (r/ret-t expected))))\n\n    (assoc expr\n           :target (check target (r/ret (c/RClass-of Object)))\n           u/expr-type (r/ret r/-nil))))", :ns "clojure.core.typed.check.monitor", :name "check-monitor", :file "clojure/core/typed/check/monitor.clj", :column 1, :line 8, :arglists ([check {:keys [target], :as expr} expected]), :doc "monitor-enter and monitor-exit both take any object and return nil"}