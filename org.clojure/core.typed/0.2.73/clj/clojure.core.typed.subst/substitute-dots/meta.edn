{:type :fn, :src "(defn substitute-dots [images rimage name target]\n  {:pre [(every? r/AnyType? images)\n         ((some-fn nil? r/AnyType?) rimage)\n         (symbol? name)\n         (r/AnyType? target)]}\n  ;(prn \"substitute-dots\" (unparse-type target) name \"->\" (map unparse-type images))\n  (letfn [(sb [t] (substitute-dots images rimage name t))]\n    (if (or ((frees/fi target) name)\n            ((frees/fv target) name))\n      (f/fold-rhs ::substitute-dots \n                {:type-rec sb\n                 :filter-rec (f/sub-f sb ::substitute-dots)\n                 :locals {:name name\n                          :sb sb\n                          :images images\n                          :rimage rimage}}\n                target)\n      target)))", :ns "clojure.core.typed.subst", :name "substitute-dots", :file "clojure/core/typed/subst.clj", :column 1, :line 140, :arglists ([images rimage name target])}