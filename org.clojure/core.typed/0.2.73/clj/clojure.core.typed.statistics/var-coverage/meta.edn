{:type :fn, :src "(defn var-coverage\n  ([nsyms-or-nsym]\n   (assert (or (con/namespace? nsyms-or-nsym)\n               (symbol? nsyms-or-nsym)\n               (and (coll? nsyms-or-nsym) (every? symbol? nsyms-or-nsym)))\n           \"Must pass a collection of symbols or a symbol/namespace to var-coverage\")\n   (let [nsyms (if ((some-fn symbol? con/namespace?)\n                    nsyms-or-nsym)\n                 [(ns-name nsyms-or-nsym)]\n                 nsyms-or-nsym)\n         stats (statistics nsyms)\n         nall-vars (->> (vals stats) \n                        (map :vars) \n                        (map :all-vars)\n                        (apply set/union)\n                        set\n                        count)\n         nannotated-vars (->> (vals stats) \n                              (map :vars) \n                              (map :var-annotations) \n                              (map count)\n                              (apply +))\n         perc (if (zero? nall-vars)\n                0\n                (long (* (/ nannotated-vars nall-vars) 100)))]\n     (println (str \"Found \" nannotated-vars \" annotated vars out of \" nall-vars \" vars\"))\n     (println (str perc \"% var annotation coverage\"))\n     (flush))))", :ns "clojure.core.typed.statistics", :name "var-coverage", :file "clojure/core/typed/statistics.clj", :column 1, :line 47, :arglists ([nsyms-or-nsym])}