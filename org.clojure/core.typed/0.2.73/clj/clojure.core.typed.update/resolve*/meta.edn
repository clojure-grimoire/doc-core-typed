{:type :fn, :src "(defn resolve* [atoms prop]\n  {:pre [(every? fl/Filter? atoms)\n         (fl/Filter? prop)]\n   :post [(fl/Filter? %)]}\n  (reduce (fn [prop a]\n            (cond\n              (fl/AndFilter? a)\n              (loop [ps (:fs a)\n                     result []]\n                (if (empty? ps)\n                  (apply fo/-and result)\n                  (let [p (first ps)]\n                    (cond\n                      (fo/opposite? a p) fl/-bot\n                      (fo/implied-atomic? p a) (recur (next ps) result)\n                      :else (recur (next ps) (cons p result))))))\n              :else prop))\n          prop\n          atoms))", :ns "clojure.core.typed.update", :name "resolve*", :file "clojure/core/typed/update.clj", :column 1, :line 22, :arglists ([atoms prop])}