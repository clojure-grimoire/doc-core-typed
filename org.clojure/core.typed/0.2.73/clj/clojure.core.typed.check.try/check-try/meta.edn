{:type :fn, :src "(defn check-try [check {:keys [body catches finally] :as expr} expected]\n  (let [chk #(check % expected)\n        cbody (chk body)\n        ccatches (mapv chk catches)\n        ; finally result is thrown away\n        cfinally (when finally\n                   (check finally))]\n    (assoc expr\n           :body cbody\n           :catches ccatches\n           :finally cfinally\n           u/expr-type (binding [vs/*current-expr* expr]\n                         (below/maybe-check-below\n                           (combine-rets\n                             (map u/expr-type (concat [cbody] ccatches)))\n                           expected)))))", :ns "clojure.core.typed.check.try", :name "check-try", :file "clojure/core/typed/check/try.clj", :column 1, :line 23, :arglists ([check {:keys [body catches finally], :as expr} expected])}