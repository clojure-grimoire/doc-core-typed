{:type :fn, :src "(defn check-letfn [bindings body letfn-expr expected check-fn-letfn]\n  (let [inits-expected\n        ;try and find annotations, and throw a delayed error if not found\n        ;(this expression returns nil)\n        (when (#{:map} (-> body :statements first :op))\n          (into {}\n                (for [[lb-expr type-syn-expr] \n                      (map vector \n                           (-> body :statements first :keys)\n                           (-> body :statements first :vals))]\n                  (impl/impl-case\n                    :clojure (do\n                               (assert (#{:local} (:op lb-expr)))\n                               [(-> lb-expr :name)\n                                (binding [prs/*parse-type-in-ns* (cu/expr-ns letfn-expr)]\n                                  (prs/parse-type (ast-u/constant-expr type-syn-expr)))])\n                    :cljs [(-> lb-expr :info :name)\n                           (binding [prs/*parse-type-in-ns* (cu/expr-ns letfn-expr)]\n                             (prs/parse-type (:form type-syn-expr)))]))))]\n    (if-not inits-expected\n      (err/tc-delayed-error (str \"letfn requires annotation, see: \"\n                               (impl/impl-case :clojure 'clojure :cljs 'cljs) \".core.typed/letfn>\")\n                          :return (assoc letfn-expr\n                                         u/expr-type (cu/error-ret expected)))\n\n      (let [cbinding-inits\n            (lex/with-locals inits-expected\n              (vec\n                (for [{:keys [name init] :as b} bindings]\n                  (let [expected-fn (inits-expected name)\n                        _ (assert expected-fn (str \"No expected type for \" name))\n                        cinit (check-fn-letfn init (r/ret expected-fn))]\n                    (assoc b\n                           :init cinit\n                           u/expr-type (u/expr-type cinit))))))\n\n            cbody (lex/with-locals inits-expected\n                    (check-fn-letfn body expected))]\n        (assoc letfn-expr\n               :bindings cbinding-inits\n               :body cbody\n               u/expr-type (u/expr-type cbody))))))", :ns "clojure.core.typed.check.letfn", :name "check-letfn", :file "clojure/core/typed/check/letfn.clj", :column 1, :line 12, :arglists ([bindings body letfn-expr expected check-fn-letfn])}