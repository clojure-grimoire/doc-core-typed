{:type :fn, :src "(deftest subtype-filter-test\n  (testing \"top and bot\"\n    (is (sub/subtype-filter? -top -top))\n    (is (sub/subtype-filter? -bot -top))\n    (is (sub/subtype-filter? -bot -bot))\n    (is (not (sub/subtype-filter? -top -bot))))\n  (testing \"this simplifies to top\"\n    (is (= (-filter -any 'a) -top)))\n  (testing \"this doesn't simplify to top\"\n    (is (not= (-filter -true 'a) -top)))\n  (testing \"combine type-filter and top/bot\"\n    (is (sub/subtype-filter? (-filter -true 'a) -top))\n    (is (sub/subtype-filter? -bot (-filter -true 'a)))\n    (is (not (sub/subtype-filter? -top (-filter -true 'a))))\n    (is (not (sub/subtype-filter? (-filter -true 'a) -bot))))\n  (testing \"simple type-filters\"\n    (is-clj (sub/subtype-filter? (-filter -true 'a) (-filter -true 'a)))\n    (testing \"different types, that are subtypes\"\n      (is-clj (sub/subtype-filter? (-filter -false 'a) (-filter (parse-clj `Boolean) 'a)))\n      (is-clj (sub/subtype-filter? (-filter -false 'a [(-kpe :a)]) (-filter (parse-clj `Boolean) 'a [(-kpe :a)]))))\n    (testing \"different types, not subtypes\"\n      (is-clj (not (sub/subtype-filter? (-filter -false 'a) (-filter -true 'a))))\n      (is-clj (not (sub/subtype-filter? (-filter -false 'a [(-kpe :a)]) \n                                        (-filter -true 'a [(-kpe :a)])))))\n    (testing \"different paths, but types happen to be subtypes (still should fail)\"\n      (is-clj (not (sub/subtype-filter? (-filter -true 'a) (-filter -true 'b))))\n      (is-clj (not (sub/subtype-filter? (-filter -false 'a) (-filter (parse-clj `Boolean) 'b))))\n      (is-clj (not (sub/subtype-filter? (-filter -false 'a) (-filter (parse-clj `Boolean) 'a [(-kpe :a)])))))\n    )\n  (testing \"or filter\"\n    (is-clj (sub/subtype-filter? (-filter -true 'a) (-or (-filter -true 'a) (-filter -false 'b))))\n    (is-clj (not (sub/subtype-filter? (-filter -false 'a) (-or (-filter -true 'a) (-filter -false 'b)))))\n    (is-clj (not (sub/subtype-filter? (-or (-filter -true 'a) (-filter -false 'b)) (-filter -true 'a))))\n    (is-clj (sub/subtype-filter? (-or (-filter -true 'a) (-filter -false 'b)) (-or (-filter -true 'a) (-filter -false 'b))))\n    (is-clj (sub/subtype-filter? (-or (-filter -true 'a) (-filter -false 'b)) \n                                 (-or (-filter (parse-clj `Boolean) 'a) (-filter (parse-clj `Boolean) 'b))))\n    (is-clj (not\n              (sub/subtype-filter? (-or (-filter (parse-clj `Boolean) 'a) (-filter (parse-clj `Boolean) 'b))\n                                   (-or (-filter -true 'a) (-filter -false 'b))))))\n  (testing \"and filter\"\n    (is-clj (not\n              (sub/subtype-filter? (-filter -true 'a) \n                                   (-and (-filter -true 'a) (-filter -false 'b)))))\n    (is-clj (sub/subtype-filter? (-and (-filter -true 'a) (-filter -false 'b))\n                                 (-filter -true 'a)))\n    (is-clj (not\n              (sub/subtype-filter? (-and (-filter (parse-clj `Boolean) 'a) (-filter (parse-clj `Boolean) 'b))\n                                   (-and (-filter -true 'a) (-filter -false 'b)))))\n    (is-clj (sub/subtype-filter? (-and (-filter -true 'a) (-filter -false 'b))\n                                 (-and (-filter (parse-clj `Boolean) 'a) (-filter (parse-clj `Boolean) 'b))))\n    )\n  )", :ns "clojure.core.typed.test.core", :name "subtype-filter-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 4348, :test #<core$fn__36862 clojure.core.typed.test.core$fn__36862@3eca8a90>}