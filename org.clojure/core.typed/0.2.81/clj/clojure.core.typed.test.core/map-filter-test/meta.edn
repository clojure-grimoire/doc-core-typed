{:type :fn, :src "(deftest map-filter-test\n  (is-tc-e \n    (ann-form (fn [a] (:op a))\n              [(U '{:op ':if} '{:op ':case})\n               -> (U ':if ':case)\n               :filters {:then (is (U ':case ':if) 0 [(Key :op)])\n                         :else (| (is (HMap :absent-keys #{:op}) 0)\n                                  (is (U false nil) 0 [(Key :op)]))}\n               :object {:id 0\n                        :path [(Key :op)]}]))\n  ; {:then (is :if 0 [:op])\n  ;  :else (| (! :if 0 [:op])\n  ;           (is (HMap :absent-keys #{:op}) 0))}\n  (is-tc-e #(= :if (:op %))\n           [(U '{:op ':if} '{:op ':case})\n            -> Boolean\n            :filters {:then (& (is '{:op (Value :if)} 0)\n                               (is ':if 0 [(Key :op)]))\n                      :else (! ':if 0 [(Key :op)])}])\n  (is-tc-e (fn [a :- (U '{:op ':if} '{:op ':case})\n                b :- (U '{:op ':if} '{:op ':case})]\n             (if (= :if (:op a))\n               (= :case (:op b))\n               false)))\n  (is-tc-e (fn [a b] \n             (let [and__3941__auto__ (clojure.core/symbol? a)] \n               (if (print-filterset \"test\" and__3941__auto__)\n                 (clojure.core/number? b) \n                 and__3941__auto__)))))", :ns "clojure.core.typed.test.core", :name "map-filter-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 1459, :test #<core$fn__27755 clojure.core.typed.test.core$fn__27755@14f7ab17>}