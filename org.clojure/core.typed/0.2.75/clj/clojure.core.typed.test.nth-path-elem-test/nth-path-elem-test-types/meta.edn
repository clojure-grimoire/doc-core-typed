{:type :fn, :src "(deftest nth-path-elem-test-types\n  (testing \"HVec\"\n    (is-tc-e\n     (do\n       (defalias StatementA (HVec [':params String]))\n       (defalias StatementB (HVec [':no-params]))\n       (defalias Statement (U StatementA StatementB))\n       (fn [stmt :- Statement] :- Any\n         (if (= :params (first stmt))\n           (ann-form stmt StatementA))))))\n\n  (testing \"HSeq\"\n    (is-tc-e\n     (do\n       (defalias StatementA (HSeq [':params String]))\n       (defalias StatementB (HSeq [':no-params]))\n       (defalias Statement (U StatementA StatementB))\n       (fn [stmt :- Statement] :- Any\n         (if (= :params (first stmt))\n           (ann-form stmt StatementA))))))\n\n  (testing \"HSequential\"\n    (is-tc-e\n     (do\n       (defalias StatementA (HSequential [':params String]))\n       (defalias StatementB (HSequential [':no-params]))\n       (defalias Statement (U StatementA StatementB))\n       (fn [stmt :- Statement] :- Any\n         (if (= :params (first stmt))\n           (ann-form stmt StatementA))))))\n\n  (testing \"a mixture of types\"\n    (is-tc-e\n     (do\n       (defalias StatementA (HSeq [':params String]))\n       (defalias StatementB (HVec [':no-params]))\n       (defalias Statement (U StatementA StatementB))\n       (fn [stmt :- Statement] :- Any\n         (if (= :params (first stmt))\n           (ann-form stmt StatementA)))))))", :ns "clojure.core.typed.test.nth-path-elem-test", :name "nth-path-elem-test-types", :file "clojure/core/typed/test/nth_path_elem_test.clj", :column 1, :line 79, :test #<nth_path_elem_test$fn__21337 clojure.core.typed.test.nth_path_elem_test$fn__21337@52253f58>}