{:type :fn, :src "(deftest subtype-rec\n  (is-clj (sub?-q `t/Int\n                  `(t/Rec [x#] (t/U t/Int (t/Seqable x#)))))\n  (is-clj (sub?-q `(t/Seqable (t/Seqable t/Int))\n                  `(t/Rec [x#] (t/U t/Int (t/Seqable x#)))))\n  (is-clj (not (sub?-q `t/Num\n                       `(t/Rec [x#] (t/U t/Int (t/Seqable x#))))))\n  (is-clj (sub?-q `'{:op ':if\n                     :test '{:op ':var\n                             :var (clojure.lang.Var t/Nothing t/Any)}\n                     :then '{:op ':nil}\n                     :else '{:op ':false}}\n                  `(t/Rec [x#] \n                          (t/U '{:op ':if\n                                 :test x#\n                                 :then x#\n                                 :else x#}\n                               '{:op ':var\n                                 :var (clojure.lang.Var clojure.core.typed/Nothing clojure.core.typed/Any)}\n                               '{:op ':nil}\n                               '{:op ':false}))))\n\n  (is-clj (sub?-q `(t/Rec [x#] (t/U Integer (clojure.lang.ILookup x# x#)))\n                  `(t/Rec [x#] (t/U Number (clojure.lang.ILookup x# x#))))))", :ns "clojure.core.typed.test.subtype", :name "subtype-rec", :file "clojure/core/typed/test/subtype.clj", :column 1, :line 65, :test #<subtype$fn__19699 clojure.core.typed.test.subtype$fn__19699@65d179be>}