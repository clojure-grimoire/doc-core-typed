{:type :macro, :src "(defmacro protocol-mappings [& args]\n  `(impl/with-cljs-impl\n     (let [ts# (partition 2 '~args)]\n       (into {}\n             (doall\n               (for [[n# [fields# & {:as opts#}]] ts#]\n                 (let [vs# (seq\n                             (for [[_# & {variance# :variance}] fields#]\n                               variance#))\n                       decl-kind# (declared-kind-for-protocol fields#)\n                       ;FIXME this is harder than it has to be\n                       ; add a Name so the methods can be parsed\n                       _# (nme-env/declare-protocol* n#)\n                       _# (when (r/TypeFn? decl-kind#)\n                            (decl-env/add-declared-kind n# decl-kind#))\n                       names# (when (seq fields#)\n                                (map first fields#))\n                       ; FIXME specify bounds\n                       bnds# (when (seq fields#)\n                               (repeat (count fields#) r/no-bounds))\n                       frees# (map r/make-F names#)\n                       methods# (free-ops/with-bounded-frees (zipmap frees# bnds#)\n                                  (into {}\n                                        (for [[mname# mtype#] (:methods opts#)]\n                                          [mname# (prs/parse-type mtype#)])))\n                       the-var# n#\n                       on-class# (c/Protocol-var->on-class the-var#)]\n                   (decl-env/remove-declared-kind n#)\n                   [n# (c/Protocol* names# vs# frees# the-var#\n                                    on-class# methods# bnds#)])))))))", :macro true, :ns "clojure.core.typed.base-env-helper-cljs", :name "protocol-mappings", :file "clojure/core/typed/base_env_helper_cljs.clj", :column 1, :line 63, :arglists ([& args])}