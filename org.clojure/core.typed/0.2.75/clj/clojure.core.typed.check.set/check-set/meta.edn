{:type :fn, :src "(defn check-set [check {:keys [items] :as expr} expected]\n  (let [cargs (mapv check items)\n        ts (map (comp c/fully-resolve-type r/ret-t u/expr-type) cargs)\n        res-type (if (every? r/Value? ts)\n                   (r/-hset (r/sorted-type-set ts))\n                   (impl/impl-case\n                     :clojure (c/RClass-of PersistentHashSet [(apply c/Un ts)])\n                     :cljs (c/Protocol-of 'cljs.core/ISet [(apply c/Un ts)])))]\n    (assoc expr\n           :items cargs\n           u/expr-type (binding [vs/*current-expr* expr]\n                         (below/maybe-check-below\n                           (r/ret res-type (fo/-true-filter))\n                           expected)))))", :ns "clojure.core.typed.check.set", :name "check-set", :file "clojure/core/typed/check/set.clj", :column 1, :line 13, :arglists ([check {:keys [items], :as expr} expected])}