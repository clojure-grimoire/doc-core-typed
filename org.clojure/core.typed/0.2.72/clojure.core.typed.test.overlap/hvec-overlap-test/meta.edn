{:type :fn, :src "(deftest hvec-overlap-test\n  (testing \"without rest types\"\n    (testing \"when the fixed types match\"\n      (is-clj\n       (overlap-prs\n        `(HVec [Num])\n        `(HVec [Num]))))\n\n    (testing \"when the fixed types differ\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num])\n         `(HVec [Str])))))\n\n    (testing \"with a differing number of fixed types\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num])\n         `(HVec [Num Str]))))))\n\n  (testing \"with one rest type\"\n    (testing \"when fixed types match\"\n      (is-clj\n       (overlap-prs\n        `(HVec [Num])\n        `(HVec [Num Str ~'*]))))\n\n    (testing \"when fixed types differ\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num])\n         `(HVec [Str Str ~'*])))))\n\n    (testing \"when the extra fixed types match the rest type\"\n      (is-clj\n       (overlap-prs\n        `(HVec [Num ~'*])\n        `(HVec [Num]))))\n\n    (testing \"when the extra fixed types differ from the rest type\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num ~'*])\n         `(HVec [Str])))))\n\n    (testing \"when the extra fixed types come from type with the rest type\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Str Str Str ~'*])\n         `(HVec [Str]))))))\n\n  (testing \"with two rest types\"\n    (testing \"when the rest types match\"\n      (is-clj\n       (overlap-prs\n        `(HVec [Num ~'*])\n        `(HVec [Num ~'*]))))\n\n    (testing \"when the rest types differ\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num ~'*])\n         `(HVec [Str ~'*])))))\n\n    (testing \"when the extra fixed types match the rest type of shorter\"\n      (is-clj\n       (overlap-prs\n        `(HVec [Num ~'*])\n        `(HVec [Num Num ~'*]))))\n\n    (testing \"when the extra fixed types differ from the rest type of shorter\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num ~'*])\n         `(HVec [Str Num ~'*])))))\n\n    (testing \"when the fixed types match\"\n      (is-clj\n       (overlap-prs\n        `(HVec [Num Str ~'*])\n        `(HVec [Num Str ~'*]))))\n\n    (testing \"when the fixed types differ\"\n      (is-clj\n       (not\n        (overlap-prs\n         `(HVec [Num Str ~'*])\n         `(HVec [Str Str ~'*])))))))", :ns "clojure.core.typed.test.overlap", :name "hvec-overlap-test", :file "clojure/core/typed/test/overlap.clj", :column 1, :line 40, :test #<overlap$fn__11833 clojure.core.typed.test.overlap$fn__11833@2b9ea20c>}