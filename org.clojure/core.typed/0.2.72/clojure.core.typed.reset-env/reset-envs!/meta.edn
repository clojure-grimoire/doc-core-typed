{:type :fn, :src "(defn reset-envs! \n  \"Reset all environments for all implementations. Cannot be called\n  if a specific implementation is currently bound\"\n  []\n  (let [cljs? (load-cljs?)]\n    (impl/impl-case\n      :clojure\n      (do (bse-clj/reset-clojure-envs!)\n          (mmenv/reset-mm-dispatch-env!)\n          (deps/reset-deps!)\n          (ns-opts/reset-ns-opts!))\n      :cljs\n      (do\n        (assert cljs? \"No ClojureScript dependency\")\n        (when cljs?\n          ((impl/v 'clojure.core.typed.base-env-cljs/reset-cljs-envs!))\n          (deps/reset-deps!)\n          (ns-opts/reset-ns-opts!))))\n    nil))", :ns "clojure.core.typed.reset-env", :name "reset-envs!", :file "clojure/core/typed/reset_env.clj", :column 1, :line 13, :arglists ([]), :doc "Reset all environments for all implementations. Cannot be called\n  if a specific implementation is currently bound"}