{:type :fn, :src "(defn simplify-type-filter [f]\n  {:pre [(fr/TypeFilter? f)]}\n  (let [[fpth & rstpth] (:path f)]\n    (cond \n      (empty? (:path f)) \n      f\n\n      (pth-rep/KeyPE? fpth)\n      (simplify-type-filter\n        (fops/-filter \n          (c/make-HMap :mandatory {(r/-val (:val fpth)) (:type f)})\n          (:id f)\n          rstpth))\n      :else f)))", :ns "clojure.core.typed.subtype", :name "simplify-type-filter", :file "clojure/core/typed/subtype.clj", :column 1, :line 1047, :arglists ([f])}