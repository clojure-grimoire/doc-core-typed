{:type :fn, :src "(defn fully-resolve-filter [fl]\n  {:pre [(fr/Filter? fl)]\n   :post [(fr/Filter? %)]}\n  (cond\n    (fr/TypeFilter? fl) (update-in fl [:type] c/fully-resolve-type)\n    (fr/NotTypeFilter? fl) (update-in fl [:type] c/fully-resolve-type)\n    (fr/AndFilter? fl) (update-in fl [:fs] #(set (map fully-resolve-filter %)))\n    (fr/OrFilter? fl) (update-in fl [:fs] #(set (map fully-resolve-filter %)))\n    (fr/ImpFilter? fl) (-> fl\n                           (update-in [:a] fully-resolve-filter)\n                           (update-in [:c] fully-resolve-filter))\n    :else fl))", :ns "clojure.core.typed.subtype", :name "fully-resolve-filter", :file "clojure/core/typed/subtype.clj", :column 1, :line 1034, :arglists ([fl])}