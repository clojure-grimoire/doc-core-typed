{:type :fn, :src "(defn subtype-filter-set? [f1 f2]\n  {:pre [(fr/FilterSet? f1)\n         (fr/FilterSet? f2)]}\n  (boolean\n    (or (= f2 (fops/-FS fr/-top fr/-top))\n        (letfn [(sub-helper [f1 f2 pred field sub?]\n                  (when (every? pred (map field [f1 f2]))\n                    (sub? (field f1) (field f2))))]\n          (or\n            (and (sub-helper f1 f2 fr/TypeFilter? :then subtype-type-filter?)\n                 (sub-helper f1 f2 fr/TypeFilter? :else subtype-not-type-filter?))\n            (and (sub-helper f1 f2 fr/TypeFilter? :then subtype-type-filter?)\n                 (sub-helper f1 f2 fr/NotTypeFilter? :else subtype-not-type-filter?))\n            (and (sub-helper f1 f2 fr/NotTypeFilter? :then subtype-not-type-filter?)\n                 (sub-helper f1 f2 fr/NotTypeFilter? :else subtype-not-type-filter?))\n            (and (sub-helper f1 f2 fr/NotTypeFilter? :then subtype-not-type-filter?)\n                 (sub-helper f1 f2 fr/TypeFilter? :else subtype-type-filter?)))))))", :ns "clojure.core.typed.subtype", :name "subtype-filter-set?", :file "clojure/core/typed/subtype.clj", :column 1, :line 1097, :arglists ([f1 f2])}