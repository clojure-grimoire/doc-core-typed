{:type :fn, :src "(defn simplify-not-type-filter [f]\n  {:pre [(fr/NotTypeFilter? f)]}\n  (let [[fpth & rstpth] (:path f)]\n    (cond \n      (empty? (:path f)) \n      f\n\n      (pth-rep/KeyPE? fpth)\n      (simplify-not-type-filter\n        (fops/-not-filter \n          ; keys is optional\n          (c/make-HMap \n            :optional {(r/-val (:val fpth)) (:type f)})\n          (:id f)\n          rstpth))\n      :else f)))", :ns "clojure.core.typed.subtype", :name "simplify-not-type-filter", :file "clojure/core/typed/subtype.clj", :column 1, :line 1071, :arglists ([f])}