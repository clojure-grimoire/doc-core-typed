{:type :fn, :src "(defn protocol-extenders [^Protocol p]\n  {:pre [(r/Protocol? p)]\n   :post [(every? r/Type? %)]}\n  (u/p :subtype/protocol-extenders\n  (impl/impl-case\n    :clojure (let [exts (c/Protocol-normal-extenders p)]\n               (for [ext exts]\n                 (cond\n                   (class? ext) (c/RClass-of-with-unknown-params ext)\n                   (nil? ext) r/-nil\n                   :else (throw (Exception. (str \"What is this?\" ext))))))\n    :cljs (let [exts ((impl/v 'clojure.core.typed.analyze-cljs/extenders) (:the-var p))]\n            (for [ext exts]\n              (cond\n                (symbol? ext) (resolve-JS-reference ext)\n                (nil? ext) r/-nil\n                :else (throw (Exception. (str \"What is this?\" ext))))))))\n  )", :ns "clojure.core.typed.subtype", :name "protocol-extenders", :file "clojure/core/typed/subtype.clj", :column 1, :line 886, :arglists ([p])}