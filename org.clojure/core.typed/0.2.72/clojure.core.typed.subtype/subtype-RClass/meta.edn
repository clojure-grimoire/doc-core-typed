{:type :fn, :src "(defn subtype-RClass\n  [{polyl? :poly? :as s}\n   {polyr? :poly? :as t}]\n  (impl/assert-clojure)\n  (let [scls (r/RClass->Class s)\n        tcls (r/RClass->Class t)]\n    ;(prn \"subtype RClass\" (prs/unparse-type s) (prs/unparse-type t))\n    (cond\n      (or\n        ; use java subclassing\n        (and (empty? polyl?)\n             (empty? polyr?)\n             (class-isa? scls tcls))\n\n        ;same base class\n        (and (= scls tcls)\n             (subtype-RClass-common-base s t))\n\n        ;one is a primitive, coerce\n        (and (or (.isPrimitive scls)\n                 (.isPrimitive tcls))\n             (coerce-RClass-primitive s t))\n\n        ;find a supertype of s that is the same base as t, and subtype of it\n        (some #(when (r/RClass? %)\n                 (and (= (:the-class t) (:the-class %))\n                      (subtype-RClass-common-base % t)))\n              (map c/fully-resolve-type (c/RClass-supers* s))))\n      *sub-current-seen*\n\n      ;try each ancestor\n\n      :else (fail! s t))))", :ns "clojure.core.typed.subtype", :name "subtype-RClass", :file "clojure/core/typed/subtype.clj", :column 1, :line 1405, :arglists ([{polyl? :poly?, :as s} {polyr? :poly?, :as t}])}