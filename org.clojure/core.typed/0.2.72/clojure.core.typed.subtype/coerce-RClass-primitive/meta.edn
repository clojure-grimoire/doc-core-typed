{:type :fn, :src "(defn coerce-RClass-primitive\n  [s t]\n  (impl/assert-clojure)\n  (cond\n    ; (U Integer Long) <: (U int long)\n    (and \n      (#{(c/RClass-of Integer) (c/RClass-of Long)} s)\n      (#{(c/RClass-of 'int) (c/RClass-of 'long)} t))\n    true\n\n    :else\n    (let [spcls (coerce/symbol->Class (:the-class s))\n          tpcls (coerce/symbol->Class (:the-class t))\n          scls (or (boxed-primitives spcls)\n                   spcls)\n          tcls (or (boxed-primitives tpcls)\n                   tpcls)]\n      (class-isa? scls tcls))))", :ns "clojure.core.typed.subtype", :name "coerce-RClass-primitive", :file "clojure/core/typed/subtype.clj", :column 1, :line 1386, :arglists ([s t])}