{:type :fn, :src "(defn subtype-TypeFn\n  [S T]\n  {:pre [(r/TypeFn? S)\n         (r/TypeFn? T)]}\n  (let [;instantiate both type functions with the same names\n        names (repeatedly (:nbound S) gensym)\n        sbnds (c/TypeFn-bbnds* names S)\n        tbnds (c/TypeFn-bbnds* names T)\n        sbody (c/TypeFn-body* names S)\n        tbody (c/TypeFn-body* names T)]\n    (if (and (= (:nbound S) (:nbound T))\n             (= (:variances S) (:variances T))\n             (every? identity\n                     (map (fn [lbnd rbnd]\n                            (and (subtype? (:upper-bound lbnd) (:upper-bound rbnd))\n                                 (subtype? (:lower-bound rbnd) (:lower-bound lbnd))\n                                 (subtype? (:lower-bound lbnd) (:upper-bound lbnd))\n                                 (subtype? (:lower-bound rbnd) (:upper-bound rbnd))))\n                          sbnds tbnds))\n             (subtype? sbody tbody))\n      *sub-current-seen*\n      (fail! S T))))", :ns "clojure.core.typed.subtype", :name "subtype-TypeFn", :file "clojure/core/typed/subtype.clj", :column 1, :line 1179, :arglists ([S T])}