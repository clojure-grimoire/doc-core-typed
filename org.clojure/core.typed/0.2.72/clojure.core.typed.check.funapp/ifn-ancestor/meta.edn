{:type :fn, :src "(defn ifn-ancestor \n  \"If this type can be treated like a function, return one of its\n  possibly polymorphic function ancestors.\n  \n  Assumes the type is not a union\"\n  [t]\n  {:pre [(r/Type? t)]\n   :post [((some-fn nil? r/Type?) %)]}\n  (let [t (c/fully-resolve-type t)]\n    (cond\n      (r/RClass? t)\n      (first (filter (some-fn r/Poly? r/FnIntersection?) (c/RClass-supers* t)))\n      ;handle other types here\n      )))", :ns "clojure.core.typed.check.funapp", :name "ifn-ancestor", :file "clojure/core/typed/check/funapp.clj", :column 1, :line 28, :arglists ([t]), :doc "If this type can be treated like a function, return one of its\n  possibly polymorphic function ancestors.\n  \n  Assumes the type is not a union"}