{:type :fn, :src "(defn extend-many\n  \"Extends env with vars. If fresh-vars are provided, the vars will map to them\n  pairwise in the resulting environment.\"\n  ([env vars] (extend-many env vars nil))\n  ([env vars fresh-vars]\n   {:post [(tvar-env? %)]}\n   (let [fresh-vars (or fresh-vars (repeat (count vars) nil))\n         _ (assert (= (count vars) (count fresh-vars)))]\n     (reduce (fn [env [var fresh-var]]\n               {:pre [(symbol? var)\n                      ((some-fn nil? symbol?) fresh-var)]}\n               (extend-one env var fresh-var))\n             env\n             (map vector vars fresh-vars)))))", :ns "clojure.core.typed.tvar-env", :name "extend-many", :file "clojure/core/typed/tvar_env.clj", :column 1, :line 77, :arglists ([env vars] [env vars fresh-vars]), :doc "Extends env with vars. If fresh-vars are provided, the vars will map to them\n  pairwise in the resulting environment."}