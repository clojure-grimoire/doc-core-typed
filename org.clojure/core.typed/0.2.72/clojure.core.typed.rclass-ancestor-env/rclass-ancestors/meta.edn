{:type :fn, :src "(defn rclass-ancestors [{poly :poly?, rsym :the-class, :as rcls}]\n  {:pre [(r/RClass? rcls)]\n   :post [((con/sorted-set-c? r/Type?) %)]}\n  (let [names (repeatedly (count poly) #(gensym \"unchecked-ancestor\"))\n        fs (map r/make-F names)\n        abstract-as (get-in @RCLASS-ANCESTORS-ENV [rsym :ancestors])]\n    (r/sorted-type-set\n      (for [u abstract-as]\n        (let [t (c/instantiate-many names u)\n              subst (c/make-simple-substitution names poly)]\n          (subst/subst-all subst t))))))", :ns "clojure.core.typed.rclass-ancestor-env", :name "rclass-ancestors", :file "clojure/core/typed/rclass_ancestor_env.clj", :column 1, :line 38, :arglists ([{poly :poly?, rsym :the-class, :as rcls}])}