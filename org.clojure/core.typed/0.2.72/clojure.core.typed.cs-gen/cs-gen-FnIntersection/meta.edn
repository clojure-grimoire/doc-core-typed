{:type :fn, :src "(defn cs-gen-FnIntersection\n  [V X Y ^FnIntersection S ^FnIntersection T] \n  {:pre [(r/FnIntersection? S)\n         (r/FnIntersection? T)]}\n  ;(prn \"cs-gen FnIntersections\")\n  (cset-meet*\n    (doall\n      (t/for\n        [t-arr :- Function, (.types T)] :- cset\n        ;; for each t-arr, we need to get at least s-arr that works\n        (let [results (filter (t/inst identity (t/U false cset))\n                              (doall\n                                (t/for\n                                  [s-arr :- Function, (.types S)] :- (t/U false cset)\n                                  (let [r (handle-failure\n                                            (cs-gen-Function V X Y s-arr t-arr))]\n                                    r))))\n              ;_ (prn \"results\" (count results))\n              ;_ (clojure.pprint/pprint results) \n              ;_ (flush)\n              ;; ensure that something produces a constraint set\n              _ (when (empty? results) \n                  (fail! S T))\n              comb (cset-combine results)]\n          ;(prn \"combined\" comb)\n          comb)))))", :ns "clojure.core.typed.cs-gen", :name "cs-gen-FnIntersection", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 928, :arglists ([V X Y S T])}