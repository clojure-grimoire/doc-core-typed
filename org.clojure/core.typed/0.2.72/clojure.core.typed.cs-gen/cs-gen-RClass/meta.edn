{:type :fn, :src "(defn cs-gen-RClass\n  [V X Y S T]\n  {:pre [(r/RClass? S)\n         (r/RClass? T)]}\n  (let [rsupers (u/p :cs-gen*/cs-gen*-RClass-RClass-inner-RClass-supers (c/RClass-supers* S))\n        relevant-S (some #(when (r/RClass? %)\n                            (and (= (:the-class %) (:the-class T))\n                                 %))\n                         (map c/fully-resolve-type (conj rsupers S)))]\n  ;  (prn \"S\" (prs/unparse-type S))\n  ;  (prn \"T\" (prs/unparse-type T))\n;    (prn \"supers\" (map (juxt prs/unparse-type class) rsupers))\n;    (when relevant-S\n  ;    (prn \"relevant-S\" (prs/unparse-type relevant-S)))\n    (cond\n      relevant-S\n      (cset-meet*\n        (cons (cr/empty-cset X Y)\n              (doall\n                (map (t/fn [vari :- r/Variance \n                            si :- r/Type \n                            ti :- r/Type]\n                       (cs-gen-with-variance V X Y vari si ti))\n                     (:variances T)\n                     (:poly? relevant-S)\n                     (:poly? T)))))\n      :else (fail! S T))))", :ns "clojure.core.typed.cs-gen", :name "cs-gen-RClass", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 1011, :arglists ([V X Y S T])}