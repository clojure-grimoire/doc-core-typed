{:type :fn, :src "(defn cs-gen-Protocol\n  [V X Y S T]\n  {:pre [(r/Protocol? S)\n         (r/Protocol? T)]}\n  (t/ann-form [S T] (t/Seqable Protocol))\n  (if (= (:the-var S)\n         (:the-var T))\n    (cset-meet*\n      (cons (cr/empty-cset X Y)\n            (doall\n              (t/for\n                [[vari si ti] :- '[r/Variance r/Type r/Type]\n                  (map (-> vector\n                           (t/inst r/Variance r/Type r/Type t/Any t/Any t/Any))\n                       (:variances T)\n                       (t/ann-form (:poly? S) (t/U nil (t/Seqable r/Type)))\n                       (:poly? T))]\n                :- cset\n                (case vari\n                  (:covariant :constant) (cs-gen V X Y si ti)\n                  :contravariant (cs-gen V X Y ti si)\n                  :invariant (cset-meet (cs-gen V X Y si ti)\n                                        (cs-gen V X Y ti si)))))))\n    (fail! S T)))", :ns "clojure.core.typed.cs-gen", :name "cs-gen-Protocol", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 1039, :arglists ([V X Y S T])}