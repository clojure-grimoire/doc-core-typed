{:type :fn, :src "(defn infer-dots [X dotted-var dotted-bnd S T T-dotted R must-vars & {:keys [expected]}]\n  {:pre [((con/hash-c? symbol? r/Bounds?) X)\n         (symbol? dotted-var)\n         (r/Bounds? dotted-bnd)\n         (every? (con/every-c? r/Type?) [S T])\n         (r/Type? T-dotted) \n         (r/AnyType? R)\n         ((con/set-c? symbol?) must-vars)\n         ((some-fn nil? r/Type?) expected)]\n   :post [(cr/substitution-c? %)]}\n;  (prn \"infer-dots\")\n;  (prn \"must-vars\" must-vars)\n  (u/p :cs-gen/infer-dots\n  (let [[short-S rest-S] (split-at (count T) S)\n;        _ (prn \"short-S\" (map prs/unparse-type short-S))\n;        _ (prn \"T\" (map prs/unparse-type T))\n;        _ (prn \"rest-S\" (map prs/unparse-type rest-S))\n        expected-cset (if expected\n                        (cs-gen #{} X {dotted-var dotted-bnd} R expected)\n                        (cr/empty-cset {} {}))\n        ;_ (prn \"expected-cset\" expected-cset)\n        cs-short (cs-gen-list #{} X {dotted-var dotted-bnd} short-S T\n                                :expected-cset expected-cset)\n        ;_ (prn \"cs-short\" cs-short)\n        new-vars (var-store-take dotted-var T-dotted (count rest-S))\n        new-Ts (doall\n                 (t/for\n                   [v :- t/Sym, new-vars] :- r/Type\n                   (let [target (subst/substitute-dots (map r/make-F new-vars) nil dotted-var T-dotted)]\n                     #_(prn \"replace\" v \"with\" dotted-var \"in\" (prs/unparse-type target))\n                     (subst/substitute (r/make-F v) dotted-var target))))\n        ;_ (prn \"new-Ts\" new-Ts)\n        cs-dotted (cs-gen-list #{} (merge X (zipmap new-vars (repeat dotted-bnd))) {dotted-var dotted-bnd} rest-S new-Ts\n                               :expected-cset expected-cset)\n        ;_ (prn \"cs-dotted\" cs-dotted)\n        cs-dotted (move-vars-to-dmap cs-dotted dotted-var new-vars)\n        ;_ (prn \"cs-dotted\" cs-dotted)\n        cs (cset-meet cs-short cs-dotted)\n        ;_ (prn \"cs\" cs)\n        ]\n    (subst-gen (cset-meet cs expected-cset) #{dotted-var} R))))", :ns "clojure.core.typed.cs-gen", :name "infer-dots", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 1626, :arglists ([X dotted-var dotted-bnd S T T-dotted R must-vars & {:keys [expected]}])}