{:type :fn, :src "(defn infer-vararg \n  ([X Y S T T-var R] (infer-vararg X Y S T T-var R nil))\n  ([X Y S T T-var R expected]\n   {:pre [(every? (con/hash-c? symbol? r/Bounds?) [X Y])\n          (every? r/Type? S)\n          (every? r/Type? T)\n          ((some-fn nil? r/Type?) T-var)\n          (r/AnyType? R)\n          ((some-fn nil? r/AnyType?) expected)]\n    :post [(or (nil? %)\n               (cr/substitution-c? %))]}\n   ;(prn \"infer-vararg\" \"X:\" X)\n   (u/p :cs-gen/infer-vararg\n   (let [new-T (if T-var\n                 ;Pad out T\n                 (concat T (repeat (- (count S) (count T)) T-var))\n                 T)]\n     ;    (prn \"S\" (map unparse-type S))\n     ;    (prn \"new-T\" (map unparse-type new-T))\n     ;    (prn \"R\" (unparse-type R))\n     ;    (prn \"expected\" (class expected) (when expected (unparse-type expected)))\n     (and (>= (count S) (count T))\n          (infer X Y S new-T R expected))))))", :ns "clojure.core.typed.cs-gen", :name "infer-vararg", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 1680, :arglists ([X Y S T T-var R] [X Y S T T-var R expected])}