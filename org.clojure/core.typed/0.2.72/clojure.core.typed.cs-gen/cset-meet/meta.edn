{:type :fn, :src "(defn cset-meet [{maps1 :maps :as x} {maps2 :maps :as y}]\n  {:pre [(cr/cset? x)\n         (cr/cset? y)]\n   :post [(cr/cset? %)]}\n  (u/p :cs-gen/cset-meet\n  (let [maps (filter (t/inst identity (t/U false cset-entry))\n                     (doall (t/for\n                              [{map1 :fixed dmap1 :dmap} :- cset-entry, maps1\n                               {map2 :fixed dmap2 :dmap} :- cset-entry, maps2]\n                              :- (t/U false cset-entry)\n                              (handle-failure\n                                (cr/->cset-entry (merge-with c-meet map1 map2)\n                                                 (dmap-meet dmap1 dmap2))))))]\n    (when (empty? maps)\n      (fail! maps1 maps2))\n    (cr/->cset maps))))", :ns "clojure.core.typed.cs-gen", :name "cset-meet", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 104, :arglists ([{maps1 :maps, :as x} {maps2 :maps, :as y}])}