{:type :fn, :src "(defn infer \n  ([X Y S T R] (infer X Y S T R nil))\n  ([X Y S T R expected]\n   {:pre [(every? (con/hash-c? symbol? r/Bounds?) [X Y])\n          (every? r/Type? S)\n          (every? r/Type? T)\n          (r/AnyType? R)\n          ((some-fn nil? r/AnyType?) expected)]\n    :post [(or (nil? %)\n               (true? %)\n               (cr/substitution-c? %))]}\n   ;  (prn \"infer\" )\n   ;  (prn \"X:\" X) \n   ;  (prn \"Y:\" Y) \n   ;  (prn \"S:\" (map prs/unparse-type S))\n   ;  (prn \"T:\" (map prs/unparse-type T))\n   ;  (when R\n   ;    (prn \"R:\" (class R) (prs/unparse-type R)))\n   ;  (when expected\n   ;    (prn \"expected:\" (class expected) (prs/unparse-type expected)))\n   (u/p :cs-gen/infer\n   (let [;_ (prn \"before expected cset\" R expected)\n         expected-cset (if expected\n                         (cs-gen #{} X Y R expected)\n                         (cr/empty-cset {} {}))\n         ;_ (prn \"expected cset\" expected-cset)\n         cs (u/p :cs-gen/infer-inner-csgen \n              (cs-gen-list #{} X Y S T :expected-cset expected-cset))\n         cs* (u/p :cs-gen/infer-inner-cset-meet\n               (cset-meet cs expected-cset))]\n     ;(prn \"final cs\" cs*)\n     (if R\n       (u/p :cs-gen/infer-inner-subst-gen\n         (subst-gen cs* (set (keys Y)) R))\n       true)))))", :ns "clojure.core.typed.cs-gen", :name "infer", :file "clojure/core/typed/cs_gen.clj", :column 1, :line 1720, :arglists ([X Y S T R] [X Y S T R expected])}