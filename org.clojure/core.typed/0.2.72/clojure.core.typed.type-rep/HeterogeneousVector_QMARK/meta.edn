{:type :fn, :src "(u/def-type HeterogeneousVector [types fs objects rest drest]\n  \"A constant vector, clojure.lang.IPersistentVector\"\n  [(vector? types)\n   (every? (some-fn Type? Result?) types)\n   (vector? fs)\n   (every? p/IFilterSet? fs)\n   (vector? objects)\n   (every? p/IRObject? objects)\n   (apply = (map count [types fs objects]))\n   (#{0 1} (count (filter identity [rest drest])))\n   ((some-fn nil? Type?) rest)\n   ((some-fn nil? DottedPretype?) drest)]\n  :methods\n  [p/TCType])", :ns "clojure.core.typed.type-rep", :name "HeterogeneousVector?", :file "clojure/core/typed/type_rep.clj", :column 1, :line 468, :arglists ([a__2329__auto__])}