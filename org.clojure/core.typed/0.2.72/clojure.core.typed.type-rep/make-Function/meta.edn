{:type :fn, :src "(defn make-Function\n  \"Make a function, wrap range type in a Result.\n  Accepts optional :filter and :object parameters that default to the most general filter\n  and EmptyObject\"\n  ([dom rng] (make-Function dom rng nil nil))\n  ([dom rng rest] (make-Function dom rng rest nil))\n  ([dom rng rest drest & {:keys [filter object mandatory-kws optional-kws flow]}]\n   (Function-maker dom (make-Result rng filter object flow)\n                   rest drest (when (or mandatory-kws optional-kws)\n                                (-kw-args :mandatory (or mandatory-kws {})\n                                          :optional (or optional-kws {}))))))", :ns "clojure.core.typed.type-rep", :name "make-Function", :file "clojure/core/typed/type_rep.clj", :column 1, :line 1028, :arglists ([dom rng] [dom rng rest] [dom rng rest drest & {:keys [filter object mandatory-kws optional-kws flow]}]), :doc "Make a function, wrap range type in a Result.\n  Accepts optional :filter and :object parameters that default to the most general filter\n  and EmptyObject"}