{:type :fn, :src "(defn emit-deftype [name-sym fields invariants methods*]\n  (let [classname (with-meta (symbol (str (namespace-munge *ns*) \".\" name-sym)) (meta name-sym))\n        ->ctor (symbol (str \"->\" name-sym))\n        maker (symbol (str name-sym \"-maker\"))\n        that (gensym)\n        gs (gensym)\n        type-hash (hash classname)\n        meta-field '_meta\n        hash-field '_hash]\n    `(do\n       (declare ~maker)\n       ~(inner-deftype fields hash-field meta-field that name-sym type-hash gs\n                       maker methods*)\n\n       (alter-meta! (var ~->ctor) assoc :private true)\n\n       (defn ~(symbol (str name-sym \"?\")) [a#]\n         (instance? ~name-sym a#))\n\n       ; (Atom1 (Map t/Any Number))\n       (defn ~maker [~@fields & {meta# :meta :as opt#}]\n         {:pre ~invariants}\n         (profiling/p ~(keyword \"maker\" (str name-sym))\n          (profiling/p ~(keyword \"maker\" (str name-sym \"-meta-check\"))\n           (let [extra# (set/difference (set (keys opt#)) #{:meta})]\n             (assert (empty? extra#) (str \"Extra arguments:\" extra#))))\n          ; ~@fields are in scope above\n          (~->ctor ~@fields nil meta#))))))", :ns "clojure.core.typed.utils", :name "emit-deftype", :file "clojure/core/typed/utils.clj", :column 1, :line 233, :arglists ([name-sym fields invariants methods*])}