{:type :fn, :src "(defn open-Result \n  \"Substitute ids for objs in Result t\"\n  [{t :t fs :fl old-obj :o :keys [flow] :as r} objs & [ts]]\n  {:pre [(r/Result? r)\n         (every? obj/RObject? objs)\n         ((some-fn fl/FilterSet? fl/NoFilter?) fs)\n         (obj/RObject? old-obj)\n         (r/FlowSet? flow)\n         ((some-fn nil? (con/every-c? r/Type?)) ts)]\n   :post [((con/hvector-c? r/Type? fl/FilterSet? obj/RObject? r/FlowSet?) %)]}\n  ;  (prn \"open-result\")\n  ;  (prn \"result type\" (prs/unparse-type t))\n  ;  (prn \"result filterset\" (prs/unparse-filter-set fs))\n  ;  (prn \"result (old) object\" old-obj)\n  ;  (prn \"objs\" objs)\n  ;  (prn \"ts\" (mapv prs/unparse-type ts))\n  (reduce (fn [[t fs old-obj flow] [[o k] arg-ty]]\n            {:pre [(r/Type? t)\n                   ((some-fn fl/FilterSet? fl/NoFilter?) fs)\n                   (obj/RObject? old-obj)\n                   (integer? k)\n                   (obj/RObject? o)\n                   (r/FlowSet? flow)\n                   ((some-fn false? r/Type?) arg-ty)]\n             :post [((con/hvector-c? r/Type? fl/FilterSet? obj/RObject? r/FlowSet?) %)]}\n            (let [r [(subst-obj/subst-type t k o true)\n                     (subst-obj/subst-filter-set fs k o true arg-ty)\n                     (subst-obj/subst-object old-obj k o true)\n                     (subst-obj/subst-flow-set flow k o true arg-ty)]]\n              ;              (prn [(prs/unparse-type t) (prs/unparse-filter-set fs) old-obj])\n              ;              (prn \"r\" r)\n              r))\n          [t fs old-obj flow]\n          ; this is just a sequence of pairs of [not-neg? RObject] and Type?\n          ; Represents the object and type of each argument, and its position\n          (map vector \n               (map-indexed #(vector %2 %1) ;racket's is opposite..\n                            objs)\n               (if ts\n                 ts\n                 (repeat false)))))", :ns "clojure.core.typed.open-result", :name "open-Result", :file "clojure/core/typed/open_result.clj", :column 1, :line 34, :arglists ([{t :t, fs :fl, old-obj :o, :keys [flow], :as r} objs & [ts]]), :doc "Substitute ids for objs in Result t"}