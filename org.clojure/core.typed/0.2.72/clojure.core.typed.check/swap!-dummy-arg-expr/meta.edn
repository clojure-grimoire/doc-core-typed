{:type :fn, :src "(defn swap!-dummy-arg-expr [env [target-expr & [f-expr & args]]]\n  (assert f-expr)\n  (assert target-expr)\n  (let [; transform (swap! t f a ...) to (swap! t (fn [t'] (f t' a ...)))\n        ;\n        ;generate fresh symbol for function param\n        sym (gensym 'swap-val)\n        derefed-param (ast-u/dummy-local-binding-expr sym env)\n        ;\n        ;dummy-fn is (fn [t'] (f t' a ...)) with hygienic bindings\n        dummy-fn-expr (ast-u/dummy-fn-expr\n                        [; (fn [t'] (f t' a ...))\n                         (ast-u/dummy-fn-method-expr\n                           ; (f t' a ...)\n                           (ast-u/dummy-invoke-expr f-expr\n                                              (concat [derefed-param]\n                                                      args)\n                                              env)\n                           [(ast-u/dummy-local-binding-expr sym env)]\n                           nil\n                           env)]\n                        nil\n                        env)]\n    dummy-fn-expr))", :ns "clojure.core.typed.check", :name "swap!-dummy-arg-expr", :file "clojure/core/typed/check.clj", :column 1, :line 566, :arglists ([env [target-expr & [f-expr & args]]])}