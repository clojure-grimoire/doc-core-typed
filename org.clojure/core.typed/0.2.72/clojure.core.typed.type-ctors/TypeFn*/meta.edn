{:type :fn, :src "(defn TypeFn* \n  ([names variances bbnds body] (TypeFn* names variances bbnds body {}))\n  ([names variances bbnds body {:keys [meta] :as opt}]\n  {:pre [(every? symbol names)\n         (every? r/variance? variances)\n         (every? r/Bounds? bbnds)\n         (apply = (map count [names variances bbnds]))\n         ((some-fn r/TypeFn? r/Type?) body)\n         (map? opt)\n         ((some-fn nil? map?) meta)]\n   :post [(r/Type? %)]}\n  (let [original-names (map (comp r/F-original-name r/make-F) names)]\n    (if (empty? names)\n      body\n      (let [t (r/TypeFn-maker (count names) \n                              variances\n                              (vec\n                                (for [bnd bbnds]\n                                  (r/visit-bounds bnd #(abstract-many names %))))\n                              (abstract-many names body)\n                              :meta meta)]\n        (with-original-names t original-names))))))", :ns "clojure.core.typed.type-ctors", :name "TypeFn*", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 1039, :arglists ([names variances bbnds body] [names variances bbnds body {:keys [meta], :as opt}])}