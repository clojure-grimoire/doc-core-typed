{:type :fn, :src "(defn Protocol-of \n  ([sym] (Protocol-of sym nil))\n  ([sym args]\n   {:pre [(symbol? sym)\n          (every? r/Type? args)]\n    :post [(r/Type? %)]}\n   (let [p (prenv/get-protocol sym)]\n     (assert ((some-fn r/TypeFn? r/Protocol? nil?) p))\n     ; parameterised protocols must be previously annotated\n     (assert (or (r/TypeFn? p) (empty? args))\n             (str \"Cannot instantiate non-polymorphic Protocol \" sym))\n     (cond \n       (r/TypeFn? p) (instantiate-typefn p args)\n       (r/Protocol? p) p\n       ; allow unannotated protocols if unparameterised\n       :else (r/Protocol-maker sym nil nil (Protocol-var->on-class sym) {} false)))))", :ns "clojure.core.typed.type-ctors", :name "Protocol-of", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 681, :arglists ([sym] [sym args])}