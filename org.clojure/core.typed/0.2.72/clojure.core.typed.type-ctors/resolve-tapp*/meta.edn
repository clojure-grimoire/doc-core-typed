{:type :fn, :src "(defn resolve-tapp* [rator rands & {:keys [tapp]}]\n  {:pre [(r/TApp? tapp)]}\n  (let [rator (fully-resolve-type rator)\n        _ (when-not (r/TypeFn? rator) \n            (err/int-error (str \"First argument to TApp must be TFn, actual: \" (ind/unparse-type rator))))]\n    (when-not (= (count rands) (:nbound rator))\n      (binding [vs/*current-env* (-> tapp meta :env)] ;must override env, or clear it\n        (err/int-error (str \"Wrong number of arguments (\" (count rands) \") passed to type function: \"\n                          (ind/unparse-type tapp) \n                          (when-let [syn (-> tapp meta :syn)]\n                            (str \" in \" (pr-str syn)))))))\n    (instantiate-typefn rator rands)))", :ns "clojure.core.typed.type-ctors", :name "resolve-tapp*", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 1301, :arglists ([rator rands & {:keys [tapp]}])}