{:type :fn, :src "(defn countrange-overlap? \n  [{lowerl :lower upperl :upper :as l}\n   {lowerr :lower upperr :upper :as r}]\n  {:pre [(r/CountRange? l)\n         (r/CountRange? r)]}\n  (cond \n    (and upperl upperr)\n        (or \n          ;; -----\n          ;;   -------\n          ;; and\n          ;;   ---\n          ;;   -------\n          (<= lowerl lowerr upperl upperr)\n\n          ;;    --\n          ;;   -------\n          (<= lowerr lowerl upperl upperr)\n\n          ;;     ------\n          ;; -------\n          ;; and\n          ;;     ---\n          ;; -------\n          (<= lowerr lowerl upperr upperl)\n\n          ;; otherwise no overlap\n          false)\n\n    upperl ;; and (not upperr)\n      (or \n        ;; ----\n        ;;  ----->>\n        ;; and\n        ;;  ---\n        ;;  ----->>\n        (<= lowerl lowerr upperl)\n        ;;   ---\n        ;;  ----->>\n        (<= lowerr lowerl)\n        ;; otherwise no overlap\n        false)\n    upperr\n      (or\n        ;; ------>>\n        ;;  ----\n        ;; and\n        ;;  ----->>\n        ;;  ---\n        (<= lowerl lowerr)\n        \n        ;;   --->>\n        ;; ----\n        (<= lowerr lowerl upperr)\n\n        ;; else no overlap\n        false)\n    :else ;; (and (not upperl) (not upperr))\n    ;; ---->>\n    ;;   -->>\n    ;; and\n    ;;   -->>\n    ;; ---->>\n    true))", :ns "clojure.core.typed.type-ctors", :name "countrange-overlap?", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 1468, :arglists ([{lowerl :lower, upperl :upper, :as l} {lowerr :lower, upperr :upper, :as r}])}