{:type :fn, :src "(defn Protocol-interface->on-var\n  \"Given the interface symbol of a protocol, returns the corresponding\n  var the protocol is based on as a symbol. Assumes the interface is possible\n  to demunge. Only useful for Clojure implementation.\"\n  [sym]\n  {:pre [(symbol? sym)]\n   :post [(symbol? %)]}\n  (let [segs (vec (partition-by #{\\.} (str (repl/demunge (str sym)))))\n        segs (assoc-in segs [(- (count segs) 2)] '(\\/))\n        var-sym (symbol (apply str (apply concat segs)))]\n    var-sym))", :ns "clojure.core.typed.type-ctors", :name "Protocol-interface->on-var", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 654, :arglists ([sym]), :doc "Given the interface symbol of a protocol, returns the corresponding\n  var the protocol is based on as a symbol. Assumes the interface is possible\n  to demunge. Only useful for Clojure implementation."}