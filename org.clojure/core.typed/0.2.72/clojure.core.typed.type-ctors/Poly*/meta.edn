{:type :fn, :src "(defn Poly* [names bbnds body & {:keys [original-names] \n                                 :or {original-names \n                                      (map (comp r/F-original-name r/make-F) names)}}]\n  {:pre [(every? symbol names)\n         (every? r/Bounds? bbnds)\n         (r/Type? body)\n         (every? symbol? original-names)\n         (apply = (map count [names bbnds original-names]))]}\n  (if (empty? names)\n    body\n    (let [v (r/Poly-maker (count names)\n                          (vec\n                            (for [bnd bbnds]\n                              (r/visit-bounds bnd #(abstract-many names %))))\n                          (abstract-many names body))]\n      (with-original-names v original-names))))", :ns "clojure.core.typed.type-ctors", :name "Poly*", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 1136, :arglists ([names bbnds body & {:keys [original-names], :or {original-names (map (comp r/F-original-name r/make-F) names)}}])}