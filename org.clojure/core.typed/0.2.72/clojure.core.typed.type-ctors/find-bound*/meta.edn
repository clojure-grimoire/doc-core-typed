{:type :fn, :src "(defn find-bound* \n  \"Find upper bound if polarity is true, otherwise lower bound\"\n  [t* polarity]\n  {:pre [(r/Type? t*)]}\n  (let [fnd-bnd #(find-bound* % polarity)\n        t t*]\n    (cond\n      (r/Name? t) (fnd-bnd (resolve-Name t))\n      (r/App? t) (fnd-bnd (resolve-App t))\n      (r/TApp? t) (fnd-bnd (resolve-TApp t))\n      (r/Mu? t) (let [name (Mu-fresh-symbol* t)\n                      body (Mu-body* name t)\n                      new-body (fnd-bnd body)]\n                  (Mu* name new-body))\n      (r/Poly? t) (fnd-bnd (Poly-body* (Poly-fresh-symbols* t) t))\n      (r/TypeFn? t) (let [names (TypeFn-fresh-symbols* t)\n                          body (TypeFn-body* names t)\n                          bbnds (TypeFn-bbnds* names t)\n                          new-body (fnd-bnd body)]\n                      (TypeFn* names\n                               (:variances t)\n                               bbnds\n                               new-body))\n      :else (if polarity\n              r/-any\n              r/-nothing))))", :ns "clojure.core.typed.type-ctors", :name "find-bound*", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 2189, :arglists ([t* polarity]), :doc "Find upper bound if polarity is true, otherwise lower bound"}