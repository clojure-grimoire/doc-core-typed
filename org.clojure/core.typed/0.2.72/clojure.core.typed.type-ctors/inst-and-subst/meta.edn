{:type :fn, :src "(defn inst-and-subst \n  \"Instantiate target type with ts number of\n  free names. Target must be wrapped in ts number\n  of Scopes. Substitutes the temporary names with\n  types ts.\"\n  [target ts]\n  {:pre [((some-fn r/Type? r/Scope?) target)\n         (every? r/Type? ts)]\n   :post [(r/Type? %)]}\n  (u/p :ctors/inst-and-subst\n  (let [subst-all @(subst-all-var)\n        ; these names are eliminated immediately, they don't need to be\n        ; created with fresh-symbol\n        names (repeatedly (count ts) gensym)\n        ;_ (prn \"inst-and-subst\" names)\n        fs (map r/make-F names)\n        t (instantiate-many names target)\n        _ (assert (r/Type? t))\n        subst (make-simple-substitution names ts)]\n    (subst-all subst t))))", :ns "clojure.core.typed.type-ctors", :name "inst-and-subst", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 918, :arglists ([target ts]), :doc "Instantiate target type with ts number of\n  free names. Target must be wrapped in ts number\n  of Scopes. Substitutes the temporary names with\n  types ts."}