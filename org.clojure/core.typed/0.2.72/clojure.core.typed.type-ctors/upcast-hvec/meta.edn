{:type :fn, :src "(defn upcast-hvec [{:keys [types rest drest] :as hvec}]\n  {:pre [(r/HeterogeneousVector? hvec)]\n   :post [(r/Type? %)]}\n  (let [tp (if-not drest\n             (apply Un \n                    (concat types\n                            (when rest\n                              [rest])))\n             r/-any)]\n    (apply\n      In \n      (impl/impl-case\n        :clojure (RClass-of clojure.lang.APersistentVector [tp])\n        :cljs    (In (Protocol-of 'cljs.core/IVector [tp])\n                     (Protocol-of 'cljs.core/ICollection [tp])\n                     (Protocol-of 'cljs.core/ISeqable [tp])\n                     (Protocol-of 'cljs.core/IStack [tp])\n                     (Protocol-of 'cljs.core/IAssociative [r/-integer-cljs tp])\n                     (Protocol-of 'cljs.core/IReversible [tp])))\n      (when-not drest\n        [(r/make-CountRange\n           (count types)\n           (when-not rest\n             (count types)))]))))", :ns "clojure.core.typed.type-ctors", :name "upcast-hvec", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 268, :arglists ([{:keys [types rest drest], :as hvec}])}