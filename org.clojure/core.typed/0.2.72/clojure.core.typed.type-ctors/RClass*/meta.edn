{:type :fn, :src "(defn RClass* \n  ([names variances poly? the-class replacements]\n   (RClass* names variances poly? the-class replacements #{}))\n  ([names variances poly? the-class replacements unchecked-ancestors]\n   (RClass* names variances poly? the-class replacements unchecked-ancestors (repeat (count names) r/no-bounds)))\n  ([names variances poly? the-class replacements unchecked-ancestors bnds]\n  {:pre [(every? symbol? names)\n         (every? r/variance? variances)\n         (= (count variances) (count poly?))\n         (every? r/Type? poly?)\n         (every? r/Bounds? bnds)\n         (symbol? the-class)]\n   :post [((some-fn r/TypeFn? r/RClass?) %)]}\n   (let [_ ((impl/v 'clojure.core.typed.rclass-ancestor-env/add-rclass-replacements)\n            the-class names replacements)\n         _ ((impl/v 'clojure.core.typed.rclass-ancestor-env/add-rclass-ancestors)\n            the-class names unchecked-ancestors)]\n     (if (seq variances)\n       (TypeFn* names variances bnds (r/RClass-maker variances poly? the-class))\n       (r/RClass-maker nil nil the-class)))))", :ns "clojure.core.typed.type-ctors", :name "RClass*", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 708, :arglists ([names variances poly? the-class replacements] [names variances poly? the-class replacements unchecked-ancestors] [names variances poly? the-class replacements unchecked-ancestors bnds])}