{:type :fn, :src "(defn flatten-intersections [types]\n  {:pre [(every? r/Type? types)]\n   :post [(every? r/Type? %)]}\n  (t/loop [work :- (t/Seqable r/Type), types\n           result :- (t/Seqable r/Type), []]\n    (if (empty? work)\n      result\n      (let [resolved (doall (map fully-resolve-type work))\n            {intersections true non-intersections false} (group-by r/Intersection? resolved)]\n        (recur (doall (mapcat :types intersections))\n               (doall (concat result non-intersections)))))))", :ns "clojure.core.typed.type-ctors", :name "flatten-intersections", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 471, :arglists ([types])}