{:type :fn, :src "(defn RClass-of \n  ([sym-or-cls] (RClass-of sym-or-cls nil))\n  ([sym-or-cls args]\n   {:pre [((some-fn class? symbol?) sym-or-cls)\n          (every? r/Type? args)]\n    :post [((some-fn r/RClass? r/DataType?) %)]}\n   (u/p :ctors/RClass-of\n   (let [sym (if (class? sym-or-cls)\n               (coerce/Class->symbol sym-or-cls)\n               sym-or-cls)\n         cache-key-hash [(keyword sym) args]\n         cache-hit (@RClass-of-cache cache-key-hash)]\n     (if cache-hit\n       (u/p :ctors/RClass-of-cache-hit\n            cache-hit)\n       (u/p :ctors/RClass-of-cache-miss\n         (let [rc ((some-fn dtenv/get-datatype rcls/get-rclass) \n                   sym)\n               _ (assert ((some-fn r/TypeFn? r/RClass? r/DataType? nil?) rc))\n               _ (when-not (or (r/TypeFn? rc) (empty? args))\n                   (err/int-error\n                     (str \"Cannot instantiate non-polymorphic RClass \" sym\n                          (when *current-RClass-super*\n                            (str \" when checking supertypes of RClass \" *current-RClass-super*)))))\n               res (cond \n                     (r/TypeFn? rc) (instantiate-typefn rc args)\n                     ((some-fn r/DataType? r/RClass?) rc) rc\n                     :else\n                     (let [cls (coerce/symbol->Class sym)]\n                       (if (isa-DataType? cls)\n                         (do (println (str \"WARNING: Assuming unannotated Clojure type \" sym\n                                           \" is a datatype\"))\n                             (flush)\n                             (when (isa-Record? cls)\n                               (println (str \"WARNING: \" sym \" is probably a record because it extends IRecord.\"\n                                             \" Annotate with ann-record above the first time it is parsed\"))\n                               (flush))\n                           (r/DataType-maker sym nil nil (array-map) (isa-Record? cls)))\n                         (r/RClass-maker nil nil sym))))]\n           (swap! RClass-of-cache assoc cache-key-hash res)\n           res)))))))", :ns "clojure.core.typed.type-ctors", :name "RClass-of", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 765, :arglists ([sym-or-cls] [sym-or-cls args])}