{:type :fn, :src "(defn infer-bounds\n  \"Returns a Bounds that attempts to fill in meaningful\n  upper/lower bounds of the same rank\"\n  [upper-or-nil lower-or-nil]\n  {:pre [(every? (some-fn nil? r/AnyType?) [upper-or-nil lower-or-nil])]\n   :post [(r/Bounds? %)]}\n  (let [{:keys [upper lower]} (cond \n                                ;both bounds provided\n                                (and upper-or-nil lower-or-nil) {:upper upper-or-nil :lower lower-or-nil}\n                                ;only upper\n                                upper-or-nil {:upper upper-or-nil :lower (find-lower-bound upper-or-nil)}\n                                ;only lower\n                                lower-or-nil {:upper (find-upper-bound lower-or-nil) :lower lower-or-nil}\n                                ;no bounds provided, default to Nothing <: t/Any\n                                :else {:upper r/-any :lower r/-nothing})]\n    (r/Bounds-maker upper lower nil)))", :ns "clojure.core.typed.type-ctors", :name "infer-bounds", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 2224, :arglists ([upper-or-nil lower-or-nil]), :doc "Returns a Bounds that attempts to fill in meaningful\n  upper/lower bounds of the same rank"}