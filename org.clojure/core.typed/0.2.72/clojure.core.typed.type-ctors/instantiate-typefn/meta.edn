{:type :fn, :src "(defn instantiate-typefn [t types & {:keys [names]\n                                     :or {names (TypeFn-fresh-symbols* t)}}]\n  (let [subst-all @(subst-all-var)]\n    (when-not (r/TypeFn? t) (err/int-error (str \"instantiate-typefn requires a TypeFn: \" (ind/unparse-type t))))\n    (do (when-not (= (:nbound t) (count types)) \n          (err/int-error\n            (str \"Wrong number of arguments passed to type function. Expected \"\n                 (:nbound t) \", actual \" (count types) \": \"\n                 (ind/unparse-type t) \" \" (mapv ind/unparse-type types))))\n        (let [bbnds (TypeFn-bbnds* names t)\n              body (TypeFn-body* names t)]\n          ;(prn \"subst\" names (map meta names))\n          (free-ops/with-bounded-frees (zipmap (map r/make-F names) bbnds)\n            (subst-all (make-simple-substitution names types) body))))))", :ns "clojure.core.typed.type-ctors", :name "instantiate-typefn", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 1255, :arglists ([t types & {:keys [names], :or {names (TypeFn-fresh-symbols* t)}}])}