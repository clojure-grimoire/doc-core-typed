{:type :fn, :src "(defn upcast-hset [{:keys [fixed complete?] :as hset}]\n  {:pre [(r/HSet? hset)]\n   :post [(r/Type? %)]}\n  (let [tp (if complete?\n             (apply Un (:fixed hset))\n             r/-any)]\n    (impl/impl-case\n      :clojure (RClass-of 'clojure.lang.APersistentSet [tp])\n      :cljs    (In (Protocol-of 'cljs.core/ISet [tp])\n                   (Protocol-of 'cljs.core/ICollection [tp])\n                   (Protocol-of 'cljs.core/ISeqable [tp])))))", :ns "clojure.core.typed.type-ctors", :name "upcast-hset", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 254, :arglists ([{:keys [fixed complete?], :as hset}])}