{:type :fn, :src "(defn instantiate-poly [t types]\n  (let [subst-all @(subst-all-var)]\n    (cond\n      (r/Poly? t) (let [_ (when-not (= (:nbound t) (count types)) \n                            (err/int-error \n                              (str \"Wrong number of arguments (\" (count types) \n                                   \") passed to polymorphic type: \"\n                                   (ind/unparse-type t)\n                                   (when (bound? #'*current-RClass-super*)\n                                     (str \" when checking ancestors of \" *current-RClass-super*)))))\n                        nms (Poly-fresh-symbols* t)\n                        bbnds (Poly-bbnds* nms t)\n                        body (Poly-body* nms t)]\n                    (free-ops/with-bounded-frees\n                      (zipmap (map r/make-F nms) bbnds)\n                      (subst-all (make-simple-substitution nms types) body)))\n      ;PolyDots NYI\n      :else (err/nyi-error (str \"instantiate-poly: requires Poly, and PolyDots NYI\")))))", :ns "clojure.core.typed.type-ctors", :name "instantiate-poly", :file "clojure/core/typed/type_ctors.clj", :column 1, :line 1271, :arglists ([t types])}