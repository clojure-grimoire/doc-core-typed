{:type :fn, :src "(delay-and-cache-env init-altered-env\n                     (assert (class? Seqable))\n  (h/alters\n\nSeqable [[[a :variance :covariant]]\n         ]\n\nReversible [[[a :variance :covariant]]\n            ]\n\nIPersistentCollection [[[a :variance :covariant]]\n                       :replace\n                       {Seqable (Seqable a)}]\n\nISeq [[[a :variance :covariant]]\n      :replace\n      {Seqable (Seqable a)\n       IPersistentCollection (IPersistentCollection a)}]\n\nclojure.lang.ChunkBuffer [[[a :variance :invariant]]]\n\nclojure.lang.IChunkedSeq [[[a :variance :covariant]]\n                          :replace\n                          {Seqable (Seqable a)\n                           IPersistentCollection (IPersistentCollection a)\n                           ISeq (ISeq a)}]\n\nclojure.lang.Indexed [[[a :variance :covariant]]]\n\nclojure.lang.IChunk [[[a :variance :covariant]]\n                     :replace\n                     {clojure.lang.Indexed (clojure.lang.Indexed a)}]\n\nILookup [[[a :variance :covariant]\n          [b :variance :covariant]]]\n\nIPersistentSet [[[a :variance :covariant]]\n                :replace\n                {IPersistentCollection (IPersistentCollection a)\n                 Seqable (Seqable a)}]\n\nAPersistentSet [[[a :variance :covariant]]\n                :replace\n                {Seqable (Seqable a)\n                 java.util.Set (java.util.Set a)\n                 Collection (Collection a)\n                 Iterable (Iterable a)\n                 IPersistentCollection (IPersistentCollection a)\n                 IPersistentSet (IPersistentSet a)}\n                :unchecked-ancestors\n                #{[Any -> (U a nil)]}\n                ]\n\nPersistentHashSet [[[a :variance :covariant]]\n                   :replace\n                   {Seqable (Seqable a)\n                    java.util.Set (java.util.Set a)\n                    Iterable (Iterable a)\n                    Collection (Collection a)\n                    APersistentSet (APersistentSet a)\n                    IPersistentSet (IPersistentSet a)\n                    IPersistentCollection (IPersistentCollection a)}\n                   :unchecked-ancestors\n                   #{[Any -> (U a nil)]}]\n\nPersistentTreeSet [[[a :variance :covariant]]\n                   :replace\n                   {Seqable (Seqable a)\n                    java.util.Set (java.util.Set a)\n                    Iterable (Iterable a)\n                    Collection (Collection a)\n                    Reversible (Reversible a)\n                    APersistentSet (APersistentSet a)\n                    IPersistentSet (IPersistentSet a)\n                    IPersistentCollection (IPersistentCollection a)}\n                    :unchecked-ancestors\n                    #{[Any -> (U a nil)]}]\n\nAssociative [[[a :variance :covariant]\n              [b :variance :covariant]]\n             :replace\n             {IPersistentCollection (IPersistentCollection Any)\n              Seqable (Seqable Any)\n              ILookup (ILookup a b)}]\n\n;ITransientCollection [[[w :variance :contravariant]\n;                       [r :variance :covariant]]]\n;\n;ITransientSet [[[w :variance :contravariant]\n;                [r :variance :covariant]]\n;               :replace\n;               {ITransientCollection (ITransientCollection w r)}]\n;\n;ITransientAssociative [[[wkey :variance :contravariant]\n;                        [wval :variance :contravariant]\n;                        [rkey :variance :covariant]\n;                        [rval :variance :covariant]]\n;                       :replace\n;                       {ILookup (ILookup rkey rval)\n;                        ITransientCollection (ITransientCollection (IMapEntry wkey wval)\n;                                                                   (IMapEntry rkey rval))}]\n;\n;ITransientMap [[[wkey :variance :contravariant]\n;                [wval :variance :contravariant]\n;                [rkey :variance :covariant]\n;                [rval :variance :covariant]]\n;               :replace\n;               {ILookup (ILookup rkey rval)\n;                ITransientAssociative (ITransientAssociative wkey wval rkey rval)\n;                ITransientCollection (ITransientCollection (IMapEntry wkey wval)\n;                                                           (IMapEntry rkey rval))}]\n;\n;ATransientMap [[[wkey :variance :contravariant]\n;                [wval :variance :contravariant]\n;                [rkey :variance :covariant]\n;                [rval :variance :covariant]]\n;               {;TODO override AFn\n;                ILookup (ILookup rkey rval)\n;                ITransientAssociative (ITransientAssociative wkey wval rkey rval)\n;                ITransientCollection (ITransientCollection (IMapEntry wkey wval)\n;                                                           (IMapEntry rkey rval))}]\n;\n;ITransientVector [[[w :variance :contravariant]\n;                   [r :variance :covariant]]\n;                  :replace\n;                  {ITransientAssociative (ITransientAssociative Number wval Number rval)\n;                   ITransientCollection (ITransientCollection w r)\n;                   Indexed (Indexed r)}]\n;\n;IEditableCollection [[c :variance :covariant]]\n\nIPersistentStack [[[a :variance :covariant]]\n                  :replace\n                  {IPersistentCollection (IPersistentCollection a)\n                   Seqable (Seqable a)}]\n\n\n;define vectors before maps, as HVector is part of map ancestors\nIPersistentVector [[[a :variance :covariant]]\n                   :replace\n                   {IPersistentCollection (IPersistentCollection a)\n                    Seqable (Seqable a)\n                    Reversible (Reversible a)\n                    IPersistentStack (IPersistentStack a)\n                    ILookup (ILookup Number a)\n                    Associative (Associative Number a)\n                    Indexed (Indexed a)}]\n\nAPersistentVector [[[a :variance :covariant]]\n                   :replace\n                   {IPersistentCollection (IPersistentCollection a)\n                    Seqable (Seqable a)\n                    Iterable (Iterable a)\n                    Collection (Collection a)\n                    java.util.List (java.util.List a)\n                    RandomAccess (RandomAccess a)\n                    IPersistentVector (IPersistentVector a)\n                    Reversible (Reversible a)\n                    IPersistentStack (IPersistentStack a)\n                    ILookup (ILookup Number a)\n                    Associative (Associative Number a)\n                    Indexed (Indexed a)}\n                   :unchecked-ancestors\n                   #{[Number -> a]}]\n\nPersistentVector [[[a :variance :covariant]]\n                  :replace\n                  {APersistentVector (APersistentVector a)\n                   IPersistentCollection (IPersistentCollection a)\n                   Iterable (Iterable a)\n                   Collection (Collection a)\n                   java.util.List (java.util.List a)\n                   RandomAccess (RandomAccess a)\n                   Seqable (Seqable a)\n                   IPersistentVector (IPersistentVector a)\n                   Reversible (Reversible a)\n                   IPersistentStack (IPersistentStack a)\n                   ILookup (ILookup Number a)\n                   Associative (Associative Number a)\n                   Indexed (Indexed a)\n                   #_IEditableCollection #_(IEditableCollection (ITransientVector a))}\n                  :unchecked-ancestors\n                  #{[Number -> a]}]\n\nIMapEntry [[[a :variance :covariant]\n            [b :variance :covariant]]]\n\nclojure.lang.AMapEntry \n          [[[a :variance :covariant]\n            [b :variance :covariant]]\n           :replace\n           {IMapEntry (IMapEntry a b)\n            Iterable (Iterable (U a b))\n            RandomAccess (RandomAccess (U a b))\n            IPersistentCollection (IPersistentCollection \n                                    (U a b))\n            java.util.List (java.util.List (U a b))\n            Collection (Collection (U a b))\n            Seqable (Seqable (U a b))\n            IPersistentVector (IPersistentVector (U a b))\n            Reversible (Reversible (U a b))\n            IPersistentStack (IPersistentStack (U a b))\n            ILookup (ILookup Number (U a b))\n            Associative (Associative Number (U a b))\n            Indexed (Indexed (U a b))\n            APersistentVector (APersistentVector (U a b))}\n           :unchecked-ancestors\n           #{'[a b]\n             [Number -> (U a b)]}]\n\nclojure.lang.MapEntry\n          [[[a :variance :covariant]\n            [b :variance :covariant]]\n           :replace\n           {IMapEntry (IMapEntry a b)\n            Iterable (Iterable (U a b))\n            RandomAccess (RandomAccess (U a b))\n            java.util.List (java.util.List (U a b))\n            Collection (Collection (U a b))\n            AMapEntry (AMapEntry a b)\n            IPersistentCollection (IPersistentCollection (U a b))\n            Seqable (Seqable (U a b))\n            IPersistentVector (IPersistentVector (U a b))\n            Reversible (Reversible (U a b))\n            IPersistentStack (IPersistentStack (U a b))\n            ILookup (ILookup Number (U a b))\n            Associative (Associative Number (U a b))\n            Indexed (Indexed (U a b))\n            APersistentVector (APersistentVector (U a b))}\n           :unchecked-ancestors\n           #{'[a b]\n             [Number -> (U a b)]}]\n\nIPersistentMap [[[a :variance :covariant]\n                 [b :variance :covariant]]\n                :replace\n                {IPersistentCollection (IPersistentCollection (AMapEntry a b))\n                 Iterable (Iterable (AMapEntry a b))\n                 Seqable (Seqable (AMapEntry a b))\n                 ILookup (ILookup a b)\n                 Associative (Associative a b)}]\n\nclojure.lang.ASeq [[[a :variance :covariant]]\n      :replace\n      {IPersistentCollection (IPersistentCollection a)\n       Iterable (Iterable a)\n       Collection (Collection a)\n       java.util.List (Collection a)\n       Seqable (Seqable a)\n       ISeq (ISeq a)\n       }]\n\nAPersistentMap [[[a :variance :covariant] \n                 [b :variance :covariant]]\n                :replace\n                {IPersistentCollection (IPersistentCollection (AMapEntry a b))\n                 Iterable (Iterable (AMapEntry a b))\n                 IPersistentMap (IPersistentMap a b)\n                 Seqable (Seqable (AMapEntry a b))\n                 ILookup (ILookup a b)\n                 Associative (Associative a b)}\n                :unchecked-ancestors\n                #{(All [d]\n                          (IFn [Any -> (U nil b)]\n                              [Any d -> (U b d)]))}]\n\n\nPersistentTreeMap [[[a :variance :covariant] \n                    [b :variance :covariant]]\n                   :replace\n                   {IPersistentCollection (IPersistentCollection (AMapEntry a b))\n                    Iterable (Iterable (AMapEntry a b))\n                    IPersistentMap (IPersistentMap a b)\n                    APersistentMap (APersistentMap a b)\n                    Seqable (Seqable (AMapEntry a b))\n                    ILookup (ILookup a b)\n                    Associative (Associative a b)\n                    Reversible (Reversible (AMapEntry a b))\n                    #_IEditableCollection #_(IEditableCollection (ITransientMap a b a b))}\n                   :unchecked-ancestors\n                   #{(All [d]\n                             (IFn [Any -> (U nil b)]\n                                 [Any d -> (U b d)]))}]\n\nPersistentHashMap [[[a :variance :covariant] \n                    [b :variance :covariant]]\n                   :replace\n                   {IPersistentCollection (IPersistentCollection (AMapEntry a b))\n                    Iterable (Iterable (AMapEntry a b))\n                    IPersistentMap (IPersistentMap a b)\n                    APersistentMap (APersistentMap a b)\n                    Seqable (Seqable (AMapEntry a b))\n                    ILookup (ILookup a b)\n                    Associative (Associative a b)\n                    #_IEditableCollection #_(IEditableCollection (ITransientMap a b a b))}\n                   :unchecked-ancestors\n                   #{(All [d]\n                             (IFn [Any -> (U nil b)]\n                                 [Any d -> (U b d)]))}]\n\nCons [[[a :variance :covariant]]\n      :replace\n      {IPersistentCollection (IPersistentCollection a)\n       Iterable (Iterable a)\n       Collection (Collection a)\n       java.util.List (java.util.List a)\n       clojure.lang.ASeq (clojure.lang.ASeq a)\n       Seqable (Seqable a)\n       ISeq (ISeq a)\n       }]\n\nIPersistentList [[[a :variance :covariant]]\n                 :replace\n                 {IPersistentCollection (IPersistentCollection a)\n                  Seqable (Seqable a)\n                  IPersistentStack (IPersistentStack a)}]\n\nPersistentList [[[a :variance :covariant]]\n                :replace\n                {IPersistentCollection (IPersistentCollection a)\n                 Iterable (Iterable a)\n                 Collection (Collection a)\n                 java.util.List (java.util.List a)\n                 clojure.lang.ASeq (clojure.lang.ASeq a)\n                 Seqable (Seqable a)\n                 IPersistentList (IPersistentList a)\n                 ISeq (ISeq a)\n                 IPersistentStack (IPersistentStack a)\n                 }]\n\nclojure.lang.Keyword [[]\n         :unchecked-ancestors\n         #{(All [x] \n                (IFn [(U nil (IPersistentMap Any x)) -> (U nil x)]\n                    [Any -> Any]))}]\n\nIDeref [[[r :variance :covariant]]]\nclojure.lang.IBlockingDeref [[[r :variance :covariant]]]\n\n\nIRef [[[w :variance :contravariant]\n       [r :variance :covariant]]\n      :replace\n      {IDeref (IDeref r)}]\n\nARef [[[w :variance :contravariant]\n       [r :variance :covariant]]\n      :replace\n      {IRef (IRef w r)\n       IDeref (IDeref r)}]\n\nclojure.lang.Ref \n     [[[w :variance :contravariant]\n       [r :variance :covariant]]\n      :replace\n      {IRef (IRef w r)\n       ARef (ARef w r)\n       IDeref (IDeref r)}]\n\nclojure.lang.Agent \n      [[[w :variance :contravariant]\n        [r :variance :covariant]]\n       :replace\n       {IRef (IRef w r)\n        IDeref (IDeref r)\n        }]\n\n\nclojure.lang.Delay [[[r :variance :covariant]]\n                    :replace\n                    {IDeref (IDeref r)}]\n\n;invoking Var as IFn is a special case in the checker\nclojure.lang.Var \n    [[[w :variance :contravariant]\n      [r :variance :covariant]]\n     :replace\n     {IRef (IRef w r)\n      IDeref (IDeref r)\n      ARef (ARef w r)}]\n\nclojure.lang.Atom \n     [[[w :variance :contravariant]\n       [r :variance :covariant]]\n      :replace\n      {ARef (ARef w r)\n       IRef (IRef w r)\n       IDeref (IDeref r)}]\n\nLazySeq [[[a :variance :covariant]]\n         :replace\n         {Seqable (Seqable a)\n          Collection (Collection a)\n          java.util.List (Collection a)\n          Iterable (Iterable a)\n          ISeq (ISeq a)\n          IPersistentCollection (IPersistentCollection a)}]\n\nReduced [[[a :variance :covariant]]\n         :replace\n         {IDeref (IDeref a)}]\n\n;;; We override the internal Java classes that clojure.lang.* classes use\n;;; and simulate some of them extending Clojure interfaces as if they were protocols\n\n; Hack for Seqable things. Not needed if Seqable was a protocol.\n\njava.lang.CharSequence [[]\n                        :unchecked-ancestors\n                        #{(Seqable Character)\n                          (Indexed Character)}]\n\n;FIXME Need to correctly check ancestors, this shouldn't be necessary because String is a CharSequence\n; CTYP-15\njava.lang.String [[]\n                  :unchecked-ancestors\n                  #{(Seqable Character)\n                    (Indexed Character)}]\n\njava.lang.Iterable [[[a :variance :covariant]]\n                    :unchecked-ancestors\n                    #{(Seqable a)}]\n\njava.util.Set [[[a :variance :covariant]]\n               :replace\n               {Iterable (Iterable a)\n                Collection (Collection a)}\n               :unchecked-ancestors\n               #{(Seqable a)}]\n\n\njava.util.List [[[a :variance :covariant]]\n                :replace\n                {Iterable (Iterable a)\n                 Collection (Collection a)}\n                :unchecked-ancestors\n                #{(Seqable a)}]\n\njava.util.Collection [[[a :variance :covariant]]\n                      :replace\n                      {Iterable (Iterable a)}\n                      :unchecked-ancestors\n                      #{(Seqable a)}]\n\njava.util.RandomAccess [[[a :variance :covariant]]\n                        :unchecked-ancestors\n                        #{(Indexed a)}]\n\n))", :ns "clojure.core.typed.base-env-clj-rclass", :name "init-altered-env", :file "clojure/core/typed/base_env_clj_rclass.clj", :column 1, :line 25, :arglists ([])}