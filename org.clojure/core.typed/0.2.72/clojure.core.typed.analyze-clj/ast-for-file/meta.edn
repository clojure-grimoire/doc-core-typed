{:type :fn, :src "(defn ast-for-file\n  \"Returns a vector of AST nodes contained\n  in the given file\"\n  [p]\n  {:pre [(string? p)]}\n  (let [pres (io/resource p)\n        _ (assert (instance? java.net.URL pres) (str \"Cannot find file: \" p))\n        file (-> pres io/reader slurp)\n        reader (readers/indexing-push-back-reader file 1 p)\n        eof  (reify)\n        asts (binding [*ns* *ns*\n                       *file* p]\n               (loop [asts []]\n                 (let [form (tr/read reader false eof)]\n                   (if (not= eof form)\n                     (let [a (analyze1 form (taj/empty-env))]\n                       (recur (conj asts a)))\n                     asts))))]\n    asts))", :ns "clojure.core.typed.analyze-clj", :name "ast-for-file", :file "clojure/core/typed/analyze_clj.clj", :column 1, :line 131, :arglists ([p]), :doc "Returns a vector of AST nodes contained\n  in the given file"}