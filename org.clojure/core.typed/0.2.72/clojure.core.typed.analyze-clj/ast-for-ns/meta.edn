{:type :fn, :src "(defn ast-for-ns \n  \"Returns a vector of AST nodes contained\n  in the given namespace symbol nsym\"\n  [nsym]\n  {:pre [((some-fn symbol? #(instance? clojure.lang.Namespace %)) \n          nsym)]\n   :post [(vector? %)]}\n  (u/p :analyze/ast-for-ns\n   (let [nsym (or (when (instance? clojure.lang.Namespace nsym)\n                    (ns-name nsym))\n                  ; don't call ns-name on symbols in case the namespace\n                  ; doesn't exist yet\n                  nsym)\n         _ (assert (symbol? nsym))\n         cache vs/*analyze-ns-cache*]\n     (if (and cache (cache/has? cache nsym))\n       (-> cache\n           (cache/hit nsym)\n           (cache/lookup nsym))\n       ;copied basic approach from tools.emitter.jvm\n       (let [p (coerce/ns->file nsym)\n             asts (ast-for-file p)]\n         (when cache\n           (cache/miss cache nsym asts))\n         asts)))))", :ns "clojure.core.typed.analyze-clj", :name "ast-for-ns", :file "clojure/core/typed/analyze_clj.clj", :column 1, :line 151, :arglists ([nsym]), :doc "Returns a vector of AST nodes contained\n  in the given namespace symbol nsym"}