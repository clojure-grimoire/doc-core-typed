{:type :fn, :src "(defn unwrap-datatype\n  \"Takes a DataType that might be wrapped in a TypeFn and returns the \n  DataType after instantiating it\"\n  ([dt nms]\n   {:pre [((some-fn r/DataType? r/TypeFn?) dt)\n          (every? symbol? nms)]\n    :post [(r/DataType? %)]}\n   (if (r/TypeFn? dt)\n     (c/TypeFn-body* nms dt)\n     dt))\n  ([dt] (let [nms (when (r/TypeFn? dt)\n                    (c/TypeFn-fresh-symbols* dt))]\n          (unwrap-datatype dt nms))))", :ns "clojure.core.typed.check.utils", :name "unwrap-datatype", :file "clojure/core/typed/check/utils.clj", :column 1, :line 316, :arglists ([dt nms] [dt]), :doc "Takes a DataType that might be wrapped in a TypeFn and returns the \n  DataType after instantiating it"}