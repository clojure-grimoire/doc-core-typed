{:type :fn, :src "(defn DataType-ctor-type [sym]\n  (letfn [(resolve-ctor [dtp]\n            (cond\n              ((some-fn r/DataType? r/Record?) dtp) \n              (let [dt dtp]\n                (r/make-FnIntersection \n                  (r/make-Function (-> (c/DataType-fields* dt) vals) dt)))\n\n              (r/TypeFn? dtp) (let [nms (c/TypeFn-fresh-symbols* dtp)\n                                    bbnds (c/TypeFn-bbnds* nms dtp)\n                                    body (c/TypeFn-body* nms dtp)]\n                                (c/Poly* nms\n                                         bbnds\n                                         (free-ops/with-bounded-frees (zipmap (map r/make-F nms) bbnds)\n                                           (resolve-ctor body))))\n\n              :else (err/tc-delayed-error (str \"Cannot generate constructor type for: \" sym)\n                                        :return r/Err)))]\n    (resolve-ctor (dt-env/get-datatype sym))))", :ns "clojure.core.typed.check.utils", :name "DataType-ctor-type", :file "clojure/core/typed/check/utils.clj", :column 1, :line 331, :arglists ([sym])}