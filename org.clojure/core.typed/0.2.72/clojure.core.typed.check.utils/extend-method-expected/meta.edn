{:type :fn, :src "(defn extend-method-expected \n  \"Returns the expected type with target-type intersected with the first argument\"\n  [target-type expected]\n  {:pre [(r/Type? target-type)\n         (r/Type? expected)]\n   :post [(r/Type? %)]}\n  (cond\n    (r/FnIntersection? expected)\n    (-> expected\n        (update-in [:types] #(for [ftype %]\n                               (do\n                                 (assert (<= 1 (count (:dom ftype))))\n                                 (-> ftype\n                                     (update-in [:dom] (fn [dom] \n                                                         (update-in (vec dom) [0] (partial c/In target-type)))))))))\n\n    (r/Poly? expected)\n    (let [names (c/Poly-fresh-symbols* expected)\n          body (c/Poly-body* names expected)\n          body (extend-method-expected target-type body)]\n      (c/Poly* names \n               (c/Poly-bbnds* names expected)\n               body))\n\n    (r/PolyDots? expected)\n    (let [names (c/PolyDots-fresh-symbols* expected)\n          body (c/PolyDots-body* names expected)\n          body (extend-method-expected target-type body)]\n      (c/PolyDots* names \n                   (c/PolyDots-bbnds* names expected)\n                   body))\n    :else (err/int-error (str \"Expected Function type, found \" (prs/unparse-type expected)))))", :ns "clojure.core.typed.check.utils", :name "extend-method-expected", :file "clojure/core/typed/check/utils.clj", :column 1, :line 206, :arglists ([target-type expected]), :doc "Returns the expected type with target-type intersected with the first argument"}