{:type :fn, :src "(defn relevant-Fns\n  \"Given a set of required-param exprs, rest-param expr, and a FnIntersection,\n  returns a seq of Functions containing Function types\n  whos arities could be a subtype to the method with the fixed and rest parameters given\"\n  [required-params rest-param fin]\n  {:pre [(r/FnIntersection? fin)]\n   :post [(every? r/Function? %)]}\n  (let [nreq (count required-params)]\n    ;(prn \"nreq\" nreq)\n    ;(prn \"rest-param\" rest-param)\n    (filter (fn [{:keys [dom rest drest kws]}]\n              (let [ndom (count dom)]\n                (if rest-param \n                  (or ; required parameters can flow into the rest type\n                      (when (or rest drest)\n                        (<= nreq ndom))\n                      ; kw functions must have exact fixed domain match\n                      (when kws\n                        (= nreq ndom)))\n                  (and (not rest) (= nreq ndom)))))\n            (:types fin))))", :ns "clojure.core.typed.check.utils", :name "relevant-Fns", :file "clojure/core/typed/check/utils.clj", :column 1, :line 395, :arglists ([required-params rest-param fin]), :doc "Given a set of required-param exprs, rest-param expr, and a FnIntersection,\n  returns a seq of Functions containing Function types\n  whos arities could be a subtype to the method with the fixed and rest parameters given"}