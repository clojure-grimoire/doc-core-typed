{:type :fn, :src "(defn Method->Type [{:keys [parameter-types return-type flags] :as method}]\n  {:pre [(instance? clojure.reflect.Method method)]\n   :post [(r/FnIntersection? %)]}\n  (let [msym (Method->symbol method)\n        nparams (count parameter-types)]\n    (r/make-FnIntersection (r/make-Function (doall (map (fn [[n tsym]] \n                                                          (Java-symbol->Type \n                                                            tsym \n                                                            (mtd-param-nil/nilable-param? msym nparams n)))\n                                                      (map-indexed vector\n                                                                   (if (:varargs flags)\n                                                                     (butlast parameter-types)\n                                                                     parameter-types))))\n                                          (Java-symbol->Type \n                                            return-type \n                                            (not (mtd-ret-nil/nonnilable-return? msym nparams)))\n                                          (when (:varargs flags)\n                                            (Java-symbol->Type \n                                              (last parameter-types) \n                                              (mtd-param-nil/nilable-param? msym nparams (dec nparams))))))))", :ns "clojure.core.typed.check.utils", :name "Method->Type", :file "clojure/core/typed/check/utils.clj", :column 1, :line 359, :arglists ([{:keys [parameter-types return-type flags], :as method}])}