{:type :fn, :src "(defn protocol-implementation-type [datatype {:keys [declaring-class] :as method-sig}]\n  (let [pvar (c/Protocol-interface->on-var declaring-class)\n        ptype (pcl-env/get-protocol pvar)\n        mungedsym (symbol (:name method-sig))\n        ans (map c/fully-resolve-type (sub/datatype-ancestors datatype))]\n    (when ptype\n      (let [pancestor (if (r/Protocol? ptype)\n                        ptype\n                        (let [[an :as relevant-ancestors] \n                              (filter \n                                (fn [a] \n                                  (and (r/Protocol? a)\n                                       (= (:the-var a) pvar)))\n                                ans)\n                              _ (when (empty? relevant-ancestors)\n                                  (err/int-error (str \"Must provide instantiated ancestor for datatype \"\n                                                    (:the-class datatype) \" to check protocol implementation: \"\n                                                    pvar)))\n                              _ (when (< 1 (count relevant-ancestors))\n                                  (err/int-error (str \"Ambiguous ancestors for datatype when checking protocol implementation: \"\n                                                    (pr-str (vec relevant-ancestors)))))]\n                          an))\n            _ (assert (r/Protocol? pancestor) (pr-str pancestor))\n            ;_ (prn \"pancestor\" pancestor)\n            pargs (seq (:poly? pancestor))\n            unwrapped-p (if (r/Protocol? ptype)\n                          ptype\n                          (c/instantiate-typefn ptype pargs))\n            _ (assert (r/Protocol? unwrapped-p))\n            mth (get-demunged-protocol-method unwrapped-p mungedsym)]\n        (extend-method-expected datatype mth)))))", :ns "clojure.core.typed.check.utils", :name "protocol-implementation-type", :file "clojure/core/typed/check/utils.clj", :column 1, :line 239, :arglists ([datatype {:keys [declaring-class], :as method-sig}])}