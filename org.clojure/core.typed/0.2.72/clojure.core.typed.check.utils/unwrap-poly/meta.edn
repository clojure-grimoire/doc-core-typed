{:type :fn, :src "(defn unwrap-poly\n  \"Return a pair vector of the instantiated body of the possibly polymorphic\n  type and the names used\"\n  [t]\n  {:pre [(r/Type? t)]\n   :post [((con/hvector-c? r/Type? \n                           (some-fn nil? (con/every-c? r/F?))\n                           (some-fn nil? (con/every-c? r/Bounds?))\n                           (some-fn nil? #{:Poly :PolyDots})) %)]}\n  (cond\n    (r/Poly? t) (let [new-nmes (c/Poly-fresh-symbols* t)\n                      new-frees (map r/make-F new-nmes)]\n                  [(c/Poly-body* new-nmes t) new-frees (c/Poly-bbnds* new-nmes t) :Poly])\n    (r/PolyDots? t) (let [new-nmes (c/PolyDots-fresh-symbols* t)\n                          new-frees (map r/make-F new-nmes)]\n                      [(c/PolyDots-body* new-nmes t) new-frees (c/PolyDots-bbnds* new-nmes t) :PolyDots])\n    :else [t nil nil nil]))", :ns "clojure.core.typed.check.utils", :name "unwrap-poly", :file "clojure/core/typed/check/utils.clj", :column 1, :line 84, :arglists ([t]), :doc "Return a pair vector of the instantiated body of the possibly polymorphic\n  type and the names used"}