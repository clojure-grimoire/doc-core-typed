{:type :fn, :src "(defn check-ns-and-deps*\n  \"Type check a namespace and its dependencies.\n  Assumes type annotations in each namespace\n  has already been collected.\"\n  ([nsym {:keys [ast-for-ns\n                 check-asts\n                 check-ns]}]\n   {:pre [(symbol? nsym)]\n    :post [(nil? %)]}\n   (u/p :check/check-ns-and-deps\n   (let []\n     (cond \n       (already-checked? nsym) (do\n                                 ;(println (str \"Already checked \" nsym \", skipping\"))\n                                 ;(flush)\n                                 nil)\n       :else\n       ; check deps\n       (let [deps (u/p :check/ns-immediate-deps \n                    (ns-deps/typed-deps nsym))]\n         (checked-ns! nsym)\n         ;check deps added with typed-deps\n         (doseq [dep deps]\n           (check-ns dep))\n         ;check normal dependencies\n         (doseq [dep (ns-depsu/deps-for-ns nsym)\n                 :when (ns-depsu/should-check-ns? nsym)]\n           (check-ns dep))\n         ; ignore ns declaration\n         (let [check? (ns-depsu/should-check-ns? nsym)]\n           (if-not check?\n             (do (println (str \"Not checking \" nsym \" (tagged :collect-only in ns metadata)\"))\n                 (flush))\n             (let [start (. System (nanoTime))\n                   asts (u/p :check/gen-analysis (ast-for-ns nsym))\n                   _ (println \"Start checking\" nsym)\n                   _ (flush)\n                   casts (check-asts asts)\n                   _ (assert (== (count casts) (count asts)))\n                   _ (when-let [checked-asts vs/*checked-asts*]\n                       (swap! checked-asts assoc nsym casts))\n                   _ (println \"Checked\" nsym \"in\" (/ (double (- (. System (nanoTime)) start)) 1000000.0) \"msecs\")\n                   _ (flush)\n                   ]\n         nil)))))))))", :ns "clojure.core.typed.check.utils", :name "check-ns-and-deps*", :file "clojure/core/typed/check/utils.clj", :column 1, :line 435, :arglists ([nsym {:keys [ast-for-ns check-asts check-ns]}]), :doc "Type check a namespace and its dependencies.\n  Assumes type annotations in each namespace\n  has already been collected."}