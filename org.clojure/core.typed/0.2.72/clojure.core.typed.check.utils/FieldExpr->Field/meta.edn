{:type :fn, :src "(defn FieldExpr->Field [{c :class field-name :field :keys [op] :as expr}]\n  {:pre []\n   :post [(instance? clojure.reflect.Field %)]}\n  (when (and c \n             (#{:static-field :instance-field} op))\n    (let [fs (->> (reflect-u/reflect c)\n                  :members\n                  (filter #(instance? clojure.reflect.Field %))\n                  (filter #(#{field-name} (:name %))))]\n      (assert (#{1} (count fs)))\n      (first fs))))", :ns "clojure.core.typed.check.utils", :name "FieldExpr->Field", :file "clojure/core/typed/check/utils.clj", :column 1, :line 276, :arglists ([{c :class, field-name :field, :keys [op], :as expr}])}