{:type :fn, :src "(defn MethodExpr->Method [{c :class method-name :method :keys [op args] :as expr}]\n  {:pre []\n   :post [(or (nil? %) (instance? clojure.reflect.Method %))]}\n  (when (and c \n             (#{:static-call :instance-call} op))\n    (let [ms (->> (reflect-u/reflect c)\n                  :members\n                  (filter #(instance? clojure.reflect.Method %))\n                  (filter #(#{method-name} (:name %)))\n                  (filter (fn [{:keys [parameter-types]}]\n                            (#{(map (comp reflect-u/reflect-friendly-sym :tag) args)} parameter-types))))]\n      ;(prn \"MethodExpr->Method\" c ms (map :tag args))\n      (first ms))))", :ns "clojure.core.typed.check.utils", :name "MethodExpr->Method", :file "clojure/core/typed/check/utils.clj", :column 1, :line 288, :arglists ([{c :class, method-name :method, :keys [op args], :as expr}])}