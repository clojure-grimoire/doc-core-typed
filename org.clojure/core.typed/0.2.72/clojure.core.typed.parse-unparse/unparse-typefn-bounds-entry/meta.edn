{:type :fn, :src "(defn unparse-typefn-bounds-entry [name {:keys [upper-bound lower-bound higher-kind]} v]\n  (let [name (-> name r/make-F r/F-original-name)\n        u (when upper-bound \n            (unparse-type upper-bound))\n        l (when lower-bound \n            (unparse-type lower-bound))\n        h (when higher-kind\n            (unparse-type higher-kind))]\n    (or (when higher-kind\n          [name :variance v :kind h])\n        (when-not (or (r/Top? upper-bound) (r/Bottom? lower-bound))\n          [name :variance v :< u :> l])\n        (when-not (r/Top? upper-bound) \n          [name :variance v :< u])\n        (when-not (r/Bottom? lower-bound)\n          [name :variance v :> l])\n        [name :variance v])))", :ns "clojure.core.typed.parse-unparse", :name "unparse-typefn-bounds-entry", :file "clojure/core/typed/parse_unparse.clj", :column 1, :line 1487, :arglists ([name {:keys [upper-bound lower-bound higher-kind]} v])}