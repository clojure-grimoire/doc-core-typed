{:type :fn, :src "(defn parse-type-fn \n  [[_ binder bodysyn :as tfn]]\n  (when-not (= 3 (count tfn))\n    (err/int-error (str \"Wrong number of arguments to TFn: \" (pr-str tfn))))\n  (when-not (every? vector? binder)\n    (err/int-error (str \"TFn binder should be vector of vectors: \" (pr-str tfn))))\n  (let [; don't scope a free in its own bounds. Should review this decision\n        free-maps (free-ops/with-free-symbols (map (fn [s]\n                                                     {:pre [(vector? s)]\n                                                      :post [(symbol? %)]}\n                                                     (first s))\n                                                   binder)\n                    (mapv parse-tfn-binder binder))\n        bodyt (free-ops/with-bounded-frees (into {}\n                                                 (map (fn [{:keys [nme bound]}] [(r/make-F nme) bound])\n                                                      free-maps))\n                (parse-type bodysyn))\n        ; We check variances lazily in TypeFn-body*. This avoids any weird issues with calculating\n        ; variances with potentially partially defined types.\n        ;vs (free-ops/with-bounded-frees (map (fn [{:keys [nme bound]}] [(r/make-F nme) bound])\n        ;                                     free-maps)\n        ;     (frees/fv-variances bodyt))\n        ;_ (doseq [{:keys [nme variance]} free-maps]\n        ;    (when-let [actual-v (vs nme)]\n        ;      (when-not (= (vs nme) variance)\n        ;        (err/int-error (str \"Type variable \" nme \" appears in \" (name actual-v) \" position \"\n        ;                          \"when declared \" (name variance))))))\n        ]\n    (c/TypeFn* (map :nme free-maps) (map :variance free-maps)\n               (map :bound free-maps) bodyt\n               {:meta {:env vs/*current-env*}})))", :ns "clojure.core.typed.parse-unparse", :name "parse-type-fn", :file "clojure/core/typed/parse_unparse.clj", :column 1, :line 498, :arglists ([[_ binder bodysyn :as tfn]])}