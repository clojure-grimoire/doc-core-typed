{:type :fn, :src "(defn parse-types-with-rest-drest [err-msg]\n  (fn [syns]\n    (let [rest? (#{'*} (last syns))\n          dotted? (#{'...} (-> syns butlast last))\n          _ (when (and rest? dotted?)\n              (err/int-error (str err-msg syns)))\n          {:keys [fixed rest drest]}\n          (cond\n            rest?\n            (let [fixed (mapv parse-type (drop-last 2 syns))\n                  rest (parse-type (-> syns butlast last))]\n              {:fixed fixed\n               :rest rest})\n            dotted?\n            (let [fixed (mapv parse-type (drop-last 3 syns))\n                  [drest-type _dots_ drest-bnd :as dot-syntax] (take-last 3 syns)\n                  ; should never fail, if the logic changes above it's probably\n                  ; useful to keep around.\n                  _ (when-not (#{3} (count dot-syntax))\n                      (err/int-error (str \"Bad vector syntax: \" dot-syntax)))\n                  bnd (dvar/*dotted-scope* drest-bnd)\n                  _ (when-not bnd\n                      (err/int-error (str (pr-str drest-bnd) \" is not in scope as a dotted variable\")))]\n              {:fixed fixed\n               :drest (r/DottedPretype1-maker\n                        (free-ops/with-frees [bnd] ;with dotted bound in scope as free\n                                             (parse-type drest-type))\n                        (:name bnd))})\n            :else {:fixed (mapv parse-type syns)})]\n      {:fixed fixed\n       :rest rest\n       :drest drest})))", :ns "clojure.core.typed.parse-unparse", :name "parse-types-with-rest-drest", :file "clojure/core/typed/parse_unparse.clj", :column 1, :line 569, :arglists ([err-msg])}