{:type :fn, :src "(defn parse-tfn-binder [[nme & opts-flat :as all]]\n  {:pre [(vector? all)]\n   :post [((con/hmap-c? :nme symbol? :variance r/variance?\n                        :bound r/Bounds?)\n           %)]}\n  (let [_ (when-not (even? (count opts-flat))\n            (err/int-error (str \"Uneven arguments passed to TFn binder: \"\n                              (pr-str all))))\n        {:keys [variance < >] \n         :or {variance :inferred}\n         :as opts} \n        (apply hash-map opts-flat)]\n    (when-not (symbol? nme)\n      (err/int-error \"Must provide a name symbol to TFn\"))\n    (when (contains? opts :kind)\n      (err/deprecated-warn \"kind annotation for TFn parameters\"))\n    (when-not (r/variance? variance)\n      (err/int-error (str \"Invalid variance: \" (pr-str variance))))\n    {:nme nme :variance variance\n     :bound (let [upper-or-nil (when (contains? opts :<)\n                                 (parse-type <))\n                  lower-or-nil (when (contains? opts :>)\n                                 (parse-type >))]\n              (c/infer-bounds upper-or-nil lower-or-nil))}))", :ns "clojure.core.typed.parse-unparse", :name "parse-tfn-binder", :file "clojure/core/typed/parse_unparse.clj", :column 1, :line 473, :arglists ([[nme & opts-flat :as all]])}