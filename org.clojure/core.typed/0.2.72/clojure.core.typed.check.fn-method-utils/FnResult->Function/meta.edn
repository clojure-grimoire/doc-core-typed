{:type :fn, :src "(defn FnResult->Function [{:keys [args kws rest drest body] :as fres}]\n  {:pre [(FnResult? fres)]\n   :post [(r/Function? %)]}\n  (u/p :check/FnResult->Function\n  (let [; names of formal parameters to abstract from result type\n        rest-param-name (or (first rest)\n                            (first drest)\n                            (first kws))\n        arg-names (concat (map first args)\n                          (when rest-param-name\n                            [rest-param-name]))]\n    (r/Function-maker\n      (map second args)\n      (abo/abstract-result body arg-names)\n      (when rest\n        (second rest))\n      (when drest\n        (second drest))\n      (when kws\n        (second kws))))))", :ns "clojure.core.typed.check.fn-method-utils", :name "FnResult->Function", :file "clojure/core/typed/check/fn_method_utils.clj", :column 1, :line 26, :arglists ([{:keys [args kws rest drest body], :as fres}])}