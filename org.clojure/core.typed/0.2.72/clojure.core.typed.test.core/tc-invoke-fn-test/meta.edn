{:type :fn, :src "(deftest tc-invoke-fn-test\n  (is-clj (subtype? (ety\n                      ((clojure.core.typed/fn> [a :- Number, b :- Number] b)\n                       1 2))\n                    (parse-type `Number)))\n  ; manual instantiation \"seq\"\n  ;FIXME randomly fails. Try again when I/U are sorted sets.\n  (is-clj (subtype? (ety\n                      ((clojure.core.typed/fn> [a :- (clojure.lang.Seqable Number), b :- Number] \n                                               ((clojure.core.typed/inst seq Number) a))\n                       [1 2 1.2] 1))\n                    (parse-type `(Option (I (clojure.lang.ISeq java.lang.Number) (CountRange 1))))))\n  ; inferred \"seq\"\n  (is-clj (subtype? (ety\n                      (clojure.core.typed/fn> [a :- (clojure.lang.Seqable Number), b :- Number] \n                                              1))\n                    (make-FnIntersection\n                      (make-Function\n                        [(RClass-of Seqable [(RClass-of Number nil)]) (RClass-of Number nil)] \n                        (-val 1)\n                        nil nil\n                        :filter (-FS -top -bot)\n                        :object -empty))))\n  ; poly inferred \"seq\"\n  ; FIXME pfn> NYI\n  #_(is-clj (= (ety\n           (clojure.core.typed/pfn> [c] \n                            [[a :- (clojure.lang.Seqable c)] \n                             [b :- Number]] \n                            1))\n         (let [x (make-F 'x)]\n           (Poly* [(:name x)]\n                  [no-bounds]\n                  (make-FnIntersection\n                    (make-Function\n                      [(RClass-of Seqable [x]) (RClass-of Number)] \n                      (-val 1)\n                      nil nil\n                      :filter (-FS -top -bot)\n                      :object -empty))))))\n  ;test invoke fn\n  (is-clj (subtype? (ety\n                      ((clojure.core.typed/fn> [a :- (clojure.lang.Seqable Number), b :- Number] \n                                               (seq a))\n                       [1 2 1.2] 1))\n                    (parse-type `(U nil (I (CountRange 1) (clojure.lang.ISeq Number))))))\n  (is-clj (subtype? (ety\n                      ((clojure.core.typed/fn> [a :- (clojure.lang.IPersistentMap clojure.core.typed/Any Number), b :- Number] \n                                               ((clojure.core.typed/inst get Number clojure.core.typed/Nothing) a b))\n                       (zipmap [1] [2]) 1))\n                    (parse-type `(U nil Number)))))", :ns "clojure.core.typed.test.core", :name "tc-invoke-fn-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 169, :test #<core$fn__22882 clojure.core.typed.test.core$fn__22882@4f8c8136>}