{:type :fn, :src "(defn print-env*\n  ([] (print-env* lex/*lexical-env*))\n  ([e]\n   {:pre [(lex/PropEnv? e)]}\n   ;; DO NOT REMOVE\n   (let [tvar-scope tvar-env/*current-tvars*\n         tvar-bounds tvar-bnds/*current-tvar-bnds*\n         scoped-names (keys tvar-scope)\n         actual-names (map :name (vals tvar-scope))\n         _ (every? symbol? actual-names)\n         actual-bnds (map tvar-bounds actual-names)]\n     (prn {:env (into {} (for [[k v] (:l e)]\n                           [k (prs/unparse-type v)]))\n           :props (map prs/unparse-filter (:props e))\n           ;:frees (map (t/fn> \n           ;              [nme :- t/Sym, bnd :- (U nil Bounds)]\n           ;              {:pre [(symbol? nme)\n           ;                     ((some-fn nil? r/Bounds?) bnd)]}\n           ;              (if bnd\n           ;                (prs/unparse-poly-bounds-entry nme bnd)\n           ;                [nme 'NO-BOUNDS]))\n           ;            scoped-names\n           ;            actual-bnds)\n           ;:tvar-scope tvar-scope\n           ;:tvar-bnds tvar-bounds\n           }))))", :ns "clojure.core.typed.check.print-env", :name "print-env*", :file "clojure/core/typed/check/print_env.clj", :column 1, :line 7, :arglists ([] [e])}