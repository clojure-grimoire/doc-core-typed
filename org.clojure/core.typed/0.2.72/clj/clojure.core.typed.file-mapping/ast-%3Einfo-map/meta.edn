{:type :fn, :src "(defn ast->info-map \n  [ast]\n  (letfn [(mapping-key [{:keys [env] :as ast}]\n            (let [ks [:line :column :file]]\n              (when ((apply every-pred ks) env)\n                (select-keys env ks))))]\n    (case (:op ast)\n      ; Functions can be checked any number of times. Each\n      ; check is stored in the ::t/cmethods entry.\n      :fn (let [method-mappings (for [method (::t/cmethods ast)]\n                                  (let [ftype (::t/ftype method)\n                                        _ (assert (r/Function? ftype))\n                                        ;floc (mapping-key ast)\n                                        ;_ (assert floc (select-keys (:env ast) [:line :file :column]))\n                                        ]\n                                    (binding [*fn-stack* (conj *fn-stack* {;:loc floc\n                                                                           :name (cu/fn-self-name ast)\n                                                                           :ftype ftype})]\n                                      (ast->info-map method))))\n                v [{:expr ast\n                    :fn-stack *fn-stack*}]\n                this-file (-> ast :env :file)\n                _ (assert (string? this-file))]\n            (merge\n              (apply merge-with\n                     (fn [a b] (vec (concat a b)))\n                     method-mappings)\n              (let [{:keys [line column end-line end-column]} (-> ast :form meta)]\n                (if (and line column end-line end-column)\n                  (merge {{:file this-file :line line :column column} v}\n                         {{:file this-file :line end-line :column (dec end-column)} v})\n                  (when-let [k (mapping-key ast)]\n                    {k v})))))\n      (apply merge \n             (concat (map ast->info-map (ast-ops/children ast))\n                     (let [{:keys [line column end-line end-column]} (-> ast :form meta)\n                           this-file (-> ast :env :file)\n                           _ (assert (string? this-file))\n                           v [{:expr ast\n                               :fn-stack *fn-stack*}]]\n                       (if (and line column end-line end-column)\n                         (if (and (symbol? (:form ast))\n                                  (== line end-line))\n                           (for [c (range column end-column)]\n                             {{:file this-file :line line :column c} v})\n                           [{{:file this-file :line line :column column} v}\n                            {{:file this-file \n                              :line end-line \n                              :column (dec end-column)}\n                             v}])\n                         (when-let [k (mapping-key ast)]\n                           [{k v}]))))))))", :ns "clojure.core.typed.file-mapping", :name "ast->info-map", :file "clojure/core/typed/file_mapping.clj", :column 1, :line 18, :arglists ([ast])}