{:type :fn, :src "(defn info-map->msg-map [info-map]\n  (into {} (for [[k v] info-map]\n             (let [msg (if (< 1 (count v))\n                         (let [ms (seq\n                                    (filter identity\n                                            (map (fn [{:keys [expr fn-stack]}]\n                                                   (let [r (u/expr-type expr)]\n                                                     (when (r/TCResult? r)\n                                                       (prs/with-unparse-ns (cu/expr-ns expr)\n                                                         (str\n                                                           \"In context size \" (count fn-stack) \":\\n\\t\"\n                                                           (pr-str (prs/unparse-type (r/ret-t r)))\n                                                           \"\\n\")))))\n                                                 v)))]\n                           (when ms\n                             (apply str ms)))\n                         (let [{:keys [expr]} (first v)\n                               r (u/expr-type expr)]\n                           (prs/with-unparse-ns (cu/expr-ns expr)\n                             (when (r/TCResult? r)\n                               (pr-str (prs/unparse-type (r/ret-t r)))))))]\n               (when msg\n                 [k msg])))))", :ns "clojure.core.typed.file-mapping", :name "info-map->msg-map", :file "clojure/core/typed/file_mapping.clj", :column 1, :line 74, :arglists ([info-map])}