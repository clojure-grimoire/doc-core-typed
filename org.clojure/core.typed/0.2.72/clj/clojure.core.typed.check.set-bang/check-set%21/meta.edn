{:type :fn, :src "(defn check-set! [check {:keys [target val env] :as expr} expected]\n  (binding [vs/*current-expr* expr\n            vs/*current-env* env]\n    (let [ctarget (check target)\n          cval (check val (u/expr-type ctarget))\n          _ (when-not (sub/subtype? \n                        (-> cval u/expr-type r/ret-t)\n                        (-> ctarget u/expr-type r/ret-t))\n              (err/tc-delayed-error (str \"Cannot set! \" (-> ctarget u/expr-type r/ret-t prs/unparse-type pr-str)\n                                         \" to \" (-> cval u/expr-type r/ret-t prs/unparse-type pr-str))))\n          _ (when expected\n              (let [actual (-> cval u/expr-type r/ret-t)\n                    et (r/ret-t expected)]\n                (when-not (sub/subtype? actual et)\n                  (cu/expected-error actual et))))]\n      (assoc expr\n             u/expr-type (u/expr-type cval)\n             :target ctarget\n             :val cval))))", :ns "clojure.core.typed.check.set-bang", :name "check-set!", :file "clojure/core/typed/check/set_bang.clj", :column 1, :line 10, :arglists ([check {:keys [target val env], :as expr} expected])}