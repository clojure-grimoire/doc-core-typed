{:type :fn, :src "(defn load-impl []\n  (cond \n    (and @attempted-loading?\n         (not @successfully-loaded?))\n    (throw (Exception. \n             (str \"There was previously an unrecoverable internal error while loading core.typed.\" \n                  \" Please restart your process.\")))\n\n    (and @successfully-loaded? @attempted-loading?)\n    nil\n\n    :else\n    (do\n      (try\n        (reset! attempted-loading? true)\n        (require '[clojure.core.typed.utils]\n                 '[clojure.core.typed.type-rep]\n                 '[clojure.core.typed.type-ctors]\n                 '[clojure.core.typed.filter-rep]\n                 '[clojure.core.typed.filter-ops]\n                 '[clojure.core.typed.subst]\n                 '[clojure.core.typed.path-rep]\n                 '[clojure.core.typed.object-rep]\n                 '[clojure.core.typed.fold-rep]\n                 '[clojure.core.typed.fold-default]\n                 '[clojure.core.typed.parse-unparse]\n                 '[clojure.core.typed.lex-env]\n                 '[clojure.core.typed.var-env]\n                 '[clojure.core.typed.parse-unparse]\n                 '[clojure.core.typed.current-impl]\n                 '[clojure.core.typed.dvar-env]\n                 '[clojure.core.typed.datatype-ancestor-env]\n                 '[clojure.core.typed.datatype-env]\n                 '[clojure.core.typed.protocol-env]\n                 '[clojure.core.typed.method-override-env]\n                 '[clojure.core.typed.ctor-override-env]\n                 '[clojure.core.typed.method-return-nilables]\n                 '[clojure.core.typed.method-param-nilables]\n                 '[clojure.core.typed.declared-kind-env]\n                 '[clojure.core.typed.name-env]\n                 '[clojure.core.typed.rclass-env]\n                 '[clojure.core.typed.mm-env]\n                 '[clojure.core.typed.constant-type]\n                 '[clojure.core.typed.parse-unparse]\n                 '[clojure.core.typed.frees]\n                 '[clojure.core.typed.free-ops]\n                 '[clojure.core.typed.cs-gen]\n                 '[clojure.core.typed.trans]\n                 '[clojure.core.typed.inst]\n                 '[clojure.core.typed.subtype]\n                 '[clojure.core.typed.array-ops]\n                 '[clojure.core.typed.check]\n                 '[clojure.core.typed.reset-caches]\n                 '[clojure.core.typed.check-ns-common]\n                 '[clojure.core.typed.check-ns-clj]\n                 '[clojure.core.typed.check-form-common]\n                 '[clojure.core.typed.check-form-clj]\n                 '[clojure.core.typed.statistics]\n                 ; used by check-ns-info\n                 '[clojure.jvm.tools.analyzer]\n\n                 '[clojure.core.typed.file-mapping]\n                 '[clojure.core.typed.collect-phase]\n                 '[clojure.core.typed.base-env]\n                 '[clojure.core.typed.ns-deps]\n                 '[clojure.core.typed.reset-env]\n                 '[clojure.core.typed.tvar-env]\n                 '[clojure.core.typed.tvar-bnds]\n                 '[clojure.core.typed.rclass-ancestor-env]\n                 '[clojure.core.typed.all-envs]\n                 '[clojure.reflect])\n        (when (io/resource \"cljs/analyzer.clj\")\n          (do\n            (println \"Found ClojureScript, loading ...\")\n            (flush)\n            (require\n              '[cljs.analyzer]\n              '[clojure.core.typed.collect-cljs]\n              '[clojure.core.typed.check-cljs]\n              '[clojure.core.typed.jsnominal-env]\n              '[clojure.core.typed.base-env-cljs]\n              '[clojure.core.typed.check-ns-cljs]\n              '[clojure.core.typed.check-form-cljs]\n              '[clojure.core.typed.check-ns-cljs]\n              '[clojure.core.typed.base-env-helper-cljs])\n            (reset! cljs-present? true)\n            (println \"Finished loading ClojureScript\")\n            (flush)))\n        (catch Exception e\n          (reset! successfully-loaded? false)\n          (throw e)))\n      (reset! successfully-loaded? true)\n      (println \"Building core.typed base environments ...\")\n      (flush)\n      (impl/with-clojure-impl\n        ((impl/v 'clojure.core.typed.reset-env/reset-envs!)))\n      (when (cljs?)\n        (impl/with-cljs-impl\n          ((impl/v 'clojure.core.typed.reset-env/reset-envs!))))\n      (println \"Finished building base environments\")\n      (flush)\n      nil)))", :ns "clojure.core.typed.init", :name "load-impl", :file "clojure/core/typed/init.clj", :column 1, :line 17, :arglists ([])}