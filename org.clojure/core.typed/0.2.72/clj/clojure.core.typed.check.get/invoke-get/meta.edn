{:type :fn, :src "(defn invoke-get [{:keys [args] :as expr} expected & {:keys [cargs]}]\n  {:pre [(vector? cargs)]\n   :post [((some-fn \n             #(-> % u/expr-type r/TCResult?)\n             #{cu/not-special})\n           %)]}\n  (assert (#{:invoke :static-call} (:op expr)) (:op expr))\n  (assert (vector? cargs))\n  (assert (#{2 3} (count args)) \"Wrong number of args to clojure.core/get\")\n  (let [[ctarget ckw cdefault] cargs\n        kwr (u/expr-type ckw)]\n    (cond\n      (c/keyword-value? (r/ret-t kwr))\n      (assoc expr\n             :args cargs\n             u/expr-type (invoke-kw/invoke-keyword \n                           expr\n                           kwr\n                           (u/expr-type ctarget)\n                           (when cdefault\n                             (u/expr-type cdefault))\n                           expected))\n\n;      ((every-pred r/Value? (comp integer? :val)) (ret-t kwr))\n;      (err/nyi-error (str \"get lookup of vector (like nth) NYI\"))\n\n      :else cu/not-special)))", :ns "clojure.core.typed.check.get", :name "invoke-get", :file "clojure/core/typed/check/get.clj", :column 1, :line 8, :arglists ([{:keys [args], :as expr} expected & {:keys [cargs]}])}