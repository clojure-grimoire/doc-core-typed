{:ns "clojure.core.typed.test.protocol-monads", :name "chain", :file "clojure/core/typed/test/protocol_monads.clj", :type :fn, :src "(defn chain\n  \"Chains together monadic computation steps that are each functions\n   of one parameter. Each step is called with the result of the previous\n   step as its argument. (m-chain (step1 step2)) is equivalent to\n   (fn [x] (domonad [r1 (step1 x) r2 (step2 r1)] r2)).\"\n  [steps]\n  (fn [x]\n    (let [mv ((first steps) x)\n          chain (reduce (fn [chain step]\n                          (fn [x]\n                            (bind (step x) chain)))\n                        (partial do-result mv)\n                        (reverse (rest steps)))]\n      (bind mv chain))))", :column 1, :line 98, :arglists ([steps]), :doc "Chains together monadic computation steps that are each functions\n   of one parameter. Each step is called with the result of the previous\n   step as its argument. (m-chain (step1 step2)) is equivalent to\n   (fn [x] (domonad [r1 (step1 x) r2 (step2 r1)] r2))."}