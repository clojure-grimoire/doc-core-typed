{:type :fn, :src "(deftype list-transformer [m v]\n  clojure.lang.IDeref\n  (deref [_]\n    v)\n\n  Monad\n  (do-result [_ v]\n    (list-transformer. m (m (list v))))\n  (bind [mv f]\n    (let [v (deref mv)]\n      (list-transformer. m (bind v (fn [xs]\n                                     (if (clojure.core/seq xs)\n                                       (->> xs\n                                            (map (comp deref f))\n                                            (fmap (partial apply lazy-concat)))\n                                       (m '())))))))\n\n  MonadZero\n  (zero [_]\n    (list-transformer. m (m '())))\n  (plus-step [mv mvs]\n    (list-transformer.\n     m (reduce (lift concat)\n               (m '())\n               (clojure.core/map deref (cons mv mvs))))))", :ns "clojure.core.typed.test.protocol-monads", :name "->list-transformer", :file "clojure/core/typed/test/protocol_monads.clj", :column 1, :line 493, :arglists ([m v]), :doc "Positional factory function for class clojure.core.typed.test.protocol_monads.list-transformer."}