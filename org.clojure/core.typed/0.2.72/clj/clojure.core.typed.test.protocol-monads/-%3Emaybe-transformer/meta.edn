{:type :fn, :src "(deftype maybe-transformer [m v]\n  clojure.lang.IDeref\n  (deref [_]\n    v)\n\n  Monad\n  (do-result [_ v]\n    (maybe-transformer. m (m (maybe v))))\n  (bind [mv f]\n    (let [v (deref mv)]\n      (maybe-transformer. m (bind v (fn [x]\n                                      (if (= x maybe-zero-val)\n                                        (m maybe-zero-val)\n                                        (deref (f (deref x)))))))))\n\n  MonadZero\n  (zero [_]\n    (maybe-transformer. m (m maybe-zero-val)))\n  (plus-step [mv mvs]\n    (maybe-transformer.\n     m (bind (deref mv)\n             (fn [x]\n               (cond\n                (and (= x maybe-zero-val) (empty? mvs)) (m maybe-zero-val)\n                (= x maybe-zero-val) (deref (plus mvs))\n                :else (m x)))))))", :ns "clojure.core.typed.test.protocol-monads", :name "->maybe-transformer", :file "clojure/core/typed/test/protocol_monads.clj", :column 1, :line 457, :arglists ([m v]), :doc "Positional factory function for class clojure.core.typed.test.protocol_monads.maybe-transformer."}