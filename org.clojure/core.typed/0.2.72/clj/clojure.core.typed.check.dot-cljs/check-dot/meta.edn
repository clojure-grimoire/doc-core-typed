{:type :fn, :src "(defn check-dot [check {:keys [target field method args] :as dot-expr} expected]\n  (let [ctarget (check target)\n        target-t (-> ctarget u/expr-type r/ret-t)\n        resolved (let [t (c/fully-resolve-type target-t)]\n                   ;TODO DataType\n                   (when ((some-fn r/JSNominal? \n                                   r/StringCLJS?\n                                   #_r/DataType?) t)\n                     t))]\n    (if resolved\n      (cond\n        field\n        (let [field-type (cond\n                           (r/StringCLJS? resolved)\n                           (jsnom/get-field 'string nil field)\n                           (r/JSNominal? resolved)\n                           (jsnom/get-field (:name resolved) (:poly? resolved) field))\n              _ (assert field-type (str \"Don't know how to get field \" field\n                                        \" from \" (prs/unparse-type resolved)))]\n          (assoc dot-expr\n                 u/expr-type (r/ret field-type)))\n        :else\n        (let [method-type (cond\n                            (r/StringCLJS? resolved)\n                            (jsnom/get-method 'string nil method)\n                            (r/JSNominal? resolved)\n                            (jsnom/get-method (:name resolved) (:poly? resolved) method))\n              _ (assert method-type (str \"Don't know how to call method \" method\n                                         \" from \" (prs/unparse-type resolved)))\n              cargs (mapv check args)\n              actual (funapp/check-funapp nil cargs (r/ret method-type) (map u/expr-type cargs)\n                                          expected)]\n          (assoc dot-expr\n                 u/expr-type actual)))\n      (err/tc-delayed-error (str \"Don't know how to use type \" (prs/unparse-type target-t)\n                                 \" with \"\n                                 (if field (str \"field \" field)\n                                   (str \"method \" method)))\n                            :return \n                            (assoc dot-expr\n                                   u/expr-type (r/ret (or (when expected\n                                                            (r/ret-t expected))\n                                                          (r/TCError-maker))))))))", :ns "clojure.core.typed.check.dot-cljs", :name "check-dot", :file "clojure/core/typed/check/dot_cljs.clj", :column 1, :line 10, :arglists ([check {:keys [target field method args], :as dot-expr} expected])}