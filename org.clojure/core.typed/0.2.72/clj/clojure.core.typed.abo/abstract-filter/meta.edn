{:type :fn, :src "(defn abstract-filter [ids keys fs]\n  {:pre [(every? symbol? ids)\n         (every? integer? keys)\n         ((some-fn fl/NoFilter? fl/FilterSet?) fs)]\n   :post [((some-fn fl/NoFilter? fl/FilterSet?) %)]}\n  ;(prn \"abstract filter\" ids keys fs)\n  (cond\n    (fl/FilterSet? fs)\n    (let [{fs+ :then fs- :else} fs]\n      (fo/-FS (abo ids keys fs+)\n              (abo ids keys fs-)))\n    (fl/NoFilter? fs) (fo/-FS fl/-top fl/-top)))", :ns "clojure.core.typed.abo", :name "abstract-filter", :file "clojure/core/typed/abo.clj", :column 1, :line 58, :arglists ([ids keys fs])}