{:type :fn, :src "(defn check-normal-def [check-fn {:keys [init env] :as expr} & [expected]]\n  {:post [(:init %)]}\n  (let [init-provided (contains? expr :init)\n        _ (assert init-provided)\n        vsym (ast-u/def-var-name expr)\n        warn-if-unannotated? (ns-opts/warn-on-unannotated-vars? (cu/expr-ns expr))\n        t (var-env/lookup-Var-nofail vsym)\n        check? (var-env/check-var? vsym)\n        cljs-ret (r/ret r/-any)]\n    (cond\n      ; check against an expected type\n      (and check? t)\n      (let [cinit (when init-provided\n                    (binding [vs/*current-env* (:env init)\n                              vs/*current-expr* init]\n                      (check-fn init (r/ret t))))\n            _ (when cinit\n                ; now consider this var as checked\n                (var-env/add-checked-var-def vsym))]\n        (assoc expr\n               :init cinit\n               u/expr-type (impl/impl-case\n                             :clojure (r/ret (c/RClass-of Var [t t]))\n                             :cljs cljs-ret)))\n\n      ; if warn-if-unannotated?, don't try and infer this var,\n      ; just skip it\n      (or (not check?) \n          (and warn-if-unannotated?\n               (not t)))\n      (do (println (when-let [line (-> expr :env :line)] \n                     (str line \": \")) \n                   \"Not checking\" vsym \"definition\")\n          (flush)\n          (assoc expr\n                 u/expr-type (impl/impl-case\n                               :clojure (r/ret (c/RClass-of Var [(or t r/-nothing) (or t r/-any)]))\n                               :cljs cljs-ret)))\n\n      ;otherwise try and infer a type\n      :else\n      (let [_ (assert (not t))\n            cinit (when init-provided\n                    (check-fn init))\n            inferred (r/ret-t (u/expr-type cinit))\n            _ (assert (r/Type? inferred))\n            _ (when cinit\n                ; now consider this var as checked\n                (var-env/add-checked-var-def vsym)\n                ; and add the inferred static type (might be Error)\n                (var-env/add-var-type vsym inferred))]\n        (assoc expr\n               :init cinit\n               u/expr-type (impl/impl-case\n                             :clojure (r/ret (c/RClass-of Var [inferred inferred]))\n                             :cljs cljs-ret))))))", :ns "clojure.core.typed.check.def", :name "check-normal-def", :file "clojure/core/typed/check/def.clj", :column 1, :line 16, :arglists ([check-fn {:keys [init env], :as expr} & [expected]])}