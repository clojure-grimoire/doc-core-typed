{:type :fn, :src "(deftest env+-test\n  ;test basic TypeFilter\n  ;update a from clojure.core.typed/Any to (Value :a)\n  (is-clj (let [props [(-filter (-val :a) 'a)]\n            flag (atom true)]\n        (and (= (let [env {'a -any}\n                      lenv (-PropEnv env props)]\n                  (env+ lenv [] flag))\n                (-PropEnv {'a (-val :a)} props))\n             @flag)))\n  ;test positive KeyPE\n  ;update a from (U (HMap :mandatory {:op :if}) (HMap :mandatory {:op :var})) => (HMap :mandatory {:op :if})\n  (is-clj (let [props [(-filter (-val :if) 'a [(-kpe :op)])]\n            flag (atom true)]\n        (and (= (let [env {'a (Un (make-HMap :mandatory {(-val :op) (-val :if)})\n                                  (make-HMap :mandatory {(-val :op) (-val :var)}))}\n                      lenv (-PropEnv env props)]\n                  (env+ lenv [] flag))\n                (-PropEnv {'a (make-HMap :mandatory {(-val :op) (-val :if)})} props))\n             @flag)))\n  ;test negative KeyPE\n  (is-clj (let [props [(-not-filter (-val :if) 'a [(-kpe :op)])]\n            flag (atom true)]\n        (and (= (let [env {'a (Un (make-HMap :mandatory {(-val :op) (-val :if)})\n                                  (make-HMap :mandatory {(-val :op) (-val :var)}))}\n                      lenv (-PropEnv env props)]\n                  (env+ lenv [] flag))\n                (-PropEnv {'a (make-HMap :mandatory {(-val :op) (-val :var)})} props))\n             @flag)))\n  ;test impfilter\n  (is-clj (let [{:keys [l props]}\n            (env+ (-PropEnv {'a (Un -false -true) 'b (Un -nil -true)}\n                             [(ImpFilter-maker (-not-filter -false 'a)\n                                           (-filter -true 'b))])\n                  [(-not-filter (Un -nil -false) 'a)]\n                  (atom true))]\n        (and (= l {'a -true, 'b -true})\n             (= (set props)\n                #{(-not-filter (Un -nil -false) 'a)\n                  (-filter -true 'b)}))))\n  ; more complex impfilter\n  (is-with-aliases (= (env+ (-PropEnv {'and1 (Un -false -true)\n                                       'tmap (Name-maker 'clojure.core.typed.test.util-aliases/UnionName)}\n                                      [(ImpFilter-maker (-filter (Un -nil -false) 'and1)\n                                                    (-not-filter (-val :MapStruct1)\n                                                                 'tmap\n                                                                 [(-kpe :type)]))\n                                       (ImpFilter-maker (-not-filter (Un -nil -false) 'and1)\n                                                    (-filter (-val :MapStruct1)\n                                                             'tmap\n                                                             [(-kpe :type)]))])\n                            [(-filter (Un -nil -false) 'and1)]\n                            (atom true))))\n  ; refine a subtype\n  (is-clj (= (:l (env+ (-PropEnv {'and1 (RClass-of Seqable [-any])} [])\n                       [(-filter (RClass-of IPersistentVector [-any]) 'and1)]\n                       (atom true)))\n             {'and1 (RClass-of IPersistentVector [-any])}))\n  ; bottom preserved\n  (is-clj (let [a (atom true)]\n        (env+ (-PropEnv {'foo -any} []) [-bot] a)\n        (false? @a))))", :ns "clojure.core.typed.test.core", :name "env+-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 387, :test #<core$fn__25795 clojure.core.typed.test.core$fn__25795@223b3489>}