{:type :fn, :src "(defn gen-protocol* [current-env current-ns vsym binder mths]\n  {:pre [(symbol? current-ns)]}\n  (let [_ (when-not (symbol? vsym)\n            (err/int-error\n              (str \"First argument to ann-protocol must be a symbol: \" vsym)))\n        s (if (namespace vsym)\n            (symbol vsym)\n            (symbol (str current-ns) (name vsym)))\n        ;_ (prn \"gen-protocol*\" s)\n        protocol-defined-in-nstr (namespace s)\n        on-class (c/Protocol-var->on-class s)\n        ; add a Name so the methods can be parsed\n        _ (nme-env/declare-protocol* s)\n        ;_ (prn \"gen-protocol before parsed-binder\")\n        parsed-binder (when binder \n                        (binding [prs/*parse-type-in-ns* current-ns]\n                          (prs/parse-free-binder-with-variance binder)))\n        ;_ (prn \"gen-protocol after parsed-binder\")\n        fs (when parsed-binder\n             (map (comp r/make-F :fname) parsed-binder))\n        bnds (when parsed-binder\n               (map :bnd parsed-binder))\n        _ (assert (= (count fs) (count bnds)))\n        _ (assert ((some-fn nil? map?) mths))\n        _ (when-let [[m] (seq (remove symbol? (keys mths)))]\n            (err/int-error (str \"Method names to ann-protocol must be symbols: \" m)))\n        _ (doseq [[n1 n2] (comb/combinations (keys mths) 2)]\n            (when (= (munge n1) (munge n2))\n              (err/int-error \n                (str \"Protocol methods for \" vsym \" must have distinct representations: \"\n                     \"both \" n1 \" and \" n2 \" compile to \" (munge n1)))))\n        ms (into {} (for [[knq v] mths]\n                      (let [_ (when (namespace knq)\n                                (err/int-error \"Protocol method should be unqualified\"))\n                            mtype (free-ops/with-bounded-frees (zipmap fs bnds)\n                                    (binding [vs/*current-env* current-env\n                                              prs/*parse-type-in-ns* current-ns]\n                                      (prs/parse-type v)))]\n                         (let [rt (c/fully-resolve-type mtype)\n                               fin? (fn [f]\n                                      (let [f (c/fully-resolve-type f)]\n                                        (boolean\n                                          (when (r/FnIntersection? f)\n                                            (every? seq (map :dom (:types f)))))))]\n                           (when-not \n                             (or\n                               (fin? rt)\n                               (when (r/Poly? rt) \n                                 (let [names (c/Poly-fresh-symbols* rt)]\n                                   (fin? (c/Poly-body* names rt))))\n                               (when (r/PolyDots? rt) \n                                 (let [names (c/PolyDots-fresh-symbols* rt)]\n                                   (fin? (c/PolyDots-body* names rt)))))\n                             (err/int-error (str \"Protocol method \" knq \" should be a possibly-polymorphic function intersection\"\n                                               \" taking at least one fixed argument: \"\n                                               (prs/unparse-type mtype)))))\n                         [knq mtype])))\n        ;_ (prn \"collect protocol methods\" (into {} ms))\n        t (c/Protocol* (map :name fs) (map :variance parsed-binder) \n                       fs s on-class ms (map :bnd parsed-binder))]\n    (ptl-env/add-protocol s t)\n    ; annotate protocol var as Any\n    (var-env/add-nocheck-var s)\n    (var-env/add-var-type s r/-any)\n    (doseq [[kuq mt] ms]\n      (assert (not (namespace kuq))\n              \"Protocol method names should be unqualified\")\n      ;qualify method names when adding methods as vars\n      (let [kq (symbol protocol-defined-in-nstr (name kuq))\n            mt-ann (clt-u/protocol-method-var-ann mt (map :name fs) bnds)]\n        (var-env/add-nocheck-var kq)\n        (var-env/add-var-type kq mt-ann)))\n    ;(prn \"end gen-protocol\" s)\n    nil))", :ns "clojure.core.typed.collect.gen-protocol", :name "gen-protocol*", :file "clojure/core/typed/collect/gen_protocol.clj", :column 1, :line 14, :arglists ([current-env current-ns vsym binder mths])}