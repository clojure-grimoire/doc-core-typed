{:ann [DataType -> (t/Set r/Type)], :ns "clojure.core.typed.datatype-ancestor-env", :name "get-datatype-ancestors", :file "clojure/core/typed/datatype_ancestor_env.clj", :type :fn, :src "(defn ^:no-check ^{:ann '[DataType -> (t/Set r/Type)]}\n  get-datatype-ancestors \n  \"Returns the set of overriden ancestors of the given DataType.\"\n  [{:keys [poly? the-class] :as dt}]\n  {:pre [(r/DataType? dt)]}\n  (assert-dt-ancestors)\n  (t/when-let-fail [a *current-dt-ancestors*]\n    (inst-ancestors dt (@a the-class))))", :column 1, :line 63, :arglists ([{:keys [poly? the-class], :as dt}]), :doc "Returns the set of overriden ancestors of the given DataType.", :no-check true}