{:type :fn, :src "(defn subst-object [t k o polarity]\n  {:pre [(obj/RObject? t)\n         (fl/name-ref? k)\n         (obj/RObject? o)\n         (con/boolean? polarity)]\n   :post [(obj/RObject? %)]}\n  (cond\n    ((some-fn obj/NoObject? obj/EmptyObject?) t) t\n    (obj/Path? t) (let [{p :path i :id} t]\n                    (if (= i k)\n                      (cond\n                        (obj/EmptyObject? o) (obj/EmptyObject-maker)\n                        ;; the result is not from an annotation, so it isn't a NoObject\n                        (obj/NoObject? o) (obj/EmptyObject-maker)\n                        (obj/Path? o) (let [{p* :path i* :id} o]\n                                        (obj/-path (seq (concat p p*)) i*)))\n                      t))))", :ns "clojure.core.typed.subst-obj", :name "subst-object", :file "clojure/core/typed/subst_obj.clj", :column 1, :line 106, :arglists ([t k o polarity])}