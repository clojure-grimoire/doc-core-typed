{:type :fn, :src "(defn simplify-prop\n  \"Try and use atomic proposition a to simplify composite\n  proposition b. a must be correct polarity.\"\n  [a b]\n  {:pre [((some-fn fr/TypeFilter? fr/NotTypeFilter?) a)\n         ((some-fn fr/AndFilter? fr/OrFilter?) b)]\n   :post [(fr/Filter? %)]}\n  (cond\n    ; assuming a wrapping OrFilter\n    (fr/AndFilter? b)\n    (let [fs (set (:fs b))\n          fs (set\n               (for [f fs]\n                 (cond\n                   ; A ^ (B v A) => A\n                   (fr/OrFilter? f) (simplify-prop a f)\n                   :else f)))]\n      (if (fs a)\n        ; A v (notB ^ A) => A v notB\n        (apply -and (disj fs a))\n        b))\n\n    ; assuming a wrapping AndFilter\n    (fr/OrFilter? b)\n    (let [fs (set (:fs b))]\n      ; A ^ (B v A) => A\n      (if (fs a)\n        a\n        b))))", :ns "clojure.core.typed.filter-ops", :name "simplify-prop", :file "clojure/core/typed/filter_ops.clj", :column 1, :line 153, :arglists ([a b]), :doc "Try and use atomic proposition a to simplify composite\n  proposition b. a must be correct polarity."}