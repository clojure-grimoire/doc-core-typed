{:type :fn, :src "(defn check-value\n  [{:keys [val] :as expr} expected]\n  {:pre [(#{:const} (:op expr))]\n   :post [(-> % u/expr-type r/TCResult?)]}\n  (let [actual-type (const/constant-type val)\n        _ (when (and expected (not (sub/subtype? actual-type (r/ret-t expected))))\n            (binding [vs/*current-expr* expr]\n              (cu/expected-error actual-type (r/ret-t expected))))\n        flow (flow-for-value)]\n    (assoc expr\n           u/expr-type (if val\n                         (r/ret actual-type\n                                (fo/-FS fl/-top fl/-bot)\n                                obj/-empty\n                                flow)\n                         (r/ret actual-type\n                                (fo/-FS fl/-bot fl/-top)\n                                obj/-empty\n                                flow)))))", :ns "clojure.core.typed.check.value", :name "check-value", :file "clojure/core/typed/check/value.clj", :column 1, :line 18, :arglists ([{:keys [val], :as expr} expected])}