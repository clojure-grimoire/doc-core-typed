{:ns "clojure.core.typed.test.logic.macros", :name "name-with-attributes", :file "clojure/core/typed/test/logic/macros.clj", :type :fn, :src "(defn name-with-attributes\n  \"To be used in macro definitions.\n   Handles optional docstrings and attribute maps for a name to be defined\n   in a list of macro arguments. If the first macro argument is a string\n   it is added as a docstring to name and removed from the macro argument\n   list. If afterwards the first macro argument is a map, its entries are\n   added to the name's metadata map and the map is removed from the\n   macro argument list. The return value is a vector containing the name\n   with its extended metadata map and the list of unprocessed macro\n   arguments.\"\n  [name macro-args]\n  (let [[docstring macro-args] (if (string? (first macro-args))\n                                 [(first macro-args) (next macro-args)]\n                                 [nil macro-args])\n    [attr macro-args]          (if (map? (first macro-args))\n                                 [(first macro-args) (next macro-args)]\n                                 [{} macro-args])\n    attr                       (if docstring\n                                 (assoc attr :doc docstring)\n                                 attr)\n    attr                       (if (meta name)\n                                 (conj (meta name) attr)\n                                 attr)]\n    [(with-meta name attr) macro-args]))", :column 1, :line 323, :arglists ([name macro-args]), :doc "To be used in macro definitions.\n   Handles optional docstrings and attribute maps for a name to be defined\n   in a list of macro arguments. If the first macro argument is a string\n   it is added as a docstring to name and removed from the macro argument\n   list. If afterwards the first macro argument is a map, its entries are\n   added to the name's metadata map and the map is removed from the\n   macro argument list. The return value is a vector containing the name\n   with its extended metadata map and the list of unprocessed macro\n   arguments."}