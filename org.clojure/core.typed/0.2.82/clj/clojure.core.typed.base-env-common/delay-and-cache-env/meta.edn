{:type :macro, :src "(defmacro delay-and-cache-env [sym & body]\n  (let [generator-sym (symbol (str \"generator-\" sym))\n        cache-sym (symbol (str \"cache-\" sym))\n        thread-bindings (symbol (str \"thread-bindings-\" sym))\n        interface-sym sym]\n    `(do\n       (def ~thread-bindings (get-thread-bindings))\n       (defn ~(with-meta generator-sym {:private true}) []\n         ; switch namespace to where this def is defined\n         ; Also helps parse CLJS syntax.\n         (let [r# (with-bindings ~thread-bindings\n                    ~@body)]\n           ;(prn \"r\" r#)\n           r#))\n       ; cache is original nil, then is updated only once\n       (def ~(with-meta cache-sym {:private true})\n         (atom nil))\n       (defn ~interface-sym []\n         (if-let [hit# (deref ~cache-sym)]\n           hit#\n           (let [calc# (~generator-sym)]\n             (reset! ~cache-sym calc#)))))))", :macro true, :ns "clojure.core.typed.base-env-common", :name "delay-and-cache-env", :file "clojure/core/typed/base_env_common.clj", :column 1, :line 7, :arglists ([sym & body])}