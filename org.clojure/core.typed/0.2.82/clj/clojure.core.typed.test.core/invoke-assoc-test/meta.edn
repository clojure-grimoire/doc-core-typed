{:type :fn, :src "(deftest invoke-assoc-test\n  \n  ; HMaps\n  (equal-types (assoc {} :a 5)\n               (HMap :mandatory {:a '5} :complete? true))\n  \n  (equal-types (assoc nil :a 5)\n               (HMap :mandatory {:a '5} :complete? true))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form nil (U nil (HMap))) :a 5)\n               (HMap :mandatory {:a '5}))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form nil (U nil (HMap :complete? true))) :a 5)\n               (HMap :mandatory {:a '5} :complete? true))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form {} (HMap)) :a 5)\n               (HMap :mandatory {:a '5}))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form {} (HMap :optional {:a clojure.core.typed/Any})) :b \"v\")\n               (HMap :mandatory {:b (Value \"v\")} :optional {:a clojure.core.typed/Any}))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form {} (HMap :optional {:a clojure.core.typed/Any})) :a \"v\")\n               (HMap :mandatory {:a (Value \"v\")}))\n\n  ;CTYP-79 resolve types properly in assoc\n  (is (check-ns 'clojure.core.typed.test.hmap-resolve-assoc))\n  \n  ; HVecs\n  (equal-types-noparse (assoc [] 0 1)\n                       (-hvec [(-val 1)]\n                              :filters [(-true-filter)]\n                              :objects [-empty]))\n  \n  (equal-types-noparse (assoc [3] 1 2)\n                       (-hvec [(-val 3) (-val 2)]\n                              :filters [(-FS -top -top) ; embedded literals dont get any\n                                                        ; filter information (yet)?\n                                        (-true-filter)]\n                              :objects [-empty -empty]))\n  \n  (equal-types-noparse (assoc [0] 0 1)\n                       (-hvec [(-val 1)]\n                              :filters [(-true-filter)]\n                              :objects [-empty]))\n  \n  (equal-types-noparse (assoc [0] 0 (if (clojure.core.typed/ann-form 1 clojure.core.typed/Any) 1 2))\n                       (-hvec [(Un (-val 1) (-val 2))]\n                              :filters [(-true-filter)]\n                              :objects [-empty]))\n  \n  ; Basic types\n  (equal-types (assoc {} 'a 5)\n               (clojure.lang.IPersistentMap 'a '5))\n  \n  (equal-types (assoc {:b 6} 'a 5)\n               (clojure.lang.IPersistentMap (U 'a ':b) (U '5 '6)))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form nil\n                                                   (U nil (clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any)))\n                 :a 5)\n               (clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form {} (clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any)) :a 5)\n               (clojure.lang.IPersistentMap clojure.core.typed/Any clojure.core.typed/Any))\n  \n  (equal-types (assoc (clojure.core.typed/ann-form [] (clojure.lang.IPersistentVector clojure.core.typed/Any)) 0 2)\n               (clojure.lang.IPersistentVector clojure.core.typed/Any))\n  \n  ;; TODO: assocs on records\n  \n  )", :ns "clojure.core.typed.test.core", :name "invoke-assoc-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 2104, :test #<core$fn__28767 clojure.core.typed.test.core$fn__28767@25d29612>}