{:type :fn, :src "(deftest Assoc-test\n  (is-tc-e {:a 1} (Assoc '{} ':a Number))\n  (is-tc-e {:a 1} (Assoc (U '{:a Number} '{:a Double}) ':a Long))\n  (is-tc-e (fn [a] (assoc a 1 2))\n           (All [[x :> (Map Nothing Nothing) \n                  :< (Map Num Num)]]\n              [x -> (Map Num Num)]))\n  (is-tc-e (fn [a] (assoc a :a 1)) \n           (All [[x :> (Map Nothing Nothing) :< (Map Any Any)]] \n              [x -> (Assoc x ':a Num)]))\n  (is-tc-e (let [f :- (All [[x :< (Map Any Any)]] \n                           [x -> (Assoc x ':a Number)])\n                     (fn [a] (assoc a :a 1))]\n             (f {:b 1}))\n           '{:b Num :a Num})\n  (is-tc-e (fn [a] (assoc a :a 1)) \n           (All [[x :< (Map Any Any)]] \n             [x -> (Assoc x ':a Number)]))\n  (is-tc-e (let [add-a :- (All [[x :< (Map Any Any)]]\n                               [x -> (Assoc x ':a Number)])\n                 #(assoc % :a 1)\n                 _ :- '{:a Num}, (add-a {})\n                 _ :- Num, (-> (add-a {}) :a)]))\n  (is-tc-e {:a 1 :b 2}\n           (U (Assoc '{} ':a Num)\n              (Assoc '{} ':b Num)\n              (Assoc '{} ':a Num ':b Num))))", :ns "clojure.core.typed.test.core", :name "Assoc-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 2426, :test #<core$fn__29860 clojure.core.typed.test.core$fn__29860@448eb56a>}