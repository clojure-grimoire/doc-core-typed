{:type :fn, :src "(deftest isa-test\n  (is-tc-e (isa? 1 1))\n  (is-tc-e (let [a :- Any 1\n                 b :- Any 2]\n             (assert (isa? [(class a) (class b)] [Number Number]))\n             (+ a b)))\n  (is-tc-err #(let [a :- Any 1\n                    b :- Any 2]\n                (assert (isa? [(class a) (class b) 1] [Number Number]))\n                (+ a b)))\n  (is-tc-e (isa? {:parents {} :ancestors {} :descendants {}} 1 1))\n  (is-tc-e #(isa? (class %) Number))\n  (is (= (ret (parse-clj `(U (Value 1) (Value 2)))\n              (-true-filter))\n         (tc-e (let [m {:a :b}\n                     a :- Any 1\n                     b :- Any 2]\n                 (if (isa? (:a m) (ann-form 1 Long))\n                   1\n                   2)))))\n  (is (= (ret (parse-clj `(U (Value 1) (Value 2)))\n              (-true-filter))\n         (tc-e\n           (let [c clojure.lang.Keyword]\n             (if (isa? c Object)\n               (do (print-env \"then\")\n                   1)\n               (do (print-env \"else\")\n                   2))))))\n  (is-tc-err (do (ann nil?? (Pred nil))\n                 (defn nil?? [x]\n                   (not (isa? (-> x class class class class) Object)))))\n  (is-tc-e (do (ann rnil [Any -> nil])\n               (defn rnil [x]\n                 (when (isa? (-> x class class class class class class class class class) nil)\n                   x))))\n  (is-tc-e (do (ann robject [Any -> Object])\n               (defn robject [x]\n                 (if (isa? (-> x class class class class class class class) Object)\n                   x\n                   (Object.)))))\n  (is-tc-e (do (ann rnilobject [Any -> nil])\n               (defn rnilobject [x]\n                 (if (not (isa? (-> x class class) Object))\n                   x\n                   nil))))\n  (is-tc-err (do (ann robject [Any -> nil])\n               (defn robject [x]\n                 (if (isa? (-> x class class) Object)\n                   x\n                   nil))))\n  (is-tc-e (do (defn minc [x :- (U nil Num)]\n                 (if (isa? (-> x class class) Class)\n                   (inc x)\n                   0))))\n  ;(is-tc-e (do (ann nil?? (Pred nil))\n  ;             (defn nil?? [x]\n  ;               (not (isa? (-> x class class) Object)))))\n  )", :ns "clojure.core.typed.test.core", :name "isa-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 1145, :test #<core$fn__26778 clojure.core.typed.test.core$fn__26778@2b515dca>}