{:type :fn, :src "(deftest cs-gen-test\n  (is-clj (= (cs-gen #{} ;V\n                     (zipmap '[x y] (repeat no-bounds)) ;X\n                     {} ;Y\n                     (-val 1) ;S\n                     (make-F 'x)) ;T\n             (->cset [(make-cset-entry {'x (->c (-val 1) 'x -any no-bounds)\n                                        'y (->c (Un) 'y -any no-bounds)})])))\n  ;intersections correctly inferred\n  (is-clj (= (cs-gen '#{} {'x no-bounds} '{} \n                     (-hvec [(RClass-of Number)])\n                     (In (RClass-of Seqable [(make-F 'x)]) (make-CountRange 1)))\n             (->cset [(make-cset-entry {'x (->c (RClass-of Number) 'x -any no-bounds)})])))\n;correct RClass ancestor inference\n  (is-clj (= (cs-gen #{} {'x no-bounds} {} \n                     (RClass-of IPersistentVector [(RClass-of Number)])\n                     (RClass-of Seqable [(make-F 'x)]))\n             (->cset [(make-cset-entry {'x (->c (RClass-of Number) 'x -any no-bounds)})]))))", :ns "clojure.core.typed.test.core", :name "cs-gen-test", :file "clojure/core/typed/test/core.clj", :column 1, :line 891, :test #<core$fn__26047 clojure.core.typed.test.core$fn__26047@64168977>}