{:type :fn, :src "(deftest anon-fn\n  (is-tc-e (inc ((fn [a :- Num] a) 1)))\n  (is-tc-e (inc ((fn foo \n                   ([a :- Num] :- Num (foo 1 a))\n                   ([a :- Num b :- Num] :- Num b))\n                 1)))\n  (is-tc-e (inc ((fn foo \n                   ([a :- Num] (foo 1 a))\n                   ([a :- Num b :- Num] :- Num b))\n                 1)))\n  (is-tc-err (inc ((fn foo \n                     ([a :- Num] (foo 1 a))\n                     ([a :- Num b :- Num] b))\n                   1)))\n  (is-tc-e (clojure.core/fn foo [a] (foo a)))\n  (is-tc-e (fn [b] (inc b))\n           (Rec [b]\n             (U Num [Num -> Num])))\n  (is-tc-e (core/fn \n             ([b] b)\n             ([b c] [b c]))\n           [Any -> Any])\n  (is-tc-e (core/fn [b] (inc b))\n           (U Num [Num -> Num]))\n  (is-tc-e (core/fn [b] (inc b))\n           (Rec [b]\n             (U Num [Num -> Num])))\n  (is-tc-e (fn [b] (inc b))\n           [Num -> Num])\n  (is-tc-err (fn \n               ([b] (inc b)))\n             (IFn [Num -> Num]\n                  [Num Num -> Num]))\n  (is-tc-err (fn \n               ([b] (inc b)))\n             Num)\n  (is (both-subtype?\n        (ret-t\n          (tc-t (fn\n                  [x :- Any \n                   y :- Any])))\n        (parse-clj `[Any Any :-> nil :filters {:then ~'ff :else ~'tt}])))\n  ; interesting case, perfectly valid to remember Any is falsy here\n  (is (both-subtype?\n        (ret-t\n          (tc-t (fn\n                  [x :- Any \n                   y :- Any]\n                  :- Any nil)))\n        (parse-clj `[Any Any :-> Any :filters {:then ~'ff :else ~'tt}])))\n  )", :ns "clojure.core.typed.test.core", :name "anon-fn", :file "clojure/core/typed/test/core.clj", :column 1, :line 3475, :test #<core$fn__33111 clojure.core.typed.test.core$fn__33111@65249511>}