{:type :fn, :src "(defn local-ret [sym]\n  {:pre [(symbol? sym)]\n   :post [(r/TCResult? %)]}\n  (let [; see if sym is an alias for an object\n        ; if not (-id-path sym) is returned\n        obj (lex/lookup-alias sym)\n        [alias-path alias-id] (cond\n                                (obj/Path? obj) [(:path obj) (:id obj)]\n                                (obj/EmptyObject? obj) [nil sym]\n                                :else (err/int-error (str \"what is this?\" (pr-str obj))))\n        _ (assert (pr/path-elems? alias-path))\n        _ (assert (fr/name-ref? alias-id))\n        t (path-type/path-type (var-env/type-of alias-id) alias-path)]\n    (r/ret t \n           (if (c/overlap t (c/Un r/-nil r/-false))\n             (fo/-FS (fo/-not-filter-at (c/Un r/-nil r/-false) obj)\n                     (fo/-filter-at (c/Un r/-nil r/-false) obj))\n             (fo/-true-filter))\n           obj)))", :ns "clojure.core.typed.local-result", :name "local-ret", :file "clojure/core/typed/local_result.clj", :column 1, :line 19, :arglists ([sym])}