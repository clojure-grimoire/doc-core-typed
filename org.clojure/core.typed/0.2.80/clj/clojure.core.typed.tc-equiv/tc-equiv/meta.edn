{:type :fn, :src "(defn tc-equiv [comparator & vs]\n  {:pre [(every? r/TCResult? vs)]\n   :post [(r/TCResult? %)]}\n  (assert (#{:=} comparator))\n  (assert (seq vs))\n  (let [; TODO sequence behaviour is subtle\n        ; conservative for now\n        vs-combinations (comb/combinations vs 2)\n        ;_ (prn vs-combinations)\n        then-filter (apply fo/-and (apply concat\n                                          (for [[{t1 :t fl1 :fl o1 :o}\n                                                 {t2 :t fl2 :fl o2 :o}] vs-combinations]\n                                            (concat\n                                              (when (equivable? t1) \n                                                [(fo/-filter-at t1 o2)])\n                                              (when (equivable? t2) \n                                                [(fo/-filter-at t2 o1)])))))\n        ;_ (prn then-filter)\n        else-filter (apply fo/-or \n                           (if-let [fs (seq (apply concat\n                                                   (for [[{t1 :t fl1 :fl o1 :o}\n                                                          {t2 :t fl2 :fl o2 :o}] vs-combinations]\n                                                     (concat\n                                                       (when (equivable? t1) \n                                                         [(fo/-not-filter-at t1 o2)])\n                                                       (when (equivable? t2) \n                                                         [(fo/-not-filter-at t2 o1)])))))]\n                             fs\n                             ; ensure we don't simplify to ff if we have more than one\n                             ; argument to = (1 arg is always a true value)\n                             (when (< 1 (count vs))\n                               [fl/-top])))\n        ;_ (prn else-filter)\n        ]\n    (r/ret (c/Un r/-false r/-true)\n           (fo/-FS then-filter else-filter))))", :ns "clojure.core.typed.tc-equiv", :name "tc-equiv", :file "clojure/core/typed/tc_equiv.clj", :column 1, :line 17, :arglists ([comparator & vs])}