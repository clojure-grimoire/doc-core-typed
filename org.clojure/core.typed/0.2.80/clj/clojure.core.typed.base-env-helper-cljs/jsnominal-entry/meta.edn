{:type :fn, :src "(defn jsnominal-entry [[n [binder & {:as opts}]]]\n  (let [names (when (seq binder)\n                    (map first binder))\n        {vs :variances\n         names :names\n         bnds :bnds} \n        (when (seq binder)\n          ; don't bound frees because mutually dependent bounds are problematic\n          ; FIXME ... Or is this just laziness? \n          (let [b (free-ops/with-free-symbols names\n                     (mapv prs/parse-tfn-binder binder))]\n            {:variances (map :variance b)\n             :names (map :nme b)\n             :bnds (map :bound b)}))\n        frees (map r/make-F names)\n        methods (free-ops/with-bounded-frees (zipmap frees bnds)\n                   (into {}\n                         (for [[mname mtype] (:methods opts)]\n                           [mname (c/abstract-many names (prs/parse-type mtype))])))\n        fields (free-ops/with-bounded-frees (zipmap frees bnds)\n                  (into {}\n                        (for [[mname mtype] (:fields opts)]\n                          [mname (c/abstract-many names (prs/parse-type mtype))])))\n        ctor (when-let [ctor (:ctor opts)]\n                (free-ops/with-bounded-frees (zipmap frees bnds)\n                  (c/abstract-many names (prs/parse-type ctor))))\n        ancestors (free-ops/with-bounded-frees (zipmap frees bnds)\n                     (into #{}\n                           (for [mtype (:ancestors opts)]\n                             (c/abstract-many names (prs/parse-type mtype)))))]\n    (decl-env/remove-declared-kind n)\n    [n {:jsnominal (c/JSNominal* names vs frees n bnds)\n         :fields fields\n         :methods methods\n         :ctor ctor\n         :ancestors ancestors}]))", :ns "clojure.core.typed.base-env-helper-cljs", :name "jsnominal-entry", :file "clojure/core/typed/base_env_helper_cljs.clj", :column 1, :line 94, :arglists ([[n [binder & {:as opts}]]])}