{:type :fn, :src "(defn combine-rets [rs]\n  {:pre [(seq rs)\n         (every? r/TCResult? rs)]\n   :post [(r/TCResult? %)]}\n  (r/ret (apply c/Un (map r/ret-t rs))\n         (fo/-FS (apply fo/-or (map (comp :then r/ret-f) rs))\n                 (apply fo/-or (map (comp :else r/ret-f) rs)))\n         (if (apply = (map r/ret-o rs))\n           (r/ret-o (first rs))\n           o/-empty)\n         (r/-flow (apply fo/-or (map (comp :normal r/ret-flow) rs)))))", :ns "clojure.core.typed.check.try", :name "combine-rets", :file "clojure/core/typed/check/try.clj", :column 1, :line 10, :arglists ([rs])}