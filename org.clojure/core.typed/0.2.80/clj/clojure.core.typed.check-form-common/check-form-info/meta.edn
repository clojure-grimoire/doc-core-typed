{:type :fn, :src "(defn check-form-info\n  [{:keys [impl ast-for-form unparse-ns\n           check-expr collect-expr]} \n   form & {:keys [expected-ret expected type-provided? profile file-mapping\n                  checked-ast]}]\n  (assert (not (and expected-ret type-provided?)))\n  (p/profile-if profile\n    (reset-caches/reset-caches)\n    (if vs/*checking*\n      (throw (Exception. \"Found inner call to check-ns or cf\"))\n      (impl/with-full-impl impl\n        (binding [vs/*checking* true\n                  vs/*already-collected* (atom #{})\n                  vs/*already-checked* (atom #{})\n                  vs/*delayed-errors* (err/-init-delayed-errors)\n                  vs/*analyze-ns-cache* (cache/soft-cache-factory {})]\n          (let [terminal-error? (atom nil)\n                expected (or\n                           expected-ret\n                           (when type-provided?\n                             (r/ret (prs/parse-type expected))))\n                ast (ast-for-form form)\n                c-ast (try\n                        (do (collect-expr ast)\n                            (reset-caches/reset-caches)\n                            (check-expr ast expected))\n                        (catch ExceptionInfo e\n                          (when (err/tc-error? (ex-data e))\n                            (reset! terminal-error? e))\n                          nil))\n                res (u/expr-type c-ast)]\n            (merge\n              {:delayed-errors (concat @vs/*delayed-errors*\n                                       (when-let [e @terminal-error?]\n                                         [e]))\n               :ret (or res (r/ret r/-error))}\n              (when checked-ast\n                {:checked-ast c-ast})\n              (when (#{impl/clojure} impl)\n                {:result (:result ast)})\n              (when (#{impl/clojure} impl)\n                (when file-mapping\n                  {:file-mapping (file-map/ast->file-mapping c-ast)})))))))))", :ns "clojure.core.typed.check-form-common", :name "check-form-info", :file "clojure/core/typed/check_form_common.clj", :column 1, :line 15, :arglists ([{:keys [impl ast-for-form unparse-ns check-expr collect-expr]} form & {:keys [expected-ret expected type-provided? profile file-mapping checked-ast]}])}