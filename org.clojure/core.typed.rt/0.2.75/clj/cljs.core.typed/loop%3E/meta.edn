{:ns "cljs.core.typed", :name "loop>", :file "cljs/core/typed.clj", :type :macro, :src "(defmacro \n  ^{:forms '[(loop> [binding :- type, init*] exprs*)]}\n  ^{:deprecated \"0.2.61\"}\n  loop>\n  \"DEPRECATED: use loop\n\n  Like loop, except loop variables require annotation.\n\n  Suggested idiom: use a comma between the type and the initial\n  expression.\n\n  eg. (loop> [a :- Number, 1\n              b :- (U nil Number), nil]\n        ...)\"\n  [bndings* & forms]\n  (let [normalise-args\n        (core/fn [seq-exprs]\n          (core/loop [flat-result ()\n                 seq-exprs seq-exprs]\n            (cond\n              (empty? seq-exprs) flat-result\n              (and (vector? (first seq-exprs))\n                   (#{:-} (-> seq-exprs first second))) (do\n                                                          (prn \"DEPRECATED WARNING: loop> syntax has changed, use [b :- t i] for clauses\"\n                                                               \"ns: \" *ns* \" form:\" &form)\n                                                          (recur (concat flat-result (take 2 seq-exprs))\n                                                                 (drop 2 seq-exprs)))\n              :else (do (assert (#{:-} (second seq-exprs))\n                                \"Incorrect syntax in loop>.\")\n                        (recur (concat flat-result [(vec (take 3 seq-exprs))\n                                                    (nth seq-exprs 3)])\n                               (drop 4 seq-exprs))))))\n        ;group args in flat pairs\n        bndings* (normalise-args bndings*)\n        bnds (partition 2 bndings*)\n        ; [[lhs :- bnd-ann] rhs]\n        lhs (map ffirst bnds)\n        rhs (map second bnds)\n        bnd-anns (map #(-> % first next second) bnds)]\n    `(loop>-ann (cljs.core/loop ~(vec (mapcat vector lhs rhs))\n                  ~@forms)\n                '~bnd-anns)))", :column 1, :line 179, :macro true, :deprecated "0.2.61", :arglists ([bndings* & forms]), :doc "DEPRECATED: use loop\n\n  Like loop, except loop variables require annotation.\n\n  Suggested idiom: use a comma between the type and the initial\n  expression.\n\n  eg. (loop> [a :- Number, 1\n              b :- (U nil Number), nil]\n        ...)", :forms [(loop> [binding :- type init*] exprs*)]}