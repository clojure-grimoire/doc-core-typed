{:type :fn, :src "(defn envs\n  \"Returns a map of type environments, according to the current state of the\n  type checker.\n  \n  Output map:\n  - :vars      map from var symbols to their verbosely printed types\n  - :aliases   map from alias var symbols (made with defalias) to their verbosely printed types\n  - :special-types  a set of Vars that are special to the type checker (like Any, U, I)\n  \"\n  []\n  (load-if-needed)\n  (merge ((impl/v 'clojure.core.typed.all-envs/all-envs-clj))\n         {:special-types (set (->> (ns-publics 'clojure.core.typed)\n                                vals\n                                (filter (fn [v]\n                                          (when (var? v)\n                                            (-> v meta ::special-type))))))}))", :ns "clojure.core.typed", :name "envs", :file "clojure/core/typed.clj", :column 1, :line 2260, :doc "Returns a map of type environments, according to the current state of the\n  type checker.\n  \n  Output map:\n  - :vars      map from var symbols to their verbosely printed types\n  - :aliases   map from alias var symbols (made with defalias) to their verbosely printed types\n  - :special-types  a set of Vars that are special to the type checker (like Any, U, I)\n  "}