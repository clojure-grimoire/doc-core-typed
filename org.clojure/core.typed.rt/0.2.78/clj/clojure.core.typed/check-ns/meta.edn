{:type :fn, :src "(defn check-ns\n  \"Type check a namespace/s (a symbol or Namespace, or collection).\n  If not provided default to current namespace.\n  Returns a true value if type checking is successful, otherwise\n  throws an Exception.\n\n  Do not use check-ns within a checked namespace.\n  It is intended to be used at the REPL or within a unit test.\n  Suggested idiom for clojure.test: (is (check-ns 'your.ns))\n\n  check-ns resets annotations collected from \n  previous check-ns calls or cf. A successful check-ns call will\n  preserve any type annotations collect during that checking run.\n  \n  Keyword arguments:\n  - :collect-only  if true, collect type annotations but don't type check code.\n                   Useful for debugging purposes.\n  - :trace         if true, print some basic tracing of the type checker\n  - :profile       if true, use Timbre to profile type checking. Must include\n                   Timbre as a dependency.\n\n  If providing keyword arguments, the namespace to check must be provided\n  as the first argument.\n\n  Bind clojure.core.typed.util-vars/*verbose-types* to true to print fully qualified types.\n  Bind clojure.core.typed.util-vars/*verbose-forms* to print full forms in error messages.\n  \n  eg. (check-ns 'myns.typed)\n      ;=> :ok\n     \n      ; implicitly check current namespace\n      (check-ns)\n      ;=> :ok\n  \n      ; collect but don't check the current namespace\n      (check-ns *ns* :collect-only true)\"\n  ([] (check-ns *ns*))\n  ([ns-or-syms & opt]\n   (load-if-needed)\n   (apply (impl/v 'clojure.core.typed.check-ns-clj/check-ns) ns-or-syms opt)))", :ns "clojure.core.typed", :name "check-ns", :file "clojure/core/typed.clj", :column 1, :line 2200, :doc "Type check a namespace/s (a symbol or Namespace, or collection).\n  If not provided default to current namespace.\n  Returns a true value if type checking is successful, otherwise\n  throws an Exception.\n\n  Do not use check-ns within a checked namespace.\n  It is intended to be used at the REPL or within a unit test.\n  Suggested idiom for clojure.test: (is (check-ns 'your.ns))\n\n  check-ns resets annotations collected from \n  previous check-ns calls or cf. A successful check-ns call will\n  preserve any type annotations collect during that checking run.\n  \n  Keyword arguments:\n  - :collect-only  if true, collect type annotations but don't type check code.\n                   Useful for debugging purposes.\n  - :trace         if true, print some basic tracing of the type checker\n  - :profile       if true, use Timbre to profile type checking. Must include\n                   Timbre as a dependency.\n\n  If providing keyword arguments, the namespace to check must be provided\n  as the first argument.\n\n  Bind clojure.core.typed.util-vars/*verbose-types* to true to print fully qualified types.\n  Bind clojure.core.typed.util-vars/*verbose-forms* to print full forms in error messages.\n  \n  eg. (check-ns 'myns.typed)\n      ;=> :ok\n     \n      ; implicitly check current namespace\n      (check-ns)\n      ;=> :ok\n  \n      ; collect but don't check the current namespace\n      (check-ns *ns* :collect-only true)"}