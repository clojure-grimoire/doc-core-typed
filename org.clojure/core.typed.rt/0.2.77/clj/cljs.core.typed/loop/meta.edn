{:ns "cljs.core.typed", :name "loop", :file "clojure/core/typed/macros.clj", :type :macro, :src "(defmacro \n  ^{:forms '[(loop [binding :- type?, init*] exprs*)]}\n  loop\n  \"Like clojure.core/loop, and supports optional type annotations.\n  Arguments default to a generalised type based on the initial value.\n\n  eg. (loop [a :- Number 1\n             b :- (U nil Number) nil]\n        ...)\"\n  [bindings & exprs]\n  (core/let [{:keys [ann loop]} (internal/parse-loop* `(~bindings ~@exprs))]\n    (if vs/*checking*\n      `(do ~spec/special-form\n           ~(core-kw :loop)\n           {:ann '~ann}\n           ~loop)\n      loop)))", :column 1, :line 104, :macro true, :arglists ([bindings & exprs]), :doc "Like clojure.core/loop, and supports optional type annotations.\n  Arguments default to a generalised type based on the initial value.\n\n  eg. (loop [a :- Number 1\n             b :- (U nil Number) nil]\n        ...)", :forms [(loop [binding :- type? init*] exprs*)]}