{:ns "clojure.core.typed", :name "defprotocol", :file "clojure/core/typed/macros.clj", :type :macro, :src "(defmacro defprotocol\n  \"Like defprotocol, but with optional type annotations.\n\n  Omitted annotations default to Any. The first argument\n  of a protocol cannot be annotated.\n\n  Add a binder before the protocol name to define a polymorphic\n  protocol. A binder before the method name defines a polymorphic\n  method, however a method binder must not shadow type variables\n  introduced by a protocol binder.\n\n  Return types for each method arity can be annotated.\n\n  Unlike clojure.core/defprotocol, successive methods can\n  have the same arity. Semantically, providing multiple successive\n  methods of the same arity is the same as just providing the left-most\n  method. However the types for these methods will be accumulated into\n  a Fn type.\n  \n  eg. ;annotate single method\n  (defprotocol MyProtocol\n    (a [this a :- Integer] :- Number))\n\n  ;polymorphic protocol\n  (defprotocol [[x :variance :covariant]]\n    MyProtocol\n    (a [this a :- Integer] :- Number))\n\n  ;multiple types for the same method\n  (defprotocol [[x :variance :covariant]]\n    MyProtocol\n    (a [this a :- Integer] :- Integer\n       [this a :- Long] :- Long\n       [this a :- Number] :- Number))\n\n  ;polymorphic method+protocol\n  (defprotocol [[x :variance :covariant]]\n    MyProtocol\n    ([y] a [this a :- x, b :- y] :- y))\n  \"\n  [& body]\n  (let [{:keys [ann-protocol defprotocol]} (internal/parse-defprotocol* body)]\n    `(do ~ann-protocol\n         (tc-ignore\n           ~defprotocol))))", :column 1, :line 144, :macro true, :arglists ([& body]), :doc "Like defprotocol, but with optional type annotations.\n\n  Omitted annotations default to Any. The first argument\n  of a protocol cannot be annotated.\n\n  Add a binder before the protocol name to define a polymorphic\n  protocol. A binder before the method name defines a polymorphic\n  method, however a method binder must not shadow type variables\n  introduced by a protocol binder.\n\n  Return types for each method arity can be annotated.\n\n  Unlike clojure.core/defprotocol, successive methods can\n  have the same arity. Semantically, providing multiple successive\n  methods of the same arity is the same as just providing the left-most\n  method. However the types for these methods will be accumulated into\n  a Fn type.\n  \n  eg. ;annotate single method\n  (defprotocol MyProtocol\n    (a [this a :- Integer] :- Number))\n\n  ;polymorphic protocol\n  (defprotocol [[x :variance :covariant]]\n    MyProtocol\n    (a [this a :- Integer] :- Number))\n\n  ;multiple types for the same method\n  (defprotocol [[x :variance :covariant]]\n    MyProtocol\n    (a [this a :- Integer] :- Integer\n       [this a :- Long] :- Long\n       [this a :- Number] :- Number))\n\n  ;polymorphic method+protocol\n  (defprotocol [[x :variance :covariant]]\n    MyProtocol\n    ([y] a [this a :- x, b :- y] :- y))\n  "}