{:ns "clojure.core.typed.async", :name "sliding-buffer", :file "clojure/core/typed/async.clj", :type :macro, :src "(defmacro sliding-buffer\n  \"Like sliding-buffer but with optional type annotations.\n\n  (sliding-buffer :- t ...) creates a sliding buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/sliding-buffer.\n  \n  Note: (sliding-buffer :- t ...) is the same as ((inst sliding-buffer t t) ...)\"\n  [& args]\n  (let [[t? t args] (maybe-annotation args)]\n    (if t?\n      `((inst async/sliding-buffer ~t ~t) ~@args)\n      `(async/sliding-buffer ~@args))))", :column 1, :line 397, :macro true, :arglists ([& args]), :doc "Like sliding-buffer but with optional type annotations.\n\n  (sliding-buffer :- t ...) creates a sliding buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/sliding-buffer.\n  \n  Note: (sliding-buffer :- t ...) is the same as ((inst sliding-buffer t t) ...)"}