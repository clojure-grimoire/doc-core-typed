{:ns "clojure.core.typed.async", :name "chan", :file "clojure/core/typed/async.clj", :type :macro, :src "(defmacro chan\n  \"Like chan but with optional type annotations.\n\n  (chan :- t ...) creates a buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/chan.\n  \n  Note: \n    (chan :- t ...) is the same as ((inst async/chan t) ...)\"\n  [& args]\n  (let [[t? t args] (maybe-annotation args)]\n    (if t?\n      `((inst async/chan ~t ~t) ~@args)\n      `(async/chan ~@args))))", :column 1, :line 370, :macro true, :arglists ([& args]), :doc "Like chan but with optional type annotations.\n\n  (chan :- t ...) creates a buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/chan.\n  \n  Note: \n    (chan :- t ...) is the same as ((inst async/chan t) ...)"}