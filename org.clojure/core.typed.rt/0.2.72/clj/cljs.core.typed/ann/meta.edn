{:ns "cljs.core.typed", :name "ann", :file "cljs/core/typed.clj", :type :macro, :src "(defmacro ann \n  \"Annotate varsym with type. If unqualified, qualify in the current namespace.\n  If varsym has metadata {:no-check true}, ignore definitions of varsym while type checking.\n  \n  eg. ; annotate the var foo in this namespace\n      (ann foo [Number -> Number])\n  \n      ; annotate a var in another namespace\n      (ann another.ns/bar [-> nil])\n   \n      ; don't check this var\n      (ann ^:no-check foobar [Integer -> String])\"\n  [varsym typesyn]\n  `(ann* '~varsym '~typesyn))", :column 1, :line 32, :macro true, :arglists ([varsym typesyn]), :doc "Annotate varsym with type. If unqualified, qualify in the current namespace.\n  If varsym has metadata {:no-check true}, ignore definitions of varsym while type checking.\n  \n  eg. ; annotate the var foo in this namespace\n      (ann foo [Number -> Number])\n  \n      ; annotate a var in another namespace\n      (ann another.ns/bar [-> nil])\n   \n      ; don't check this var\n      (ann ^:no-check foobar [Integer -> String])"}