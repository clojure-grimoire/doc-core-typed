{:ns "cljs.core.typed.async", :name "chan>", :file "cljs/core/typed/async.clj", :type :macro, :src "(defmacro chan> \n  \"A statically typed core.async channel. \n\n  (chan> t ...) creates a buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/chan.\n  \n  Note: \n  (chan> t ...) is the same as ((inst chan t) ...)\"\n  [t & args]\n  `((cljs.core.typed/inst cljs.core.async/chan ~t) ~@args))", :column 1, :line 5, :macro true, :arglists ([t & args]), :doc "A statically typed core.async channel. \n\n  (chan> t ...) creates a buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/chan.\n  \n  Note: \n  (chan> t ...) is the same as ((inst chan t) ...)"}