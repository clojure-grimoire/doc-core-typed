{:ns "clojure.core.typed", :name "pred", :file "clojure/core/typed.clj", :type :macro, :src "(defmacro pred \n  \"Generate a flat (runtime) predicate for type that returns true if the\n  argument is a subtype of the type, otherwise false.\n\n  The current type variable and dotted type variable scope is cleared before parsing.\n  \n  eg. ((pred Number) 1)\n      ;=> true\"\n  [t]\n  (require '[clojure.core.typed.type-contract])\n  (binding [vs/*current-env* {:ns {:name (ns-name *ns*)}\n                              :file *file*\n                              :line (or (-> &form meta :line)\n                                        @clojure.lang.Compiler/LINE)\n                              :column (or (-> &form meta :column)\n                                          @clojure.lang.Compiler/COLUMN)}]\n    `(pred* '~t\n            '~(ns-name *ns*)\n            ~((impl/v 'clojure.core.typed.type-contract/type-syntax->pred) t))))", :column 1, :line 2267, :macro true, :arglists ([t]), :doc "Generate a flat (runtime) predicate for type that returns true if the\n  argument is a subtype of the type, otherwise false.\n\n  The current type variable and dotted type variable scope is cleared before parsing.\n  \n  eg. ((pred Number) 1)\n      ;=> true"}