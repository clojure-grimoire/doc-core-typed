{:ns "clojure.core.typed", :name "def-alias", :file "clojure/core/typed.clj", :type :macro, :src "(defmacro \n  ^{:deprecated \"0.2.45\"}\n  def-alias \n  \"DEPRECATED: use defalias\n  \n  Define a type alias. Takes an optional doc-string as a second\n  argument.\n\n  Updates the corresponding var with documentation.\n  \n  eg. (def-alias MyAlias\n        \\\"Here is my alias\\\"\n        (U nil String))\"\n  ([sym doc-str t]\n   (assert (string? doc-str) \"Doc-string passed to def-alias must be a string\")\n   `(def-alias ~(vary-meta sym assoc :doc doc-str) ~t))\n  ([sym t]\n   (assert (symbol? sym) (str \"First argument to def-alias must be a symbol: \" sym))\n   (err/deprecated-renamed-macro\n     &form\n     'def-alias\n     'defalias)\n   (let [qsym (if (namespace sym)\n                sym\n                (symbol (-> *ns* ns-name str) (str sym)))\n         m (-> (meta sym)\n             (update-in [:doc] #(str #_\"Type Alias\\n\\n\" % \"\\n\\n\" (with-out-str (pprint/pprint t)))))]\n     `(do\n        (tc-ignore (add-to-alias-env '~&form '~qsym '~t))\n        (let [v# (intern '~(symbol (namespace qsym)) '~(symbol (name qsym)))]\n          (tc-ignore (alter-meta! v# merge '~m)))\n        (def-alias* '~qsym '~t)))))", :column 1, :line 1235, :macro true, :deprecated "0.2.45", :arglists ([sym doc-str t] [sym t]), :doc "DEPRECATED: use defalias\n  \n  Define a type alias. Takes an optional doc-string as a second\n  argument.\n\n  Updates the corresponding var with documentation.\n  \n  eg. (def-alias MyAlias\n        \"Here is my alias\"\n        (U nil String))"}