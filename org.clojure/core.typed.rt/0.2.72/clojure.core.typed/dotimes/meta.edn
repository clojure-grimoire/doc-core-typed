{:ns "clojure.core.typed", :name "dotimes", :file "clojure/core/typed.clj", :type :macro, :src "(defmacro dotimes\n  \"Like clojure.core/dotimes, but with optional annotations.\n\n  If annotation for binding is omitted, defaults to Int.\n  \n  eg. (dotimes [_ 100]\n        (println \\\"like normal\\\"))\n\n      (dotimes [x :- Num, 100.123]\n        (println \\\"like normal\\\" x))\"\n  [bindings & body]\n  (@#'core/assert-args\n     (vector? bindings) \"a vector for its binding\"\n     (= 2 (count bindings)) \"exactly 2 forms in binding vector\")\n  (let [i (first bindings)\n        n (second bindings)]\n    `(let [n# (long ~n)]\n       (loop [~i :- Int 0]\n         (when (< ~i n#)\n           ~@body\n           (recur (unchecked-inc ~i)))))))", :column 1, :line 170, :macro true, :arglists ([bindings & body]), :doc "Like clojure.core/dotimes, but with optional annotations.\n\n  If annotation for binding is omitted, defaults to Int.\n  \n  eg. (dotimes [_ 100]\n        (println \"like normal\"))\n\n      (dotimes [x :- Num, 100.123]\n        (println \"like normal\" x))"}