{:type :fn, :src "(defn parse-loop*\n  [forms]\n  (let [parsed-loop (merge\n                      (loop [ann-params (first forms)\n                             pvec []\n                             ann-info []]\n                        (cond\n                          (empty? ann-params)\n                          {:pvec pvec\n                           :ann {:params ann-info}}\n                          \n                          :else\n                          (if (#{:-} (second ann-params))\n                            (let [[p colon t init & rest-params] ann-params]\n                              (recur rest-params\n                                     (conj pvec p init)\n                                     (conj ann-info {:type t})))\n                            (let [[p init & rest-params] ann-params]\n                              (recur rest-params\n                                     (conj pvec p init)\n                                     (conj ann-info {:type 'clojure.core.typed/Any\n                                                     :default true}))))))\n                      {:body (next forms)})]\n    {:loop `(clojure.core/loop ~(:pvec parsed-loop) ~@(:body parsed-loop))\n     :ann (:ann parsed-loop)}))", :ns "clojure.core.typed.internal", :name "parse-loop*", :file "clojure/core/typed/internal.clj", :column 1, :line 166, :arglists ([forms])}