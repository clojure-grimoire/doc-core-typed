{:type :fn, :src "(defn parse-HMap \n  [[_HMap_ & flat-opts :as all]]\n  (let [supported-options #{:optional :mandatory :absent-keys :complete?}\n        ; support deprecated syntax (HMap {}), which is now (HMap :mandatory {})\n        deprecated-mandatory (when (map? (first flat-opts))\n                               (err/deprecated-warn\n                                 \"HMap syntax changed. Use :mandatory keyword argument instead of initial map\")\n                               (first flat-opts))\n        flat-opts (if deprecated-mandatory\n                    (next flat-opts)\n                    flat-opts)\n        _ (when-not (even? (count flat-opts))\n            (err/int-error (str \"Uneven keyword arguments to HMap: \" (pr-str all))))\n        flat-keys (->> flat-opts\n                       (partition 2)\n                       (map first))\n        _ (when-not (every? keyword? flat-keys)\n            (err/int-error (str \"HMap requires keyword arguments, given \" (pr-str (first flat-keys))\n                                \" in: \" (pr-str all))))\n        _ (let [kf (->> flat-keys\n                        multi-frequencies\n                        (map first)\n                        seq)]\n            (when-let [[k] kf]\n              (err/int-error (str \"Repeated keyword argument to HMap: \" (pr-str k)))))\n\n        {:keys [optional mandatory absent-keys complete?]\n         :or {complete? false}\n         :as others} (apply hash-map flat-opts)\n        _ (when-let [[k] (seq (set/difference (set (keys others)) supported-options))]\n            (err/int-error (str \"Unsupported HMap keyword argument: \" (pr-str k))))\n        _ (when (and deprecated-mandatory mandatory)\n            (err/int-error (str \"Cannot provide both deprecated initial map syntax and :mandatory option to HMap\")))\n        mandatory (or deprecated-mandatory mandatory)]\n    (syn-to-hmap mandatory optional absent-keys complete?)))", :ns "clojure.core.typed.parse-ast", :name "parse-HMap", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 370, :arglists ([[_HMap_ & flat-opts :as all]])}