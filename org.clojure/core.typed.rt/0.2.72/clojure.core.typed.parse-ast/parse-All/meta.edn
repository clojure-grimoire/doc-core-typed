{:type :fn, :src "(defn parse-All \n  [[_All_ & args :as syn]]\n  (let [_ (when-not (#{2} (count args))\n            (err/int-error \"Wrong arguments to All\"))\n        [bnds type] args\n        dotted? (boolean \n                  ('#{...} (last bnds)))\n        [fs frees-with-bnds] (reduce (fn [[fs prsed] fsyn]\n                                       (let [sym (if (symbol? fsyn)\n                                                   fsyn\n                                                   (first fsyn))\n                                             _ (assert (symbol? sym))\n                                             gsym (gensym sym)\n                                             fs (conj fs [sym gsym])]\n                                         (with-frees fs\n                                           [fs (conj prsed (parse-free fsyn gsym))])))\n                                     [{} []]\n                                     (if dotted?\n                                       (drop-last 2 bnds)\n                                       bnds))\n        dvar-plain-name (when dotted?\n                          (-> bnds butlast last))\n        _ (assert ((some-fn nil? symbol?) dvar-plain-name))\n        gdvar (gensym dvar-plain-name)\n        dvar (when dotted?\n               (parse-free dvar-plain-name gdvar))]\n    (with-frees fs\n      (with-dfrees (if dvar \n                     {dvar-plain-name (:name dvar)}\n                     {})\n        {:op (if dotted? :Poly :PolyDots)\n         :binder (concat frees-with-bnds\n                         (when dotted?\n                           [dvar]))\n         :type (parse type)\n         :children [:type]}))))", :ns "clojure.core.typed.parse-ast", :name "parse-All", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 406, :arglists ([[_All_ & args :as syn]])}