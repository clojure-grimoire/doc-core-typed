{:type :fn, :src "(defn parse-filter [syn]\n  (cond\n    ('#{tt} syn) {:op :top-filter}\n    ('#{ff} syn) {:op :bot-filter}\n    :else\n      (let [m (when (seq? syn)\n                (let [[f & args] syn]\n                  (cond\n                    ('#{is} f)\n                      (let [[tsyn nme psyns] args\n                            _ (when-not (#{2 3} (count args))\n                                (throw (ex-info \"Bad arguments to 'is'\"\n                                                {:form syn})))\n                            t (parse tsyn)\n                            p (when (#{3} (count args))\n                                (mapv parse-path-elem psyns))]\n                        (merge \n                          {:op :type-filter\n                           :type t\n                           :id nme}\n                          (when p\n                            {:path p})))\n                    ('#{!} f)\n                      (let [[tsyn nme psyns] args\n                            _ (when-not (#{2 3} (count args))\n                                (throw (ex-info \"Bad arguments to '!'\"\n                                                {:form syn})))\n                            t (parse tsyn)\n                            p (when (#{3} (count args))\n                                (mapv parse-path-elem psyns))]\n                        (merge \n                          {:op :not-type-filter\n                           :type t\n                           :id nme}\n                          (when p\n                            {:path p})))\n                    ('#{|} f)\n                      {:op :or-filter\n                       :fs (mapv parse-filter args)}\n                    ('#{&} f)\n                      {:op :and-filter\n                       :fs (mapv parse-filter args)}\n                    ('#{when} f)\n                      (let [[a c] args]\n                        (when-not (#{2} (count args))\n                          (throw (ex-info \"Bad arguments to 'when'\"\n                                          {:form syn})))\n                        {:op :impl-filter\n                         :a (parse-filter a)\n                         :c (parse-filter c)}))))]\n        (if m\n          m\n          (err/int-error (str \"Bad filter syntax: \" syn))))))", :ns "clojure.core.typed.parse-ast", :name "parse-filter", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 44, :arglists ([syn])}