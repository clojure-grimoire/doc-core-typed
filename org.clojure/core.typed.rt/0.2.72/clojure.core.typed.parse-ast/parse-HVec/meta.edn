{:type :fn, :src "(defn parse-HVec [[_ fixed & opts :as syn]]\n  (let [_ (when-not (vector? fixed)\n            (err/int-error \"First argument to HVec must be a vector\"))\n        _ (when-not (even? (count opts))\n            (err/int-error \"Uneven keyword arguments to HVec\"))\n        {:keys [filter-sets objects]} opts]\n    (merge\n      {:op :HVec\n       :types (mapv parse fixed)\n       :children (vec (concat\n                        [:types]\n                        (when filter-sets\n                          [:filter-sets])\n                        (when objects\n                          [:objects])))}\n      (when filter-sets\n        {:filter-sets (mapv parse-filter-set filter-sets)})\n      (when objects\n        {:objects (mapv parse-object filter-sets)}))))", :ns "clojure.core.typed.parse-ast", :name "parse-HVec", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 147, :arglists ([[_ fixed & opts :as syn]])}