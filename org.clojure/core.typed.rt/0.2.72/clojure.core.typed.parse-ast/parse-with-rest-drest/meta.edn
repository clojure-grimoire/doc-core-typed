{:type :fn, :src "(defn parse-with-rest-drest [msg syns]\n  (let [rest? (#{'*} (last syns))\n        dotted? (#{'...} (-> syns butlast last))\n        _ (when (and rest? dotted?)\n            (err/int-error (str msg syns)))\n        {:keys [types rest drest]}\n        (cond\n          rest?\n          (let [fixed (mapv parse (drop-last 2 syns))\n                rest (parse (-> syns butlast last))]\n            {:types fixed\n             :rest rest})\n          dotted?\n          (let [fixed (mapv parse (drop-last 3 syns))\n                [drest-type _dots_ drest-bnd :as dot-syntax] (take-last 3 syns)\n                ; should never fail, if the logic changes above it's probably\n                ; useful to keep around.\n                _ (when-not (#{3} (count dot-syntax))\n                    (err/int-error (str \"Bad vector syntax: \" dot-syntax)))\n                bnd (*dotted-scope* drest-bnd)\n                _ (when-not bnd \n                    (err/int-error (str (pr-str drest-bnd) \" is not in scope as a dotted variable\")))\n                gdrest-bnd (gensym drest-bnd)]\n            {:types fixed\n             :drest {:op :dotted-pretype\n                     :f {:op :F :name gdrest-bnd}\n                     :drest (with-frees {drest-bnd gdrest-bnd} ;with dotted bound in scope as free\n                              (parse drest-type))\n                     :name bnd}})\n          :else {:types (mapv parse syns)})]\n    {:types types\n     :rest rest\n     :drest drest}))", :ns "clojure.core.typed.parse-ast", :name "parse-with-rest-drest", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 167, :arglists ([msg syns])}