{:type :fn, :src "(defn parse-Extends\n  [[_Extends_ & args :as syn]]\n  (let [[extends & {:keys [without] :as opts}] args]\n    (when-not (empty? (set/difference (set (keys opts)) #{:without}))\n      (err/int-error (str \"Invalid options to Extends:\" (keys opts))))\n    (when-not (vector? extends) \n      (err/int-error (str \"Extends takes a vector of types: \" (pr-str syn))))\n    {:op :Extends\n     :types (mapv parse extends)\n     :without (mapv parse without)\n     :children [:types :without]}))", :ns "clojure.core.typed.parse-ast", :name "parse-Extends", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 443, :arglists ([[_Extends_ & args :as syn]])}