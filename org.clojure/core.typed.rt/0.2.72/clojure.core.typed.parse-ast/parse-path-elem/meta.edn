{:type :fn, :src "(defn parse-path-elem [syn]\n  (cond\n    ('#{Class} syn) {:op :ClassPE}\n    ('#{Count} syn) {:op :CountPE}\n    ('#{Keys} syn) {:op :KeysPE}\n    ('#{Vals} syn) {:op :ValsPE}\n    :else\n      (let [m (when (seq? syn)\n                (let [[f & args] syn]\n                  (cond\n                    ('#{Nth} f) (do\n                                  (when-not (#{1} (count args))\n                                    (err/int-error (str \"Wrong arguments to Nth: \" syn)))\n                                  {:op :NthPE\n                                   :idx (first args)})\n                    ('#{Key} f) (do\n                                  (when-not (#{1} (count args))\n                                    (err/int-error (str \"Wrong arguments to Key: \" syn)))\n                                  {:op :KeyPE\n                                   :key (first args)})\n                    ('#{Val} f) (do\n                                  (when-not (#{1} (count args))\n                                    (err/int-error (str \"Wrong arguments to Val\" syn)))\n                                  {:op :ValPE\n                                   :val (first args)}))))]\n        (if m\n          m\n          (err/int-error (str \"Bad path element syntax: \" syn))))))", :ns "clojure.core.typed.parse-ast", :name "parse-path-elem", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 109, :arglists ([syn])}