{:type :fn, :src "(defn parse-TFn \n  [[_ binder bodysyn :as tfn]]\n  (when-not (= 3 (count tfn))\n    (err/int-error (str \"Wrong number of arguments to TFn: \" (pr-str tfn))))\n  (when-not (every? vector? binder)\n    (err/int-error (str \"TFn binder should be vector of vectors: \" (pr-str tfn))))\n  (let [; don't scope a free in its own bounds. Should review this decision\n        [fs free-maps] (reduce\n                         (fn [[fs prsed] b]\n                           (let [sym (first b)\n                                 _ (assert (symbol? sym))\n                                 gsym (gensym sym)\n                                 fs (conj fs [sym gsym])]\n                             (with-frees fs\n                               [fs (conj prsed (parse-tfn-binder b gsym))])))\n                         [{} []]\n                         binder)\n        bodyt (with-frees fs\n                (parse bodysyn))]\n    {:op :TFn\n     :binder free-maps\n     :body bodyt}))", :ns "clojure.core.typed.parse-ast", :name "parse-TFn", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 336, :arglists ([[_ binder bodysyn :as tfn]])}