{:type :fn, :src "(defn parse [syn]\n  (binding [vs/*current-env* (let [ne (when-let [m (meta syn)]\n                                        (select-keys m [:file :line :column :end-line :end-column]))]\n                               (or (when ((every-pred :file :line :column) ne)\n                                     ne)\n                                   vs/*current-env*))]\n    (cond\n      (nil? syn) {:op :singleton :val nil :form syn}\n      (true? syn) {:op :singleton :val true :form syn}\n      (false? syn) {:op :singleton :val false :form syn}\n      (vector? syn) {:op :Fn \n                     :arities [(parse-function syn)]\n                     :form syn\n                     :children [:arities]}\n      (symbol? syn) (assoc (parse-symbol syn)\n                           :form syn)\n      (seq? syn) (assoc (parse-seq syn)\n                        :form syn)\n      :else (err/int-error (str \"Bad type syntax: \" syn)))))", :ns "clojure.core.typed.parse-ast", :name "parse", :file "clojure/core/typed/parse_ast.clj", :column 1, :line 920, :arglists ([syn])}