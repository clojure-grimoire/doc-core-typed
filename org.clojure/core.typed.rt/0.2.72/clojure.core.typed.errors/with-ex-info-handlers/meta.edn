{:ns "clojure.core.typed.errors", :name "with-ex-info-handlers", :file "clojure/core/typed/errors.clj", :type :macro, :src "(defmacro with-ex-info-handlers \n  \"Handle an ExceptionInfo e thrown in body. The first handler whos left hand\n  side returns true, then the right hand side is called passing (ex-info e) and e.\"\n  [handlers & body]\n  `(try\n     (do ~@body)\n     (catch clojure.lang.ExceptionInfo e#\n       (let [found?# (atom false)\n             result# (reduce (fn [_# [h?# hfn#]]\n                               (when (h?# (ex-data e#))\n                                 (reset! found?# true)\n                                 (reduced (hfn# (ex-data e#) e#))))\n                             nil\n                             ~(mapv vec (partition 2 handlers)))]\n         (if @found?#\n           result#\n           (throw e#))))))", :column 1, :line 153, :macro true, :arglists ([handlers & body]), :doc "Handle an ExceptionInfo e thrown in body. The first handler whos left hand\n  side returns true, then the right hand side is called passing (ex-info e) and e."}