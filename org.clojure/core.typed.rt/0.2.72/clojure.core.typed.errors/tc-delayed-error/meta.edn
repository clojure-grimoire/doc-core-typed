{:type :fn, :src "(defn tc-delayed-error [msg & {:keys [return form] :as opt}]\n  (let [e (ex-info msg (merge {:type-error tc-error-parent}\n                              (when (or (contains? opt :form)\n                                        uvs/*current-expr*)\n                                {:form (if (contains? opt :form)\n                                         form\n                                         (ast-u/emit-form-fn uvs/*current-expr*))})\n                              {:env (env-for-error\n                                      (or (when uvs/*current-expr*\n                                            (:env uvs/*current-expr*))\n                                          *current-env*))}))]\n    (cond\n      ;can't delay here\n      (not uvs/*delayed-errors*)\n      (throw e)\n\n      :else\n      (do\n        (if-let [delayed-errors uvs/*delayed-errors*]\n          (swap! delayed-errors conj e)\n          (throw (Exception. (str \"*delayed-errors* not rebound\"))))\n        (or return (impl/v 'clojure.core.typed.type-rep/-nothing))))))", :ns "clojure.core.typed.errors", :name "tc-delayed-error", :file "clojure/core/typed/errors.clj", :column 1, :line 81, :arglists ([msg & {:keys [return form], :as opt}])}