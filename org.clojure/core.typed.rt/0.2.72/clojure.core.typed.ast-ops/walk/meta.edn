{:ns "clojure.core.typed.ast-ops", :name "walk", :file "clojure/core/typed/ast_ops.clj", :type :fn, :src "(defn walk\n  \"Walk the ast applying pre when entering the nodes, and post when exiting.\n  If reversed? is not-nil, pre and post will be applied starting from the last\n  children of the AST node to the first one.\"\n  ([ast pre post]\n   (walk ast pre post false))\n  ([ast pre post reversed?]\n   (let [fix (if reversed? rseqv identity)\n         walk #(walk % pre post reversed?)]\n     (post (update-children (pre ast) walk fix)))))", :column 1, :line 46, :arglists ([ast pre post] [ast pre post reversed?]), :doc "Walk the ast applying pre when entering the nodes, and post when exiting.\n  If reversed? is not-nil, pre and post will be applied starting from the last\n  children of the AST node to the first one."}