{:ns "clojure.core.typed.ast-ops", :name "update-children", :file "clojure/core/typed/ast_ops.clj", :type :fn, :src "(defn update-children\n  \"Applies `f` to the nodes in the AST nodes children.\n  Optionally applies `fix` to the children before applying `f` to the\n  children nodes and then applies `fix` to the update children.\n  An example of a useful `fix` function is `rseq`.\"\n  ([ast f] (update-children ast f identity))\n  ([ast f fix]\n   (if-let [c (children* ast)]\n     (reduce (fn [ast [k v]]\n               (assoc ast k (if (vector? v)\n                              (fix (mapv f (fix v)))\n                              (f v))))\n             ast (mapv list (fix (:children ast)) (fix c)))\n     ast)))", :column 1, :line 24, :arglists ([ast f] [ast f fix]), :doc "Applies `f` to the nodes in the AST nodes children.\n  Optionally applies `fix` to the children before applying `f` to the\n  children nodes and then applies `fix` to the update children.\n  An example of a useful `fix` function is `rseq`."}