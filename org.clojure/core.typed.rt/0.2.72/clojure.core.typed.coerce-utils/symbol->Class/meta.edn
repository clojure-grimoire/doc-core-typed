{:type :fn, :src "(defn symbol->Class \n  \"Returns the Class represented by the symbol. Works for\n  primitives (eg. byte, int). Does not further resolve the symbol.\"\n  [sym]\n  {:pre [(symbol? sym)]\n   :post [(class? %)]}\n  (case sym\n    byte Byte/TYPE\n    short Short/TYPE\n    int Integer/TYPE\n    long Long/TYPE\n    float Float/TYPE\n    double Double/TYPE\n    boolean Boolean/TYPE\n    char Character/TYPE\n    (RT/classForName (str sym))))", :ns "clojure.core.typed.coerce-utils", :name "symbol->Class", :file "clojure/core/typed/coerce_utils.clj", :column 1, :line 10, :arglists ([sym]), :doc "Returns the Class represented by the symbol. Works for\n  primitives (eg. byte, int). Does not further resolve the symbol."}