{:ns "clojure.core.typed", :name "def>", :file "clojure/core/typed.clj", :type :macro, :src "(defmacro\n  ^{:forms '[(def> name docstring? :- type expr)]}\n  ^{:deprecated \"0.2.45\"}\n  def>\n  \"DEPRECATED: use clojure.core.typed/def\n\n  Like def, but with annotations.\n\n  eg. (def> vname :- Long 1)\n\n  ;doc\n  (def> vname\n    \\\"Docstring\\\"\n    :- Long\n    1)\"\n  [name & fdecl]\n  (err/deprecated-macro-syntax\n    &form\n    (str \"clojure.core.typed/def> renamed to clojure.core.typed/def.\"\n         \" Note that it is impossible to :refer to a var called def.\"))\n  (let [[docstring fdecl] (internal/take-when string? fdecl)\n        _ (assert (and (#{3} (count fdecl))\n                       (#{:-} (first fdecl)))\n                  (str \"Bad def> syntax: \" fdecl))\n        [_ tsyn body] fdecl]\n    `(do (ann ~name ~tsyn)\n         ~(list* 'def name \n                 (concat\n                   (when docstring [docstring])\n                   [body])))))", :column 1, :line 764, :macro true, :deprecated "0.2.45", :arglists ([name & fdecl]), :doc "DEPRECATED: use clojure.core.typed/def\n\n  Like def, but with annotations.\n\n  eg. (def> vname :- Long 1)\n\n  ;doc\n  (def> vname\n    \"Docstring\"\n    :- Long\n    1)", :forms [(def> name docstring? :- type expr)]}