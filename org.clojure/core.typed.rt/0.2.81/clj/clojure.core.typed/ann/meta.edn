{:ns "clojure.core.typed", :name "ann", :file "clojure/core/typed.clj", :type :macro, :src "(defmacro ann \n  \"Annotate varsym with type. If unqualified, qualify in the current namespace.\n  If varsym has metadata {:no-check true}, ignore definitions of varsym \n  while type checking.\n\n  If annotating vars in namespaces other than the current one, a fully\n  qualified symbol must be provided. Note that namespace aliases are not\n  recognised: the *full* namespace must be given in the first part of the symbol.\n  \n  eg. ; annotate the var foo in this namespace\n      (ann foo [Number -> Number])\n  \n      ; annotate a var in another namespace\n      (ann another.ns/bar [-> nil])\n   \n      ; don't check this var\n      (ann ^:no-check foobar [Integer -> String])\"\n  [varsym typesyn]\n  (let [qsym (if (namespace varsym)\n               varsym\n               (symbol (-> *ns* ns-name str) (str varsym)))\n        _ (when (contains? (meta varsym) :nocheck)\n            (err/deprecated-macro-syntax\n              &form \n              (str \":nocheck metadata for ann is renamed :no-check\")))\n        opts (meta varsym)\n        _ (assert (not (and (contains? opts :nocheck)\n                            (contains? opts :no-check)))\n                  \"Cannot provide both :nocheck and :no-check metadata to ann\")\n        check? (not (or (:no-check opts)\n                        (:nocheck opts)))\n        ast (with-current-location &form\n              (delay-parse typesyn))]\n    (swap! impl/var-env assoc qsym ast)\n    `(ann* '~qsym '~typesyn '~check?)))", :column 1, :line 1697, :macro true, :arglists ([varsym typesyn]), :doc "Annotate varsym with type. If unqualified, qualify in the current namespace.\n  If varsym has metadata {:no-check true}, ignore definitions of varsym \n  while type checking.\n\n  If annotating vars in namespaces other than the current one, a fully\n  qualified symbol must be provided. Note that namespace aliases are not\n  recognised: the *full* namespace must be given in the first part of the symbol.\n  \n  eg. ; annotate the var foo in this namespace\n      (ann foo [Number -> Number])\n  \n      ; annotate a var in another namespace\n      (ann another.ns/bar [-> nil])\n   \n      ; don't check this var\n      (ann ^:no-check foobar [Integer -> String])"}