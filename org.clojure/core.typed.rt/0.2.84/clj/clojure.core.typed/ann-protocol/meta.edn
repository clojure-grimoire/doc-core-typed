{:ns "clojure.core.typed", :name "ann-protocol", :file "clojure/core/typed.clj", :type :macro, :src "(defmacro \n  ^{:forms '[(ann-protocol vbnd varsym & methods)\n             (ann-protocol varsym & methods)]}\n  ann-protocol \n  \"Annotate a possibly polymorphic protocol var with method types.\n  \n  eg. (ann-protocol IFoo\n        bar\n        (Fn [IFoo -> Any]\n            [IFoo Number Symbol -> Any])\n        baz\n        [IFoo Number -> Number])\n      (defprotocol> IFoo\n        (bar [this] [this n s])\n        (baz [this n]))\n\n      ; polymorphic protocol\n      ; x is scoped in the methods\n      (ann-protocol [[x :variance :covariant]]\n        IFooPoly\n        bar\n        (Fn [(IFooPoly x) -> Any]\n            [(IFooPoly x) Number Symbol -> Any])\n        baz\n        [(IFooPoly x) Number -> Number])\n      (defprotocol> IFooPoly\n        (bar [this] [this n s])\n        (baz [this n]))\"\n  [& args]\n  (let [bnd-provided? (vector? (first args))\n        vbnd (when bnd-provided?\n               (first args))\n        [varsym & mth] (if bnd-provided?\n                         (next args)\n                         args)\n        _ (let [fs (frequencies (map first (partition 2 mth)))]\n            (when-let [dups (seq (filter (fn [[_ freq]] (< 1 freq)) fs))]\n              (println (str \"WARNING: Duplicate method annotations in ann-protocol (\" varsym \n                            \"): \" (str/join \", \" (map first dups))))\n              (flush)))\n        ; duplicates are checked above.\n        ; duplicate munged methods are checked in collect-phase\n        {:as mth} mth\n        qualsym (if (namespace varsym)\n                  varsym\n                  (symbol (str (ns-name *ns*)) (name varsym)))]\n    (swap! impl/protocol-env\n           assoc qualsym\n           {:name qualsym\n            :methods mth\n            :bnds vbnd})\n    `(ann-protocol* '~vbnd '~varsym '~mth)))", :column 1, :line 1920, :macro true, :arglists ([& args]), :doc "Annotate a possibly polymorphic protocol var with method types.\n  \n  eg. (ann-protocol IFoo\n        bar\n        (Fn [IFoo -> Any]\n            [IFoo Number Symbol -> Any])\n        baz\n        [IFoo Number -> Number])\n      (defprotocol> IFoo\n        (bar [this] [this n s])\n        (baz [this n]))\n\n      ; polymorphic protocol\n      ; x is scoped in the methods\n      (ann-protocol [[x :variance :covariant]]\n        IFooPoly\n        bar\n        (Fn [(IFooPoly x) -> Any]\n            [(IFooPoly x) Number Symbol -> Any])\n        baz\n        [(IFooPoly x) Number -> Number])\n      (defprotocol> IFooPoly\n        (bar [this] [this n s])\n        (baz [this n]))", :forms [(ann-protocol vbnd varsym & methods) (ann-protocol varsym & methods)]}