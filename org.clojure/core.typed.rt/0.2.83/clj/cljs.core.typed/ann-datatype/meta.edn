{:ns "cljs.core.typed", :name "ann-datatype", :file "cljs/core/typed.clj", :type :macro, :src "(defmacro\n  ^{:forms '[(ann-datatype dname [field :- type*] opts*)\n             (ann-datatype binder dname [field :- type*] opts*)]}\n  ann-datatype\n  \"Annotate datatype Class name dname with expected fields.\n  If unqualified, qualify in the current namespace.\n\n  eg. (ann-datatype MyDatatype [a :- Number,\n  b :- Long])\n\n  (ann-datatype another.ns.TheirDatatype\n  [str :- String,\n  vec :- (IPersistentVector Number)])\"\n  [& args]\n  ;[dname fields & {ancests :unchecked-ancestors rplc :replace :as opts}]\n  (let [bnd-provided? (vector? (first args))\n        vbnd (when bnd-provided?\n               (first args))\n        [dname fields & {ancests :unchecked-ancestors rplc :replace :as opts}]\n        (if bnd-provided?\n          (next args)\n          args)]\n    (assert (not rplc) \"Replace NYI\")\n    (assert (symbol? dname)\n            (str \"Must provide name symbol: \" dname))\n    `(ann-datatype* '~vbnd '~dname '~fields '~opts)))", :column 1, :line 86, :macro true, :arglists ([& args]), :doc "Annotate datatype Class name dname with expected fields.\n  If unqualified, qualify in the current namespace.\n\n  eg. (ann-datatype MyDatatype [a :- Number,\n  b :- Long])\n\n  (ann-datatype another.ns.TheirDatatype\n  [str :- String,\n  vec :- (IPersistentVector Number)])", :forms [(ann-datatype dname [field :- type*] opts*) (ann-datatype binder dname [field :- type*] opts*)]}