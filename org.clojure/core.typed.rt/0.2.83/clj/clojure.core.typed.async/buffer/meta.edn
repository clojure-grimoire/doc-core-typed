{:ns "clojure.core.typed.async", :name "buffer", :file "clojure/core/typed/async.clj", :type :macro, :src "(defmacro buffer\n  \"Like buffer but with optional type annotations.\n\n  (buffer :- t ...) creates a buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/buffer.\n\n  Note: (buffer :- t ...) is the same as ((inst buffer t) ...)\"\n  [& args]\n  (let [[t? t args] (maybe-annotation args)]\n    (if t?\n      `((inst async/buffer ~t ~t) ~@args)\n      `(async/buffer ~@args))))", :column 1, :line 384, :macro true, :arglists ([& args]), :doc "Like buffer but with optional type annotations.\n\n  (buffer :- t ...) creates a buffer that can read and write type t.\n  Subsequent arguments are passed directly to clojure.core.async/buffer.\n\n  Note: (buffer :- t ...) is the same as ((inst buffer t) ...)"}